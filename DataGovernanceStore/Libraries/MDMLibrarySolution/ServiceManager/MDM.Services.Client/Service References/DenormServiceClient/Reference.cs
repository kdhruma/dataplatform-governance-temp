//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDM.Services.DenormServiceClient {

#pragma warning disable 1591, 618

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://wcfservices.riversand.com", ConfigurationName="DenormServiceClient.IDenormService")]
    public interface IDenormService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogs", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsMDMException" +
            "DetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.EntityActivityLogCollection GetEntityActivityLogs(MDM.Core.ProcessingStatus processingStatus, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogs", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.EntityActivityLogCollection> GetEntityActivityLogsAsync(MDM.Core.ProcessingStatus processingStatus, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsWithPaginati" +
            "on", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsWithPaginati" +
            "onResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsWithPaginati" +
            "onMDMExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.EntityActivityLogCollection GetEntityActivityLogsWithPagination(MDM.Core.ProcessingStatus processingStatus, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsWithPaginati" +
            "on", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityActivityLogsWithPaginati" +
            "onResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.EntityActivityLogCollection> GetEntityActivityLogsWithPaginationAsync(MDM.Core.ProcessingStatus processingStatus, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogId", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdMDMExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.ImpactedEntityCollection GetImpactedEntitiesByEntityActivityLogId(long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogId", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.ImpactedEntityCollection> GetImpactedEntitiesByEntityActivityLogIdAsync(long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdWithPagination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdWithPaginationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdWithPaginationMDMExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.ImpactedEntityCollection GetImpactedEntitiesByEntityActivityLogIdWithPagination(long entityActivityLogId, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdWithPagination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetImpactedEntitiesByEntityActivi" +
            "tyLogIdWithPaginationResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.ImpactedEntityCollection> GetImpactedEntitiesByEntityActivityLogIdWithPaginationAsync(long entityActivityLogId, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/LoadImpactedEntities", ReplyAction="http://wcfservices.riversand.com/IDenormService/LoadImpactedEntitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/LoadImpactedEntitiesMDMExceptionD" +
            "etailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        long LoadImpactedEntities(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.Core.ImpactType impactType, string programName, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/LoadImpactedEntities", ReplyAction="http://wcfservices.riversand.com/IDenormService/LoadImpactedEntitiesResponse")]
        System.Threading.Tasks.Task<long> LoadImpactedEntitiesAsync(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.Core.ImpactType impactType, string programName, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogMDMExce" +
            "ptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetEntityProcessorErrorLog(System.Collections.ObjectModel.Collection<long> entityIdList, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogRespons" +
            "e")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetEntityProcessorErrorLogAsync(System.Collections.ObjectModel.Collection<long> entityIdList, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogWithPag" +
            "ination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogWithPag" +
            "inationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogWithPag" +
            "inationMDMExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetEntityProcessorErrorLogWithPagination(System.Collections.ObjectModel.Collection<long> entityIdList, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogWithPag" +
            "ination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetEntityProcessorErrorLogWithPag" +
            "inationResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetEntityProcessorErrorLogWithPaginationAsync(System.Collections.ObjectModel.Collection<long> entityIdList, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogMDME" +
            "xceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetAllEntityProcessorErrorLog(MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogResp" +
            "onse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetAllEntityProcessorErrorLogAsync(MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogWith" +
            "Pagination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogWith" +
            "PaginationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogWith" +
            "PaginationMDMExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetAllEntityProcessorErrorLogWithPagination(long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogWith" +
            "Pagination", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetAllEntityProcessorErrorLogWith" +
            "PaginationResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetAllEntityProcessorErrorLogWithPaginationAsync(long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RefreshEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/RefreshEntityProcessorErrorLogRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/RefreshEntityProcessorErrorLogMDM" +
            "ExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool RefreshEntityProcessorErrorLog(long impactedEntityId, int containerId, string processorName, long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext, System.Collections.ObjectModel.Collection<int> impactedAttributeIdList, System.Collections.ObjectModel.Collection<int> impactedLocaleIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RefreshEntityProcessorErrorLog", ReplyAction="http://wcfservices.riversand.com/IDenormService/RefreshEntityProcessorErrorLogRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> RefreshEntityProcessorErrorLogAsync(long impactedEntityId, int containerId, string processorName, long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext, System.Collections.ObjectModel.Collection<int> impactedAttributeIdList, System.Collections.ObjectModel.Collection<int> impactedLocaleIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/ProcessEntityActivityLogs", ReplyAction="http://wcfservices.riversand.com/IDenormService/ProcessEntityActivityLogsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/ProcessEntityActivityLogsMDMExcep" +
            "tionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool ProcessEntityActivityLogs(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/ProcessEntityActivityLogs", ReplyAction="http://wcfservices.riversand.com/IDenormService/ProcessEntityActivityLogsResponse" +
            "")]
        System.Threading.Tasks.Task<bool> ProcessEntityActivityLogsAsync(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetParallelizationEngineStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetParallelizationEngineStatusRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetParallelizationEngineStatusMDM" +
            "ExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.ParallelizationEngineStatus GetParallelizationEngineStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetParallelizationEngineStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetParallelizationEngineStatusRes" +
            "ponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.ParallelizationEngineStatus> GetParallelizationEngineStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StartParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/StartParallelProcessingEngineResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/StartParallelProcessingEngineMDME" +
            "xceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool StartParallelProcessingEngine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StartParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/StartParallelProcessingEngineResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> StartParallelProcessingEngineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StopParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/StopParallelProcessingEngineRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/StopParallelProcessingEngineMDMEx" +
            "ceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool StopParallelProcessingEngine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StopParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/StopParallelProcessingEngineRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> StopParallelProcessingEngineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RestartParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/RestartParallelProcessingEngineRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/RestartParallelProcessingEngineMD" +
            "MExceptionDetailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool RestartParallelProcessingEngine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RestartParallelProcessingEngine", ReplyAction="http://wcfservices.riversand.com/IDenormService/RestartParallelProcessingEngineRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> RestartParallelProcessingEngineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RestartProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/RestartProcessorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/RestartProcessorMDMExceptionDetai" +
            "lsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool RestartProcessor(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/RestartProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/RestartProcessorResponse")]
        System.Threading.Tasks.Task<bool> RestartProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StartProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/StartProcessorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/StartProcessorMDMExceptionDetails" +
            "Fault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool StartProcessor(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StartProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/StartProcessorResponse")]
        System.Threading.Tasks.Task<bool> StartProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StopProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/StopProcessorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/StopProcessorMDMExceptionDetailsF" +
            "ault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool StopProcessor(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/StopProcessor", ReplyAction="http://wcfservices.riversand.com/IDenormService/StopProcessorResponse")]
        System.Threading.Tasks.Task<bool> StopProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetServiceStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetServiceStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/GetServiceStatusMDMExceptionDetai" +
            "lsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        MDM.BusinessObjects.ServiceStatusCollection GetServiceStatus(MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/GetServiceStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/GetServiceStatusResponse")]
        System.Threading.Tasks.Task<MDM.BusinessObjects.ServiceStatusCollection> GetServiceStatusAsync(MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/ProcessServiceStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/ProcessServiceStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MDM.BusinessObjects.MDMExceptionDetails), Action="http://wcfservices.riversand.com/IDenormService/ProcessServiceStatusMDMExceptionD" +
            "etailsFault", Name="MDMExceptionDetails", Namespace="http://mdmobjects.riversand.com/")]
        bool ProcessServiceStatus(string serverName, MDM.Core.MDMServiceType service, MDM.Core.MDMServiceSubType serviceSubType, string serviceStatusXml, string serviceConfigXml, MDM.BusinessObjects.CallerContext callerContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://wcfservices.riversand.com/IDenormService/ProcessServiceStatus", ReplyAction="http://wcfservices.riversand.com/IDenormService/ProcessServiceStatusResponse")]
        System.Threading.Tasks.Task<bool> ProcessServiceStatusAsync(string serverName, MDM.Core.MDMServiceType service, MDM.Core.MDMServiceSubType serviceSubType, string serviceStatusXml, string serviceConfigXml, MDM.BusinessObjects.CallerContext callerContext);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDenormServiceChannel : MDM.Services.DenormServiceClient.IDenormService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DenormServiceClient : System.ServiceModel.ClientBase<MDM.Services.DenormServiceClient.IDenormService>, MDM.Services.DenormServiceClient.IDenormService {
        
        public DenormServiceClient() {
        }
        
        public DenormServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DenormServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DenormServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DenormServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MDM.BusinessObjects.EntityActivityLogCollection GetEntityActivityLogs(MDM.Core.ProcessingStatus processingStatus, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityActivityLogs(processingStatus, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.EntityActivityLogCollection> GetEntityActivityLogsAsync(MDM.Core.ProcessingStatus processingStatus, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityActivityLogsAsync(processingStatus, callerContext);
        }
        
        public MDM.BusinessObjects.EntityActivityLogCollection GetEntityActivityLogsWithPagination(MDM.Core.ProcessingStatus processingStatus, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityActivityLogsWithPagination(processingStatus, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.EntityActivityLogCollection> GetEntityActivityLogsWithPaginationAsync(MDM.Core.ProcessingStatus processingStatus, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityActivityLogsWithPaginationAsync(processingStatus, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public MDM.BusinessObjects.ImpactedEntityCollection GetImpactedEntitiesByEntityActivityLogId(long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetImpactedEntitiesByEntityActivityLogId(entityActivityLogId, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.ImpactedEntityCollection> GetImpactedEntitiesByEntityActivityLogIdAsync(long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetImpactedEntitiesByEntityActivityLogIdAsync(entityActivityLogId, callerContext);
        }
        
        public MDM.BusinessObjects.ImpactedEntityCollection GetImpactedEntitiesByEntityActivityLogIdWithPagination(long entityActivityLogId, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetImpactedEntitiesByEntityActivityLogIdWithPagination(entityActivityLogId, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.ImpactedEntityCollection> GetImpactedEntitiesByEntityActivityLogIdWithPaginationAsync(long entityActivityLogId, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetImpactedEntitiesByEntityActivityLogIdWithPaginationAsync(entityActivityLogId, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public long LoadImpactedEntities(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.Core.ImpactType impactType, string programName, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.LoadImpactedEntities(entityActivityLogCollection, impactType, programName, callerContext);
        }
        
        public System.Threading.Tasks.Task<long> LoadImpactedEntitiesAsync(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.Core.ImpactType impactType, string programName, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.LoadImpactedEntitiesAsync(entityActivityLogCollection, impactType, programName, callerContext);
        }
        
        public MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetEntityProcessorErrorLog(System.Collections.ObjectModel.Collection<long> entityIdList, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityProcessorErrorLog(entityIdList, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetEntityProcessorErrorLogAsync(System.Collections.ObjectModel.Collection<long> entityIdList, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityProcessorErrorLogAsync(entityIdList, callerContext);
        }
        
        public MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetEntityProcessorErrorLogWithPagination(System.Collections.ObjectModel.Collection<long> entityIdList, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityProcessorErrorLogWithPagination(entityIdList, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetEntityProcessorErrorLogWithPaginationAsync(System.Collections.ObjectModel.Collection<long> entityIdList, long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetEntityProcessorErrorLogWithPaginationAsync(entityIdList, fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetAllEntityProcessorErrorLog(MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetAllEntityProcessorErrorLog(callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetAllEntityProcessorErrorLogAsync(MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetAllEntityProcessorErrorLogAsync(callerContext);
        }
        
        public MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection GetAllEntityProcessorErrorLogWithPagination(long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetAllEntityProcessorErrorLogWithPagination(fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.Denorm.EntityProcessorErrorLogCollection> GetAllEntityProcessorErrorLogWithPaginationAsync(long fromRecordNumber, long toRecordNumber, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetAllEntityProcessorErrorLogWithPaginationAsync(fromRecordNumber, toRecordNumber, callerContext);
        }
        
        public bool RefreshEntityProcessorErrorLog(long impactedEntityId, int containerId, string processorName, long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext, System.Collections.ObjectModel.Collection<int> impactedAttributeIdList, System.Collections.ObjectModel.Collection<int> impactedLocaleIdList) {
            return base.Channel.RefreshEntityProcessorErrorLog(impactedEntityId, containerId, processorName, entityActivityLogId, callerContext, impactedAttributeIdList, impactedLocaleIdList);
        }
        
        public System.Threading.Tasks.Task<bool> RefreshEntityProcessorErrorLogAsync(long impactedEntityId, int containerId, string processorName, long entityActivityLogId, MDM.BusinessObjects.CallerContext callerContext, System.Collections.ObjectModel.Collection<int> impactedAttributeIdList, System.Collections.ObjectModel.Collection<int> impactedLocaleIdList) {
            return base.Channel.RefreshEntityProcessorErrorLogAsync(impactedEntityId, containerId, processorName, entityActivityLogId, callerContext, impactedAttributeIdList, impactedLocaleIdList);
        }
        
        public bool ProcessEntityActivityLogs(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.ProcessEntityActivityLogs(entityActivityLogCollection, callerContext);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessEntityActivityLogsAsync(MDM.BusinessObjects.EntityActivityLogCollection entityActivityLogCollection, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.ProcessEntityActivityLogsAsync(entityActivityLogCollection, callerContext);
        }
        
        public MDM.BusinessObjects.ParallelizationEngineStatus GetParallelizationEngineStatus() {
            return base.Channel.GetParallelizationEngineStatus();
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.ParallelizationEngineStatus> GetParallelizationEngineStatusAsync() {
            return base.Channel.GetParallelizationEngineStatusAsync();
        }
        
        public bool StartParallelProcessingEngine() {
            return base.Channel.StartParallelProcessingEngine();
        }
        
        public System.Threading.Tasks.Task<bool> StartParallelProcessingEngineAsync() {
            return base.Channel.StartParallelProcessingEngineAsync();
        }
        
        public bool StopParallelProcessingEngine() {
            return base.Channel.StopParallelProcessingEngine();
        }
        
        public System.Threading.Tasks.Task<bool> StopParallelProcessingEngineAsync() {
            return base.Channel.StopParallelProcessingEngineAsync();
        }
        
        public bool RestartParallelProcessingEngine() {
            return base.Channel.RestartParallelProcessingEngine();
        }
        
        public System.Threading.Tasks.Task<bool> RestartParallelProcessingEngineAsync() {
            return base.Channel.RestartParallelProcessingEngineAsync();
        }
        
        public bool RestartProcessor(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.RestartProcessor(dataProcessor);
        }
        
        public System.Threading.Tasks.Task<bool> RestartProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.RestartProcessorAsync(dataProcessor);
        }
        
        public bool StartProcessor(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.StartProcessor(dataProcessor);
        }
        
        public System.Threading.Tasks.Task<bool> StartProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.StartProcessorAsync(dataProcessor);
        }
        
        public bool StopProcessor(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.StopProcessor(dataProcessor);
        }
        
        public System.Threading.Tasks.Task<bool> StopProcessorAsync(MDM.Core.CoreDataProcessorList dataProcessor) {
            return base.Channel.StopProcessorAsync(dataProcessor);
        }
        
        public MDM.BusinessObjects.ServiceStatusCollection GetServiceStatus(MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetServiceStatus(callerContext);
        }
        
        public System.Threading.Tasks.Task<MDM.BusinessObjects.ServiceStatusCollection> GetServiceStatusAsync(MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.GetServiceStatusAsync(callerContext);
        }
        
        public bool ProcessServiceStatus(string serverName, MDM.Core.MDMServiceType service, MDM.Core.MDMServiceSubType serviceSubType, string serviceStatusXml, string serviceConfigXml, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.ProcessServiceStatus(serverName, service, serviceSubType, serviceStatusXml, serviceConfigXml, callerContext);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessServiceStatusAsync(string serverName, MDM.Core.MDMServiceType service, MDM.Core.MDMServiceSubType serviceSubType, string serviceStatusXml, string serviceConfigXml, MDM.BusinessObjects.CallerContext callerContext) {
            return base.Channel.ProcessServiceStatusAsync(serverName, service, serviceSubType, serviceStatusXml, serviceConfigXml, callerContext);
        }
    }

    #pragma warning restore 1591, 618
}
