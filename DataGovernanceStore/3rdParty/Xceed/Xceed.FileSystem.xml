<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xceed.FileSystem</name>
    </assembly>
    <members>
        <member name="T:Xceed.FileSystem.FileSystemException">
            <summary>
            Exception that is thrown when an error occurs in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            This exception serves as the base class for all custom exceptions defined 
            in the Xceed.FileSystem namespace.
            </para><para>
            Specializations of the FileSystem object model also throw exceptions that derives
            from <see langword="FileSystemException"/>.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception, or an empty string.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Item">
            <summary>
            Gets or sets the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that caused the current exception.
            </summary>
            <value>The FileSystemItem object that caused the exception to be thrown. Can be null.</value>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemInternalException">
            <summary>
            Exception that is thrown when something unexpected occurs in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            This exception means that there was an internal failure in the library, and that nothing could be
            done to prevent it. Such failures should never occur.
            </para><para>
            To get more details about what went wrong, you can inspect the <see cref="P:System.Exception.InnerException"/>
            property. It is a reference to the exception that caused the internal failure.
            </para><para>
            If you ever catch this exception in your code, please contact Xceed Software Technical Support
            immediately.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified inner exception.
            </summary>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemIOException">
            <summary>
            Exception that is thrown when an I/O error occurs while reading from or writing
            to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <remarks>
            A <see cref="T:System.IO.IOException"/> will almost always be available in the
            <see cref="P:System.Exception.InnerException"/> property of this exception. This is the I/O exception
            that caused the <see langword="FileSystemIOException"/> to be thrown.
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemNotSupportedException">
            <summary>
            Exception that is thrown when calling a method or accessing a property that
            is not supported by a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemAlreadyExistsException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that already exists.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemDoesNotExistException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that does not yet exist.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsReadOnlyException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that is read only.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsRootFolderException">
            <summary>
            Exception that is thrown when performing an illegal operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that is a root folder.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.AndFilter">
            <summary>
            Performs a logical AND operation on a set of <see cref="T:Xceed.FileSystem.Filter"/> objects.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.Filter">
            <summary>
            The <see langword="Filter"/> class allows to filter a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            objects.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.GetFiltersFromParams(System.Object[])">
            <summary>
            Converts a generic array of parameters to an array of <see cref="T:Xceed.FileSystem.Filter"/> objects.
            </summary>
            <param name="filters">An array of objects that must be converted to an array
            of <see cref="T:Xceed.FileSystem.Filter"/> objects.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.Filter"/> objects.</returns>
            <remarks><para>
            To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list>
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches at least one of the
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches one
            of the provided filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches <b>all</b> of the 
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            <b>all</b> of the provided filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches one or more of the filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will being verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            one or more of the filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.#ctor">
            <summary>
            Initializes a new instance of the Filter class.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.#ctor(Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the Filter class specifying the <see cref="T:Xceed.FileSystem.FilterScope"/>.
            </summary>
            <param name="scope">A <see cref="T:Xceed.FileSystem.FilterScope"/> value specifying which type of 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> will be filtered by a <see cref="T:Xceed.FileSystem.Filter"/> object.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemInScope(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Retrieves a boolean value indicating if the specified item is within the
            scope of the filter.
            </summary>
            <param name="item">The item to verify.</param>
            <returns><see langword="true"/> if the item is within the scope of the filter; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Xceed.FileSystem.Filter.Scope">
            <summary>
            Gets or sets the scope of the filter.
            </summary>
            <value>A combination of <see cref="T:Xceed.FileSystem.FilterScope"/> values that identify the type of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects that are handled by this filter.</value>
        </member>
        <member name="M:Xceed.FileSystem.AndFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches <b>all</b> of the filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            <b>all</b> of the filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AndFilter.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see langword="AndFilter"/> class.
            </summary>
            <param name="filters">Filters that are part of the logical AND operation.</param>
        </member>
        <member name="P:Xceed.FileSystem.AndFilter.Filters">
            <summary>
            Gets an array of <see cref="T:Xceed.FileSystem.Filter"/> objects that are part of the logical AND operation.
            </summary>       
            <value>An array of <see cref="T:Xceed.FileSystem.Filter"/> objects.</value>
        </member>
        <member name="T:Xceed.FileSystem.AttributeFilter">
            <summary>
            Filters a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object based on its attributes.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches <b>at least one</b> of the file attributes.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches <b>at least one</b>
            of the file attributes; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.#ctor(System.IO.FileAttributes)">
            <summary>
            Initializes a new instance of the <see langword="AttributeFilter"/> class.
            </summary>
            <param name="attributes"><see cref="T:System.IO.FileAttributes"/> fields that
            represent the attributes used to filter files and folders.</param>
        </member>
        <member name="M:Xceed.FileSystem.AttributeFilter.#ctor(System.IO.FileAttributes,Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the <see langword="AttributeFilter"/> class.
            </summary>
            <param name="attributes"><see cref="T:System.IO.FileAttributes"/> fields that
            represent the attributes used to filter files and folders.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>
        </member>
        <member name="P:Xceed.FileSystem.AttributeFilter.Attributes">
            <summary>
            Gets the file attributes used to filter files and folders.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            fields that represent the attributes used to filter files and folders.</value>
        </member>
        <member name="T:Xceed.FileSystem.DateTimeFilter">
            <summary>
            Filters a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object based on its date and time.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches the date/time filter.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches the date/time filter; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see langword="DateTimeFilter"/> class.
            </summary>
            <param name="minValue">A <see cref="T:System.DateTime"/> field that represents the
            minimum date and time of the filter.</param>
            <param name="maxValue">A <see cref="T:System.DateTime"/> field that represents the
            maximum date and time of the filter.</param>
            <remarks><para>The filter will apply only to files.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.DateTimeFilter.ApplicableDateTime)">
            <summary>
            Initializes a new instance of the <see langword="DateTimeFilter"/> class, specifying
            to which type of date/time the filter applies.
            </summary>
            <param name="minValue">A <see cref="T:System.DateTime"/> field that represents the
            minimum date and time of the filter.</param>
            <param name="maxValue">A <see cref="T:System.DateTime"/> field that represents the
            maximum date and time of the filter.</param>
            <param name="applicableDateTimes">Determines to which type of date/time the filter applies.</param>
            <remarks><para>The filter will apply only to files.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the <see langword="DateTimeFilter"/> class, specifying
            to which type of <see cref="T:Xceed.FileSystem.FileSystemItem"/> object the filter applies.
            </summary>
            <param name="minValue">A <see cref="T:System.DateTime"/> field that represents the
            minimum date and time of the filter.</param>
            <param name="maxValue">A <see cref="T:System.DateTime"/> field that represents the
            maximum date and time of the filter.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>    
        </member>
        <member name="M:Xceed.FileSystem.DateTimeFilter.#ctor(System.DateTime,System.DateTime,Xceed.FileSystem.DateTimeFilter.ApplicableDateTime,Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the <see langword="DateTimeFilter"/> class, specifying
            to which type of date/time and <see cref="T:Xceed.FileSystem.FileSystemItem"/> object the filter applies.
            </summary>
            <param name="minValue">A <see cref="T:System.DateTime"/> field that represents the
            minimum date and time of the filter.</param>
            <param name="maxValue">A <see cref="T:System.DateTime"/> field that represents the
            maximum date and time of the filter.</param>
            <param name="applicableDateTimes">Determines to which type of date/time the filter applies.</param>
            <param name="scope">Determines whether the filter applies to files, folders or both.</param>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.MinDateTime">
            <summary>
            Gets the minimum date and time value of the filter.
            </summary>
            <value>A <see cref="T:System.DateTime"/> that represents the minimum date and time 
            of the filter.</value>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.MaxDateTime">
            <summary>
            Gets the maximum date and time value of the filter.
            </summary>
            <value>A <see cref="T:System.DateTime"/> that represents the maximum date and time 
            of the filter.</value>
        </member>
        <member name="P:Xceed.FileSystem.DateTimeFilter.ApplicableDateTimes">
            <summary>
            Gets the dates and times used to filter files and folders.
            </summary>
            <value>A combination of <see cref="T:System.DateTime"/> fields that represent 
            the dates and times used to filter files and folders.</value>
        </member>
        <member name="T:Xceed.FileSystem.DateTimeFilter.ApplicableDateTime">
            <summary>
            Specifies which type of date/time will be filtered by a <see cref="T:Xceed.FileSystem.DateTimeFilter"/> class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter.ApplicableDateTime.Creation">
            <summary>The filter will apply only to the creation date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter.ApplicableDateTime.LastWrite">
            <summary>The filter will apply only to the last modified date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter.ApplicableDateTime.LastAccess">
            <summary>The filter will apply only to the last accessed date/time.</summary>
        </member>
        <member name="F:Xceed.FileSystem.DateTimeFilter.ApplicableDateTime.All">
            <summary>The filter will apply to all date/times.</summary>
        </member>
        <member name="T:Xceed.FileSystem.NameFilter">
            <summary>
            Filters a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object based on its name.
            </summary>
            <remarks><para>By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> is set to File.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches <b>at least one</b> of the name filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches <b>at least one</b>
            of the name filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see langword="NameFilter"/> class.
            </summary>
            <param name="mask">Mask to use to filter file names (e.g. "*.txt", "a??.txt", etc.)
            By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> is set to File.</param>
            <remarks><para>
            By default, the mask is not case sensitive. To make it case sensitive, just prepend
            '&gt;' to the <paramref name="mask"/> parameter.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.NameFilter.#ctor(System.String,Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the <see langword="NameFilter"/> class.
            </summary>
            <param name="mask">Mask to use to filter file names (e.g. "*.txt", "a??.txt", etc.) 
            By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> is set to File.</param>
            <param name="scope">Determines whether the scope applies to files, folders or both.</param>
            <remarks><para>
            By default, the mask is not case sensitive. To make it case sensitive, just prepend
            '&gt;' to the <paramref name="mask"/> parameter.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.NameFilter.Masks">
            <summary>
            Gets an array of string masks that are used to filter the files and folders.
            </summary>
            <value>An array of string masks.</value>
        </member>
        <member name="P:Xceed.FileSystem.NameFilter.CaseSensitive">
            <summary>
            Gets a value indicating whether the file or folder name matching is case-sensitive.
            </summary>
            <value><see langword="true"/> if the file or folder name is case-sesitive; 
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:Xceed.FileSystem.NotFilter">
            <summary>
            Performs a logical NOT operation on a <see cref="P:Xceed.FileSystem.NotFilter.Filter"/> object.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item does <b>not</b> match the filter.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> does <b>not</b> match 
            the filter; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see langword="NotFilter"/> class.
            </summary>
            <param name="filter">Filter who's result must be inverted.</param>
        </member>
        <member name="M:Xceed.FileSystem.NotFilter.#ctor(Xceed.FileSystem.Filter)">
            <summary>
            Initializes a new instance of the <see langword="NotFilter"/> class.
            </summary>
            <param name="filter">Filter who's result must be inverted.</param>
        </member>
        <member name="F:Xceed.FileSystem.NotFilter.m_filter">
            <summary>
            The original filter used to build this <see cref="T:Xceed.FileSystem.NotFilter"/> object.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.NotFilter.Filter">
            <summary>
            Gets the <see cref="P:Xceed.FileSystem.NotFilter.Filter"/> object that is used for the logical NOT operation.
            </summary>      
            <value>A reference to a <see cref="P:Xceed.FileSystem.NotFilter.Filter"/> object.</value>
        </member>
        <member name="T:Xceed.FileSystem.OrFilter">
            <summary>
            Performs a logical OR operation on a set of <see cref="T:Xceed.FileSystem.Filter"/> objects.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.OrFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches <b>at least one</b> of the filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            <b>at least one</b> of the filters; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.OrFilter.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see langword="OrFilter"/> class.
            </summary>
            <param name="filters">Filters that are part of the logical OR operation.</param>
        </member>
        <member name="P:Xceed.FileSystem.OrFilter.Filters">
            <summary>
            Gets an array of <see cref="T:Xceed.FileSystem.Filter"/> objects that are part of the logical OR operation.
            </summary>     
            <value>A reference to a <see cref="T:Xceed.FileSystem.Filter"/> object.</value>
        </member>
        <member name="T:Xceed.FileSystem.SizeFilter">
            <summary>
            Filters a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object based on its size.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.SizeFilter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches the size filter.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches the size filter; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.SizeFilter.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see langword="SizeFilter"/> class.
            </summary>
            <param name="minSize">A value that represents the minimum size of the filter.</param>
            <param name="maxSize">A value that represents the maximum size of the filter.</param>
        </member>
        <member name="P:Xceed.FileSystem.SizeFilter.MinSize">
            <summary>
            Gets the minimum size value of the filter.
            </summary>
            <value>The minimum size value, in bytes, of the filter.</value>
        </member>
        <member name="P:Xceed.FileSystem.SizeFilter.MaxSize">
            <summary>
            Gets the maximum size value of the filter.
            </summary>
            <value>The maximum size value, in bytes, of the filter.</value>
        </member>
        <member name="T:Xceed.Utils.Exceptions.ExceptionFilter">
            <summary>
            Exposes utility methods for filtering exceptions.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Exceptions.ExceptionFilter.IsPublicException(System.Exception)">
            <summary>
            Determines if an exception can be thrown by a public method.
            </summary>
            <param name="exception">The exception to evaluate.</param>
            <returns>true if the exception can be thrown as-is; false if the exception should be converted.</returns>
            <remarks>
            Every public method should have a final exception handler for any un-caught
            exceptions that should call this method to determine if the exception can
            be thrown as-is to the caller (i.e. if the exception makes sense to the caller), or
            if it should be wrapped in a more meaningful exception for the caller.
            </remarks>
            <example>
            The following example illustrate how to implement this:
            <code>
            public void MyMethod()
            {
              try
              {
                DoSomething();
                DoSomethingElse();
              }
              catch( SomeSpecificException e )
              {
                HandleTheException();
              }
              catch( Exception e )
              {
                if( <B>ExceptionFilter.IsPublicException( e )</B> )
                  throw; // Simply pass the exception as-is to the caller
                  
                throw new MyUnexpectedException( "Something unexpected happened.", e );
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Xceed.Utils.Files.FileMatching">
            <summary>
            Summary description for FileMatching.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Files.FileMatching.MatchName(System.String,System.String,System.Boolean)">
            <summary>
            Checks if a wildcard with no path matches a name with no path.
            </summary>
            <param name="fileName">File name to match.</param>
            <param name="wildcards">Wildcard to match.</param>
            <param name="caseSensitive">Indicates if the comparison should be case-sensitive.</param>
            <returns>true if the wildcard matches the name; false otherwise.</returns>
        </member>
        <member name="T:Xceed.Utils.Streams.ClosingStreamEventHandler">
            <summary>
            Raised when the transient stream gets closed.
            </summary>
            <remarks>The sender is the TransientStream.</remarks>
        </member>
        <member name="T:Xceed.Utils.Strings.StringCheck">
            <summary>
            Summary description for StringCheck.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFile">
            <summary>
            Represents a generic file and exposes properties and methods that allow file-oriented operations to be performed.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemItem">
            <summary>
            Root class for all types of items that can exist in a generic 
            (abstract) folder. For example, a file and a folder.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> class.     
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <remarks><para>
            When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> 
            or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, are first accessed, a snapshot of the underlying 
            physical item's properties is taken. This snapshot is <b>not</b> automatically updated 
            whenever the physical item's properties change.</para><para>
            <see langword="Refresh"/> re-reads the information from the physical item and updates the snapshot.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Re-reads the information from the physical item and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, 
            such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties 
            is taken. This snapshot is <b>not</b> automatically updated whenever the physical 
            item's properties change.</para><para>
            <see langword="Refresh"/> re-reads the information from the physical item 
            and updates the snapshot.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create">
            <summary>
            Creates the physical item represented by this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, an empty file is created. If
            it represents a folder, a folder is created.</para><para>
            If the physical item already exists, an exception is thrown.</para><para>
            If the physical folder in which the new item is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Creates the physical item represented by this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object
            and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, 
            an empty file is created. If it represents a folder, a folder is created.</para>
            <para>If the physical item already exists, an exception is thrown.</para><para>
            If the physical folder in which the new item is to be created does not exist, 
            it is created.</para><para>The current property values (such as 
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly created 
            item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete">
            <summary>
            Permanently deletes the physical item.
            </summary>    
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the file is deleted.
            If it represents a folder, the folder <b>and all it's content</b> is deleted.</para><para>
            If the physical item does not exist, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Permanently deletes the physical item, and raises events during the process.
            </summary>    
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the file is deleted.
            If it represents a folder, the folder <b>and all it's content</b> is deleted.</para><para>
            If the physical item does not exist, an exception is thrown.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be deleted.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be deleted, 
            reports how many items have been deleted and the total number of items that must be deleted.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while deleting an item, reports the 
            exception and allows to recover from the exception and continue deleting the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Deletes each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Copies the item to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            item will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly copied item.</returns>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately copied to the destination folder.</para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            copied to the destination.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being copied is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being copied.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Copies the item to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            item will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly copied item.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately copied to the destination folder.</para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            copied to the destination.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being copied is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being copied.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be copied, reports how many 
            items have been copied and the total number of items that must be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            copied for the current item, as well as for the entire set of items that are being copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while copying an item, reports the 
            exception and allows to recover from the exception and continue copying the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCopyTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Copies each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list to each
            item's destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the target 
            item of the <b>first</b> <see cref="T:Xceed.FileSystem.ItemPair"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Moves the item to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the item will be moved. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly moved item.</returns>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately moved to the destination folder. </para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            moved to the destination. </para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being moved is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being moved.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Moves the item to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the item will be moved. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly moved item.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately moved to the destination folder. </para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            moved to the destination. </para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being moved is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being moved.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be moved, 
            reports how many items have been moved and the total number of items that must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            moved for the current item, as well as for the entire set of items that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving an item, reports the 
            exception and allows to recover from the exception and continue moving the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListMoveTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Moves each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list to each
            item's destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the target 
            item of the <b>last</b> <see cref="T:Xceed.FileSystem.ItemPair"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ToString">
            <summary>
            Returns the full name of the item.
            </summary>
            <returns>A string that represents the full name of the item.</returns>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.FullName"/>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item.
            </summary>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current
            item's properties must be copied. Cannot be <see langword="null"/>.</param>
            <remarks><para>
            Only the values of the <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, <see cref="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime"/>,
            <see cref="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime"/> and <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> properties will
            be copied.</para><para>
            If the current item does not exist, its cached properties are copied to the destination. If it does exist, 
            its physical properties are copied.</para><para>
            If the target item does not exist, it caches the values of the properties. If it does exist, 
            its physical properties are changed immediately.</para><para>
            This method only copies the properties that are supported by the source and target items. No exception 
            will be thrown if one of the items does not support one of the copied properties.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before calling this 
            method. This method will always copy the up-to-date property values to the target item.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current 
            item's properties must be copied. Cannot be <see langword="null"/>.</param>
            <remarks><para>
            Only the values of the <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, <see cref="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime"/>,
            <see cref="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime"/> and <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> properties will
            be copied.</para><para>If the current item does not exist, its cached properties are 
            copied to the destination. If it does exist, its physical properties are copied.</para><para>
            If the target item does not exist, it caches the values of the properties. 
            If it does exist, its physical properties are changed immediately.</para><para>
            This method only copies the properties that are supported by the source and 
            target items. No exception will be thrown if one of the items does not support 
            one of the copied properties.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be 
            called before calling this method. This method will always copy the up-to-date 
            property values to the target item.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item.
            </summary>    
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties should
            be taken. This snapshot should <b>not</b> be automatically updated whenever the 
            physical item's properties change.</para><para>
            <see langword="Refresh"/> should re-read the information from the physical item and 
            updates the snapshot.</para>
            <note type="inheritinfo"><see langword="Refresh"/> should be called before accessing a property,
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical item represented by the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            If the parents of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object do not exist
            upon creation of the item, an exception should be thrown.</para><para>
            If an exception is thrown during the creation of the item, the physical item should 
            not be deleted automatically.
            </para></remarks>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.EnsureDateIsValid(System.DateTime)">
            <summary>
            Ensures that the <see cref="T:System.DateTime"/> value is valid. 
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to validate.</param>
            <remarks><note type="inheritinfo">
            This method should be overridden only in the case where the physical item
            ( file or folder ) supports a specific date/time interval for our <see cref="T:System.DateTime"/>
            values ( creation, modified, accessed ). In that case, <see cref="F:System.DateTime.MinValue"/> should
            be supported since it indicates that no date was specified.
            </note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            If this method is called for an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object, all 
            children should have been previously deleted or the folder be empty or an exception
            should be thrown.</para><para>
            All metadata ( attributes, size, etc... ) associated with the <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object should be reset to their default values after the item is deleted.
            </para></remarks>     
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the item to another folder. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            item will be copied. Should not be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>    
            <remarks><para>
            If the destination does not exists, it should be created.
            </para><para>
            If an error occurs during the copying process of a file, the destination should not 
            be automatically deleted.
            </para><para>
            If the destination is created during the process, the metadata of the source item
            should be applied to the destination by calling <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/>.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesFrom(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="session"></param>
            <param name="sourceItem"></param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current 
            item's properties must be copied. Should not be <see langword="null"/>.</param>
            <remarks><note type="inheritinfo">
            This method should be overridden only in the case where the physical item
            ( file or folder ) supports specific meta-data ( other than attributes, dates, 
            size, etc... ). The override should eventually call the base implementation in order to
            address the regular FileSystemItem meta-data.
            </note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target items are the same. 
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination item.</param>
            <remarks><para>
            If the target item is <see langword="null"/>, this method should return <see langword="false"/>
            </para></remarks>
            <returns><see langword="true"/> if the source and target <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects 
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted in the environment
            of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object we are dealing with.
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> if the path is rooted; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <remarks><para>
            This method is overridden in both the <see cref="T:Xceed.FileSystem.AbstractFolder"/> and
            <see cref="T:Xceed.FileSystem.AbstractFile"/> classes and <b>does not</b> need to be overridden in more
            specific implementations.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildListForCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Handles the special cases in regards to building the list of items to process
            when creating a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Name">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>
            The short name consists of the item's name without a path.
            </para><para>
            For example, the short name of a file named "c:\folder\file.txt"
            is "file.txt", and the short name of a folder named "c:\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is
            immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created.
            In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.FullName">
            <summary>
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The full name consists of the item's name fully-qualified with a path. For example: "c:\folder\file.txt", 
            "c:\folder\".</para><para>
            If the item represents a file, its name does <b>not</b> end with a path separator character.</para><para>
            If the item represents a folder, its name <b>does</b> end with a path separator character.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/> and 
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasAttributes">
            <summary>
            Gets a boolean value indicating if the item supports attributes.
            </summary>
            <value><see langword="true"/> (default) if the item supports attributes; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasAttributes 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Attributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that represents the 
            attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately modified 
            if it exists. If it does not exist, the attributes are cached and will be applied whenever this item 
            is created.</para>
            <para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasAttributes"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.IO.FileAttributes.Normal"/> and <see cref="F:System.IO.FileAttributes.Directory"/> while the setter
            throws a <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.
            </para><para>
            Keep in mind that even if <see cref="P:Xceed.FileSystem.FileSystemItem.HasAttributes"/> returns <see langword="true"/>, it is not 
            guaranteed that all the attributes are supported. The non-supported attributes will simply be ignored.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or the 
            information returned could be outdated. </note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a creation date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a creating date and time;
            <see langword="false"/> otherwise.
            </value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasCreationDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.CreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately modified 
            if it exists. If it does not exist, the date is cached and will be applied whenever this 
            item is created.</para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasCreationDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or 
            the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last write date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a last write date and time;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasLastWriteDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be applied whenever this 
            item is created.</para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasLastWriteDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or the 
            information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last access date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a last access date and time;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasLastAccessDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately modified if 
            it exists. If it does not exist, the date is cached and will be applied whenever this item is created.</para><para>
            </para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasLastAccessDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or 
            the information returned could be outdated. </note></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.ParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, or 
            <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.RootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder at the root of the path of this 
            item, or <see langword="null"/> if a rootfolder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical disk, it is usually 
            represented by a drive letter ("C:\") or UNC root ("\\server\share\").</para><para>
            Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFolder"/> class may define a specialized class that 
            represents a root folder, exposing properties and methods that apply only to a root.</para><para>
            Therefore, the <see langword="RootFolder"/> property may return an <see cref="T:Xceed.FileSystem.AbstractFolder"/>
            instance that is in fact a specialized class representing the root. </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself, or a reference to a specialized object that represents the root 
            folder with more details.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Exists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying 
            physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>), otherwise these methods will 
            throw an exception.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before accessing 
            this property. The property will always reflect the physical item's existence.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.InvalidChars">
            <summary>
            Gets the characters that are invalid in file and folder names.
            </summary>
            <value>An array of characters containing the characters that are 
            invalid in file and folder names.</value>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item, or null 
            (Nothing in Visual Basic) if this item does not support this interface.
            </summary>
            <remarks><P>Previous implementations of Xceed Zip for .NET (before 2.0.200) only 
            supported this interface via the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/>. Only 
            the root folder of a file system needed to implement this interface to support 
            it for every child.</P>
            <P>The default implementation does not break this behavior. It queries the 
            <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> for <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> 
            support.</P>
            <P>If a file system does not support this interface, it can override this
            property and simply return null (Nothing in Visual Basic). This will improve 
            performance by avoiding unnecessary access to the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/>
            property.</P></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoName">
            <summary>
            Gets or sets the short name of the item. 
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>When assigning a new name to this property, the physical item should be
            immediately renamed if it exists. If it does not exist, the new name should be cached 
            and applied whenever this item is created. In either cases, if a physical 
            item with the same name already exists, an exception should be thrown.</para>
            <para>The short name of an item should not end with a path separator character 
            regardless of whether it represents a file or a folder.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoFullName">
            <summary>
            Gets the full name of the item. 
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>The full name should consist of the item's name fully-qualified 
            with a path. For example: "c:\folder\file.txt", "c:\folder\".</para><para>
            If the item represents a file, its name should not end with a path 
            separator character.</para><para>
            If the item represents a folder, its name should end with a path separator 
            character.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes">
            <summary>
            Gets a boolean value indicating if the item supports attributes.
            </summary>
            <value><see langword="true"/> if the item supports attributes; <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasAttributes returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that 
            represents the attributes of the item.</value>
            <remarks><para>When changing the item's attributes through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the attributes should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose attributes; in this case, <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes"/> should 
            return <see langword="false"/> to prevent <see cref="P:Xceed.FileSystem.FileSystemItem.DoAttributes"/> from being called.
            </para><note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a creation date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a creation date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasCreationDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item. 
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>When changing the item's creation date through this property,
            the physical item should be immediately modified if it exists. If it does not 
            exist, the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a creation date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoCreationDateTime"/> from being called.</para><para>
            Other types of items that do expose a creation date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing 
            this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last write date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a last write date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasLastWriteDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item. 
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>When changing the item's modification date through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a modification date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoLastWriteDateTime"/> from being called.</para><para>
            Other types of items that do expose a modification date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last access date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a last access date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasLastAccessDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item. 
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>When changing the item's access date through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a last access date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoLastAccessDateTime"/> from being called.</para><para>
            Other types of items that do expose a last access date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item. 
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            that contains the item, or <see langword="null"/> if the item does not have
            a parent.</value>
            <remarks><para>If the current item is the root of a folder hierarchy, it has
            no parent folder. In this case, the <see langword="ParentFolder"/> property
            should return <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder at the root 
            of the path of this item, or <see langword="null"/> if a root folder is not 
            available.</value>   
            <remarks><para>A root folder should represent the starting point of a folder hierarchy. 
            On a physical disk, it is usually represented by a drive letter ("C:\") or UNC root 
            ("\\server\share\").</para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> 
            property should return a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property
            should return <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists. 
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>This property should be evaluated before calling a method that
            needs to access the underlying physical item, otherwise an exception
            should be raised from the method.</para><para>The property should always
            reflect the physical item's existence.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does not need
            to be called before accessing this property. </note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead">
            <summary>
            Opens the file for reading.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks>
            <para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para>
            <para>
            The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified file sharing mode.
            </summary>    
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.</para><para>
            The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support
            any or all of the values defined in this enumeration. In this case, an exception is thrown.
            </para></remarks> 
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Opens the file for reading and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para>
            <para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified file sharing mode and raises
            events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how 
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different 
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support 
            any or all of the values defined in this enumeration. In this case, an exception is thrown.</para>
            </remarks>   
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="overwrite"><see langword="true"/> if existing data for the item
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.</para><para>
            The file will be opened with <see cref="F:System.IO.FileShare.None"/> shared access.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified file sharing mode.
            </summary>
            <param name="overwrite"><see langword="true"/> if existing data for the item
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support
            any or all of the values defined in this enumeration. In this case, an exception is thrown.
            </para><para>
            Some File implementations may not support appending or overwriting. In this case, an exception is thrown.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is ignored.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>
            Opens the file for writing and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the item 
            should be replaced; <see langword="false"/> if existing data should be preserved, 
            appending new data at the end.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The file will be opened with <see cref="F:System.IO.FileShare.None"/> shared access.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified file sharing 
            mode and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the item 
            should be replaced; <see langword="false"/> if existing data should be preserved, 
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that 
            determines how the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may 
            not support any or all of the values defined in this enumeration. In this case, 
            an exception is thrown.</para>
            <para>Some File implementations may not support appending or overwriting. 
            In this case, an exception is thrown.</para>
            <para>If there is no existing data, the parameter <paramref name="overwrite"/> is ignored.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Copies the file's data to another file.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object that
            represents the file to which the current file's data must be copied. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if the destination file should
            be replaced if it exists; <see langword="false"/> otherwise.</param><returns>
            A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the destination file.</returns>
            <remarks><para>
            This method only copies the <b>data</b> of a file to another file.</para><para>
            If the file specified by <paramref name="destinationFile"/> does not exist, it is
            created. If it does exist, an exception is thrown if <paramref name="replaceIfExists"/>
            is <see langword="false"/>, or it is overwritten if <paramref name="replaceIfExists"/> 
            is <see langword="true"/>.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Copies the file's data to another file, and raises events during the process.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents the file to 
            which the current file's data must be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if the destination file should
            be replaced if it exists; <see langword="false"/> otherwise.</param><returns>
            A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the destination file.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            This method only copies the <b>data</b> of a file to another file.</para><para>
            If the file specified by <paramref name="destinationFile"/> does not exist, it is
            created. If it does exist, an exception is thrown if <paramref name="replaceIfExists"/>
            is <see langword="false"/>, or it is overwritten if <paramref name="replaceIfExists"/> is 
            <see langword="true"/>.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must 
            be copied for the current file.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while copying the file, 
            reports the exception and allows recovery from the exception and continues copying the file.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Moves the contents of the <see cref="T:Xceed.FileSystem.AbstractFile"/> object to the target
            <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object into which the
            contents of the item will be moved. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <remarks><para>If the physical file specified by <paramref name="destinationFile"/>
            does not exist, it is created.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly 
            moved item.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Moves the contents of the <see cref="T:Xceed.FileSystem.AbstractFile"/> object to the target
            <see cref="T:Xceed.FileSystem.AbstractFile"/> object and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object into which the
            contents of the item will be moved. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <remarks><para>If the physical file specified by <paramref name="destinationFile"/>
            does not exist, it is created.</para>
            <para>If the destination item exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original item are not applied to the destination item.</para></remarks>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly 
            moved item.</returns>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be 
            moved, reports how many items have been moved and the total number of items that 
            must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have 
            been and must be moved for the current item, as well as for the entire set of items 
            that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving 
            an item, reports the exception and allows to recover from the exception and 
            continue moving the items.                                                                                                                                       </event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the file into the destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            file will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream should be guaranteed to be readable, but does not have to be seekable.
            </para><para>
            The <paramref name="share"/> parameter should allow control over how the file is 
            shared by different processes. If the values defined in this enumeration are not 
            supported, an exception should thrown.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>The returned stream should be guaranteed to be writable, but does not have to be seekable.</para><para>
            The <paramref name="share"/> parameter should allow control over how the file is 
            shared by different processes. If the values defined in this enumeration are not 
            supported, an exception should be thrown.</para><para>
            If the File implementation does not support appending or overwriting, an 
            exception should be thrown.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> should be 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>   
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception is thrown.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this 
            property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.DoSize">
            <summary>
            Gets the size of the file in bytes. 
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>Some types of files may not have the size information available.
            In this case, <see langword="-1"/> should be returned.</para><para>
            If the file does not physically exist, an exception should be thrown.</para> 
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFolder">
            <summary>
            Represents a generic folder, and exposes properties and methods that allow folder-oriented 
            operations to be performed.</summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(System.String,System.Boolean)">
            <summary>
            Creates a new file in the folder.
            </summary>
            <param name="relativeName">Relative name of the new file.</param>
            <param name="replaceIfExists"><see langword="true"/> if the new file should replace an existing file; 
            <see langword="false"/> otherwise.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the newly created file.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path information, in which ".." 
            means "previous folder". For example: "folder/file.txt", "../file.txt", etc.</para><para>
            If a file named <paramref name="relativeName"/> already exist in the destination folder
            and <paramref name="replaceIfExists"/> is <see langword="false"/>, an exception is thrown. 
            If <paramref name="replaceIfExists"/> is <see langword="true"/>, the existing file is 
            replaced by the newly created one. </para><para>
            If the physical folder in which the new file is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the 
            newly created file.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String,System.Boolean)">
            <summary>
            Creates a new file in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param> 
            <param name="replaceIfExists"><see langword="true"/> if the new file should 
            replace an existing file; <see langword="false"/> otherwise.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the newly created file.</returns>
            <remarks><para>The <paramref name="relativeName"/> parameter can include 
            relative path information, in which ".." means "previous folder". 
            For example: "folder/file.txt", "../file.txt", etc.</para><para>
            If a file named <paramref name="relativeName"/> already exist in the destination 
            folder and <paramref name="replaceIfExists"/> is <see langword="false"/>, an 
            exception is thrown. If <paramref name="replaceIfExists"/> is 
            <see langword="true"/>, the existing file is replaced by the newly created one.
            </para><para>If the physical folder in which the new file is to be created
            does not exist, it is created.</para><para>The current property values 
            (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created file.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(System.String)">
            <summary>
            Creates a new folder in the folder.
            </summary>
            <param name="relativeName">Relative name of the new folder.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the newly created folder.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/subFolder", "../folder", etc.</para><para>
            If a folder named <paramref name="relativeName"/> already exist, this method does nothing.</para><para>
            If the physical folder in which the new folder is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created folder. </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Creates a new folder in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the newly created folder.</returns>
            <remarks><para>The <paramref name="relativeName"/> parameter can include relative 
            path information, in which ".." means "previous folder". For 
            example: "folder/subFolder", "../folder", etc.</para><para>If a folder named 
            <paramref name="relativeName"/> already exist, this method does nothing.
            </para><para>If the physical folder in which the new folder is to be 
            created does not exist, it is created.</para><para>The current property values 
            (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly created 
            folder.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents a file contained in the folder.
            </summary>
            <param name="relativeName">Relative name of the file to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the file named <paramref name="relativeName"/>.
            </returns><remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/file.txt", "../file.txt", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object for a file that exists, 
            as well as for a file that does not exist. Further, the folder on which this method 
            is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents a file 
            contained in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the file to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the file named 
            <paramref name="relativeName"/>.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/file.txt", 
            "../file.txt", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object
            for a file that exists, as well as for a file that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents a folder contained in the folder.
            </summary>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the folder named
            <paramref name="relativeName"/>.</returns><remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/subFolder", "../folder", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object
            for a folder that exists, as well as for a folder that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents a folder contained in the folder 
            and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the folder named 
            <paramref name="relativeName"/>.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". 
            For example: "folder/subFolder", "../folder", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object
            for a folder that exists, as well as for a folder that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of files contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if files contained in the subfolders should
            be returned; <see langword="false"/> if only files that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files
            that match the specified <paramref name="filters"/>.</returns>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>For more detailed information on how to use filters, please refer to the
              <b>Using filters</b> topic.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of files contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if files contained in the subfolders should
            be returned; <see langword="false"/> if only files that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files
            that match the specified <paramref name="filters"/>.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>For more detailed information on how to use filters, please refer to the
              <b>Using filters</b> topic.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for files to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, 
            reports the exception and allows to recover from the exception and continue building the list of files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of folders contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if folders contained in the subfolders should
            be returned; <see langword="false"/> if only folders that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the
            list of folders returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders
            that match the specified <paramref name="filters"/>.</returns>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
            <para>
            Note that when passing a string, for example "folder", as the folder to retrieve 
            in the <paramref name="filters"/> parameter, a <see cref="T:Xceed.FileSystem.NameFilter"/> class
            will be created around the string. By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> of 
            the <see langword="NameFilter"/> class is <see cref="F:Xceed.FileSystem.FilterScope.File"/>. This means
            that only files will be filter and <b>all</b> folders will be returned.</para>
            <para>
            In order to filter folders, a <see cref="T:Xceed.FileSystem.NameFilter"/> class needs to be constructed 
            around the string and the <see cref="T:Xceed.FileSystem.FilterScope"/> must be set to <see cref="F:Xceed.FileSystem.FilterScope.Folder"/>. 
            For example:</para><para><code>
            GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );
            </code></para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of folders contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if folders contained in the subfolders should
            be returned; <see langword="false"/> if only folders that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the
            list of folders returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders
            that match the specified <paramref name="filters"/>.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>    
            <para>
            Note that when passing a string, for example "folder", as the folder to retrieve 
            in the <paramref name="filters"/> parameter, a <see cref="T:Xceed.FileSystem.NameFilter"/> class
            will be created around the string. By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> of
            the <see langword="NameFilter"/> class is <see cref="F:Xceed.FileSystem.FilterScope.File"/>. This means
            that only files will be filter and <b>all</b> folders will be returned.</para><para>
            In order to filter folders, a <see cref="T:Xceed.FileSystem.NameFilter"/> class needs to be constructed 
            around the string and the <see cref="T:Xceed.FileSystem.FilterScope"/> must be set to 
            <see cref="F:Xceed.FileSystem.FilterScope.Folder"/>. For example:</para>
            <para><code>
            GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );
            </code></para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for folders to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, 
            reports the exception and allows to recover from the exception and continue building the list of folders.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(System.Boolean)">
            <summary>
            Returns a list of items contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if items contained in the subfolders should
            be returned; <see langword="false"/> if only items that are immediate children of the
            folder should be returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the items contained in the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>
            Returns a list of items contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if items contained in the subfolders should
            be returned; <see langword="false"/> if only items that are immediate children of the
            folder should be returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the items contained in the folder.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"> A folder is being scanned for items to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, reports 
            the exception and allows to recover from the exception and continue building the list of items.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Copies the folder's content to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be copied. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained in the subfolders 
            should be copied; <see langword="false"/> if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/>
            does not exist, it is created.</para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately copied to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being copied is automatically replaced.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains a file with the same name as a file being copied.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>  
              <para>If the destination items exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original items are not applied to the destination items.</para>      
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Copies the folder's content to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be copied. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained in the subfolders 
            should be copied; <see langword="false"/> if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <remarks>
            <para>
            If the physical folder specified by <paramref name="destinationFolder"/>
            does not exist, it is created.</para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately copied to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being copied is automatically replaced.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains a file with the same name as a file being copied.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>If the destination items exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original items are not applied to the destination items.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for files to be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time a file is about to be copied, reports how many 
            files have been copied and the total number of files that must be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            copied for the current file, as well as for the entire set of files that are being copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">An exception occurs while copying a file, reports the 
            exception and allows to recover from the exception and continue copying the files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Moves the folder's content to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be moved. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained 
            in the subfolders should be moved; <see langword="false"/> if only the current folder's content 
            should be moved.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should 
            be replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately moved to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being moved is automatically replaced.
            </para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>,
            an exception is thrown whenever the destination contains a file
            with the same name as a file being moved.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>If the destination items exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original items are not applied to the destination items.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Moves the folder's content to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be moved. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained 
            in the subfolders should be moved; <see langword="false"/> if only the current folder's content 
            should be moved.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should 
            be replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <remarks>
            <para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately moved to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being moved is automatically replaced.
            </para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>,
            an exception is thrown whenever the destination contains a file
            with the same name as a file being moved.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="T:Xceed.FileSystem.NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="T:Xceed.FileSystem.AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>If the destination items exists, <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is not called and therefore the 
            attributes and dates of the original items are not applied to the destination items.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for files to be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an file is about to be moved, reports how many 
            files have been moved and the total number of files that must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            moved for the current file, as well as for the entire set of files that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving a file, reports the 
            exception and allows to recover from the exception and continue moving the files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateTempFile">
            <summary>
            Creates the temporary file.
            </summary>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the temporary file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the folder to another folder. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            folder will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFileFromRelativeName(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="relativeName"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolderFromRelativeName(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="relativeName"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFiles(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>  
            Retrieves an array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files contained
            within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolders(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Retrieves an array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders contained
            within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetItems(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the files and 
            folders contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary> 
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the
            items ( files and folders ) contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>   
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <remarks><para><paramref name="fileName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>Should return a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object 
            regardless if the file represented by the object exists or not.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
            <remarks><para><paramref name="folderName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>Should return reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object regardless 
            if the folder represented by the object exists or not.</returns>
        </member>
        <member name="F:Xceed.FileSystem.AbstractFolder.m_isRoot">
            <summary>
            Identifies if this folder is a root folder.
            </summary>
            <remarks><para>
            <b>Notes to inheritors:</b> The constructors of derived classes should set this field to 
            <see langword="true"/> if they represent the root folder.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.IsRoot">
            <summary>
            Gets a value indicating if the folder is a root folder.
            </summary>
            <value><see langword="true"/> if the folder is a root folder; <see langword="false"/> otherwise.</value>
            <remarks><para>
            See <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> for more information about root folders.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.DoIsRoot">
            <summary>
            Gets a boolean value indicating if the folder is a root folder.
            </summary>
            <value><see langword="true"/> if the folder represented by the 
            <see cref="T:Xceed.FileSystem.AbstractFolder"/> class is a root folder; <see langword="false"/> otherwise.</value>    
        </member>
        <member name="T:Xceed.FileSystem.IBatchUpdateable">
            <summary>
            Allows a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to optimize its updates,
            by modifying its underlying physical store only once.
            </summary>
            <remarks><para>
            This interface is usually implemented by a root folder.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate">
            <summary>
            Prevents a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object from modifying its
            underlying physical store until the <see cref="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate"/> method
            is called.
            </summary>
            <remarks><para>
            A call to <see langword="BeginUpdate"/>  <b>must</b> be accompanied by a subsequent
            call to <see cref="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate"/>, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Prevents a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object from modifying its underlying physical 
            store until the <see cref="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate"/> method is called and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            A call to <see langword="BeginUpdate"/>  <b>must</b> be accompanied by a subsequent
            call to <see cref="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate"/>, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate">
            <summary>
            Informs a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to apply to its underlying
            physical store all the modifications that have been made since the call
            to <see cref="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate"/>.
            </summary>
            <remarks><para>
            A call to <see langword="EndUpdate"/>  <b>must</b> be preceded by a
            call to <see cref="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate"/>, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Informs a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to apply to its underlying
            physical store all the modifications that have been made since the call
            to <see cref="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate"/> and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            A call to <see langword="EndUpdate"/>  <b>must</b> be preceded by a
            call to <see cref="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate"/>, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="T:Xceed.FileSystem.AutoBatchUpdate">
            <summary>
            Class that verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object)">
            <summary>
            Verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </summary>
            <param name="batchUpdateable"> object that <b>may or may not</b> implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.</param>
            <remarks><para>
            The <see langword="AutoBatchUpdate"/> class will verify if <paramref name="batchUpdateable"/> implements the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and will automatically 
            call the <see langword="BeginUpdate"/> and <see langword="EndUpdate"/> methods if it does. If <paramref name="batchUpdateable"/> 
            does not implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface, the code will be executed normally.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object,Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and raises events during the process.
            </summary>
            <param name="batchUpdateable">Object that <b>may or may not</b> implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            The <see langword="AutoBatchUpdate"/> class will verify if <paramref name="batchUpdateable"/> implements the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and will automatically 
            call the <see langword="BeginUpdate"/> and <see langword="EndUpdate"/> methods if it does. If <paramref name="batchUpdateable"/> 
            does not implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface, the code will be executed normally.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.System#IDisposable#Dispose">
            <summary>
            Calls the <see langword="EndUpdate"/> method on the object that was passed in the construction of the
            <see langword="AutoBatchUpdateable"/> class.
            </summary>    
            <remarks><para>
            The <see langword="EndUpdate"/> method will only be called if the objecy implemented the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </para></remarks>
        </member>
        <member name="T:Xceed.FileSystem.DiskFile">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class that implements access to a disk file.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.DiskFile"/> class 
            with the fully qualified name of an underlying physical file.
            </summary>
            <param name="fileName">Fully qualified name of the underlying physical file. 
            This file may or may not physically exist.</param>
            <remarks><para>
            The <paramref name="fileName"/> parameter can include relative path
            information, in which ".." means "previous folder".
            For example: "folder/file.txt", "../file.txt", etc.
            </para><para>
            In this context, a name is relative to the current working direcory
            of the application.
            </para><para>
            This method allows to initialize a <see cref="T:Xceed.FileSystem.DiskFile"/> object
            for a file that exists, as well as for a file that does not exist.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.DiskFile"/> class 
            with the fully qualified name of an already verified underlying physical file.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties is
            taken. This snapshot is <b>not</b> automatically updated whenever the physical item's properties change.
            </para><para>
            <see langword="Refresh"/> re-reads the information from the physical item and updates the snapshot.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>    
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.
            </para><para>
            The <paramref name="share"/> parameter allows you to control how the file is 
            shared by different processes.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be 
            seekable.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared 
            by different processes.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical file.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            The file must be created in a folder that exists otherwise an exception will be thrown. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target file are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination file.</param>
            <returns><see langword="true"/> if the source and target files
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFile.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> if the path is rooted (for example "d:\folder\file.txt"); 
            <see langword="false"/> otherwise (for example "file.txt"). </returns>    
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_name">
            <summary>
            The current short name for the file.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_fullName">
            <summary>
            The current fully-qualified name for the file. 
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_attributes">
            <summary>
            The current file attributes for the file.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_creationTime">
            <summary>
            The current creation date and time for the file.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_lastWriteTime">
            <summary>
            The current last modification date and time for the file.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_lastAccessTime">
            <summary>
            The current last access date and time for the file.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_size">
            <summary>
            The current file size in bytes.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFile.m_info">
            <summary>
            Information about this file.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "c:\folder\file.txt" is "file.txt", and the short name of a folder named "c:\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator 
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The fullname consists of the item's name, fully-qualified, with a path. 
            For example: "c:\folder\file.txt".</para>
            <para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para><para>
            Some types of items may not expose attributes. In this case, an exception is thrown when trying to 
            read or modify the attributes.</para><para>
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical
            disk, it is usually represented by a drive letter ("C:\") or UNC root ("\\server\share\").
            </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that
            needs to access the underlying physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>),
            otherwise these methods will throw an exception.</para><para>
            The property will always reflect the physical item's existence.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before accessing this 
            property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.DoSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception will be thrown.</para> 
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.DiskFile.BatchUpdateable">
            <summary>
            Returns null (Nothing in Visual Basic) since a <see cref="T:Xceed.FileSystem.DiskFile"/> or a 
            <see cref="T:Xceed.FileSystem.DiskFolder"/> does not support the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.DiskFolder">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFolder"/> class that implements access to a disk folder.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.DiskFolder"/> class 
            with the fully qualified name of an underlying physical folder.
            </summary>
            <param name="folderName">Fully qualified name of the underlying physical folder. 
            This folder may or may not physically exist.</param>
            <remarks><para>
            The <paramref name="folderName"/> parameter can include relative path
            information, in which ".." means "previous folder".
            For example: "folder/file", "../file", etc.
            </para><para>
            In this context, a name is relative to the current working direcory
            of the application.
            </para><para>
            This method allows to initialize a <see cref="T:Xceed.FileSystem.DiskFolder"/> object
            for a folder that exists, as well as for a folder that does not exist.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.DiskFolder"/> class 
            with the fully qualified name of an already verified underlying physical folder.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary> 
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the
            items ( files and folders ) contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            The folder must be created in a folder that exists otherwise an exception will be thrown. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties is
            taken. This snapshot is <b>not</b> automatically updated whenever the physical item's properties change.
            </para><para>
            <see langword="Refresh"/> re-reads the information from the physical item and updates the snapshot.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>   
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <remarks><para><paramref name="fileName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object regardless of
            if the file represented by the object exists or not.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
            <remarks><para><paramref name="folderName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object regardless of
            if the folder represented by the object exists or not.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Returns a boolean value indicating if the source and target items are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination item.</param> 
            <returns><see langword="true"/> if the source and target <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects 
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.DiskFolder.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>    
            <returns><see langword="true"/> if the path is rooted (for example "d:\folder"); 
            <see langword="false"/> otherwise. (for example "folder")</returns>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_name">
            <summary>
            The current short name for the folder.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_fullName">
            <summary>
            The current fully qualified name for the folder. 
            Should always end with a <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_fullNameForIO">
            <summary>
            The current fully qualified name for the folder minus the 
            Path.DirectorySeparatorChar at the end. Used for certain methods of the System.IO Namespace.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_attributes">
            <summary>
            The current file attributes for the folder. 
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_creationTime">
            <summary>
            The current creation date and time for the folder.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_lastWriteTime">
            <summary>
            The current last modification date and time for the folder.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_lastAccessTime">
            <summary>
            The current last access date and time for the folder.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.DiskFolder.m_info">
            <summary>
            Information about the folder.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "c:\folder\file.txt" is "file.txt", and the short name of a folder named "c:\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator character.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The full name consists of the item's name fully-qualified with a path. 
            For example: "c:\folder\file.txt", "c:\folder\".</para><para>
            If the item represents a file, its name does <b>not</b> end with a path
            separator character.</para><para>
            If the item represents a folder, its name <b>does</b> end with a path separator character.
            </para><para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this 
            property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.
            </note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical
            disk, it is usually represented by a drive letter ("C:\") or UNC root ("\\server\share\").
            </para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying physical 
            item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>).</para><para>
            The property will always reflect the physical item's existence.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need
            to be called before accessing this property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.DiskFolder.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item
            </summary>
            <value>Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item, or 
            <see langword="null"/> if this item does not support the interface.</value>
            <remarks><note type="inotes"><para>Previous implementations of Xceed Zip for .NET 
            (before 2.0.200) only supported this interface via the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> 
            property. Only the root folder of a <see cref="T:Xceed.FileSystem.FileSystemItem"/> needed to implement this interface 
            to support it for every child.</para>
            <para>The default implementation does not break this behavior. It queries the 
            <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> property for <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> support.</para>
            <para>If a FileSystemItem does not support this interface, this
            property can be overridden and return <see langword="null"/>. This will improve 
            performance by avoiding unnecessary access to the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> property.
            </para></note></remarks>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventArgs">
            <summary>
            The base class for argument classes used by all events.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventArgs.#ctor">
            <summary>
            Initializes a new instance of the FileSystemEventArgs class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_userData">
            <summary>
            Opaque data that is sent back to the event handler when an event is raised.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_currentItem">
            <summary>
            The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_targetItem">
            <summary>
            The current target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object of the process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event 
            handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.CurrentItem">
            <summary>  
            Gets or sets the current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.TargetItem">
            <summary>    
            Gets or sets the destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>   
            <value>A reference to the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value> 
        </member>
        <member name="T:Xceed.FileSystem.ProgressionInfo">
            <summary>
            Provides progression information for progression events.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ProgressionInfo.#ctor">
            <summary>
            Initializes a new instance of the ProgressionInfo class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_processed">
            <summary>
            The amount of bytes or items processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_total">
            <summary>
            The total amount of bytes or items to process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Processed">
            <summary>
            Gets or sets the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.
            </summary>
            <value>A value indicating the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.</value>   
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Total">
            <summary>    
            Gets or sets the total number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <value>A value indicating the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.</value>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Percent">
            <summary>
            Gets the ratio (percentage) of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.
            </summary>
            <value>A value indicating the ratio of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.</value>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventArgs">
            <summary>
            Provides byte progression information.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ByteProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo,Xceed.FileSystem.ProgressionInfo)">
            <summary>
            Initializes a new instance of the ByteProgressionEventArgs argument class.
            </summary>
            <param name="currentFileBytes">The size, in bytes, of the file currently being processed.</param>
            <param name="allFilesBytes">The total combined size, in bytes, of all files being processed.</param>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_currentFileBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to the current item being processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_allFilesBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to all the items to be processed.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.CurrentFileBytes">
            <summary>
            Gets the size, in bytes, of the file currently being processed.
            </summary>
            <value>A value indicating the size, in bytes, of the file being processed.</value>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.AllFilesBytes">
            <summary>
            Gets the total combined size, in bytes, of all files being processed.
            </summary>
            <value>A value indicating the size, in bytes, of all the files being processed.</value>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventArgs">
            <summary>
            Provides item progression information.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo)">
            <summary>
            Initializes an new instance of the ItemProgressionEventArgs argument class.
            </summary>
            <param name="allItems">The total number of items being processed.</param>
        </member>
        <member name="F:Xceed.FileSystem.ItemProgressionEventArgs.m_allItems">
            <summary>
            An instance of the ProgressionInfo class representing the item count information.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemProgressionEventArgs.AllItems">
            <summary>
            Gets the total number of items being processed.
            </summary>
            <value>A value indicating the number if items being processed.</value>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventArgs">
            <summary>
            Provides information on the folder being scanned or accessed.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ScanningFolderEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ScanningFolderEventArgs argument class.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionAction">
            <summary>
            Value representing the action to take when an exception is thrown during the processing of a
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object. 
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Abort">
            <summary>The entire process will be aborted and the exception will be thrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Retry">
            <summary>Retry processing the item. A corrective action <b>must</b> be taken otherwise 
            the same exception will be rethrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Ignore">
            <summary>Ignore the item that caused the error and continue processing the other items.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventArgs">
            <summary>
            Provides information on the exception that was thrown during a process.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemExceptionEventArgs.#ctor">
            <summary>
            Intializes a new instance of the ItemExceptionEventArgs argument class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_exception">
            <summary>
            An instance of the Exception class representing the exception that was thrown 
            and caused the OnItemException event to be raised.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_action">
            <summary>
            An instance of the ItemExceptionAction class representing the action
            that will be taken in the OnItemException event handler. 
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Exception">
            <summary>
            Gets or sets the exception that was thrown.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemException"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Action">
            <summary>
            Gets or sets the action taken when an exception is thrown during the processing of a
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object. 
            </summary>
            <value>A value indicating the action taken when an exception is thrown</value>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEvents">
            <summary>
            Class that dispatches events raised from methods called on <see cref="T:Xceed.FileSystem.FileSystemItem"/> 
            objects or objects that derive from the <see cref="T:Xceed.FileSystem.FileSystemItem"/> class.
            </summary>
            <remarks><para>
            This class serves as a central point of access to associate event
            handlers with method calls, for methods that need to raise events.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.CreateSession(System.Object,System.Object)">
            <summary>
            Initializes a new session from a <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object.
            </summary>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object from which the session is created.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.BeginSubOperation">
            <summary>
            Called when a sub-operation is begun within a process.
            </summary>
            <remarks><para>Increments the sub-operation counter.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.EndSubOperation">
            <summary>
            Called when a sub-operation is ended within a process.
            </summary>
            <remarks><para>Decrements the sub-operation counter.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnByteProgression(System.Object,Xceed.FileSystem.ByteProgressionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemProgression(System.Object,Xceed.FileSystem.ItemProgressionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnScanningFolder(System.Object,Xceed.FileSystem.ScanningFolderEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemException(System.Object,Xceed.FileSystem.ItemExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.ValidateParams(System.Object,Xceed.FileSystem.FileSystemEventArgs)">
            <summary>
            Verifies the validity of the parameters sent to the event handlers.
            </summary>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> on which the method was called.</param>
            <param name="e">An instance of the <see cref="T:Xceed.FileSystem.FileSystemEventArgs"/> argument
            class.</param>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEvents.m_subOperationCount">
            <summary>
            Sub-operation counter which keeps a reference count on the amount of sub-operations
            within a process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.Empty">
            <exclude/>
            <summary>
            This property is reserved for internal use and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">
            <summary>
            Raised when an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object is accessed or is 
            scanned for matching items while building a list of items to process.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">
            <summary>
            Raised every time a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object is 
            <b>about to be processed</b>, providing progression information to the event handler.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">
            <summary>
            Raised for every 64k of bytes processed when a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object
            is being processed.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemException">
            <summary>
            Raised when an exception is caught during the processing of a 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object, allowing the handler to decide the action to take.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsScanningFolder">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemProgression">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsByteProgression">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemException">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventsSession">
            <summary>    
            Class which holds information about the session which is responsible for 
            raising all events that occur during the process.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> class.
            </summary>
            <param name="events">The <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object from which we created
            the session.</param>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object on which the process was called.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <remarks><para>This constructor is called within the <see cref="M:Xceed.FileSystem.FileSystemEvents.CreateSession(System.Object,System.Object)"/> method
            found in the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> class.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnScanningFolder(Xceed.FileSystem.AbstractFolder)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="currentFolder">The <see cref="T:Xceed.FileSystem.AbstractFolder"/> object being scanned.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnNewItemToProcess(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Places the new item in the list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <param name="currentItem">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="targetItem">The eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being added
            to the list of items.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnProcessingNewItem(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Called when a new item is about to be processed.    
            </summary>
            <param name="current">The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="target">The eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object for the process.</param>
            <param name="raiseBytesProgression">A boolean value indicating if we want bytes progression events to be raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.GetNextItemPair(System.Boolean)">
            <summary>
            Retrieves the next pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <param name="raiseBytesProgression">A boolean value indicating if the <see langword="ByteProgression"/> event should be raised.</param>
            <returns>An <see cref="T:Xceed.FileSystem.ItemPair"/> object.</returns>
            <remarks><para>
            A pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects consisting of the current item 
            being processed and it's eventual target or destination item. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesProcessed(System.Int64)">
            <summary>
            Raises the <see langword="FileSystemEvents.ByteProgression"/> event.    
            </summary>
            <param name="increment">The amount of bytes to be added to the total amount of bytes processed so far.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesCompleted">
            <summary>    
            Forces the byte progression to 100% completion.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnUndoBytesProcessed">
            <summary>
            Removes the amount of bytes processed for an item if an error 
            occurred during the processing of that item.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnException(System.Exception)">
            <summary>
            Raises the <see langword="ItemException"/> event whenever an error occurs during the 
            processing of a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="except">The error that occurred.</param>
            <returns><see langword="true"/> if we want to retry processing the item; <see langword="false"/> if
            the item should be ignored or the process aborted.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnCompletion">
            <summary>
            Raises the last <see langword="ItemProgression"/> event when the process is completed.    
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentFileBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to the current item being processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allFilesBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to all the items to be processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allItems">
            <summary>
            An instance of the ProgressionInfo class representing the item count information
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_scanningFolderArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> class 
            that provides information on the folder being scanned or accessed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_byteProgressionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> class
            that provides byte progression information for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemProgressionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> class
            that provides item progression information for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemExceptionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> class 
            that provides information on the exception that was thrown during a process
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentItem">
            <summary>
            The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_targetItem">
            <summary>
            The current target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object of the process 
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_events">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> class representing the 
            original <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object from which we created the session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_sender">
            <summary>
            The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object on which the process was called.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_userData">
            <summary>
            This is set at construction, and updated after each event.
            It is assigned to each argument structure before each event.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairQueue">
            <summary>
            Represents a first-in, first-out collection of the items to process for the 
            current session.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.Events">
            <summary>
            Gets the original <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object used to create the session.
            </summary>
            <value>A reference to <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object.</value>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.UserData">
            <summary>
            Gets the opaque data that is sent back to the event handler when an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.CurrentItem">
            <summary>
            Gets or sets the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object currently being processed.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.TargetItem">
            <summary>
            Gets or sets the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object for the process.
            </summary>
            <value>A reference to the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.IsEmpty">
            <summary>
            Gets a boolean value indicating if the session's list of 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process contains no items. 
            </summary>
            <value><see langword="true"/> if the list is empty; <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:Xceed.FileSystem.ItemPair">
            <summary>
            Represents a pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects consisting of the 
            item being processed and it's eventual target or destination item.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemPair.#ctor(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes an instance of the <see cref="T:Xceed.FileSystem.ItemPair"/> class specifying
            the current and target items.
            </summary>
            <param name="currentItem">The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="targetItem">The eventual target or destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</param>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.current">
            <summary>
            The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being procesed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.target">
            <summary>
            The eventual target or destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <remarks><para>Can be <see langword="null"/> in cases where there is no 
            target, for example when calling the <seealso cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> method.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemLicense.AllowedVersions">
            <summary>
            All the version number supported by this version of the product.
            </summary>
            <remarks>
            The versions should be in descending order beginning with the
            less restrictive up to the more restrictive.
            </remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemLicense.LicenseeType">
            <summary>
            The type of the class or control that is licensed by this class (or, more
            exactly, a class derived from this one).
            </summary>
            <remarks>
            If more than one class is licensed by the XceedLicense class, the LicenseeType
            can simply be typeof( Licenser ).
            </remarks>
        </member>
        <member name="T:Xceed.FileSystem.FilterScope">
            <summary>
            Specifies which type of <see cref="T:Xceed.FileSystem.FileSystemItem"/> will be filtered by a 
            <see cref="T:Xceed.FileSystem.Filter"/> object.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.File">
            <summary>The filter will be applied to any <see cref="T:Xceed.FileSystem.AbstractFile"/> object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.Folder">
            <summary>The filter will be applied to any <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.All">
            <summary>The filter will be applied to all types of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.</summary>
        </member>
        <member name="T:Xceed.FileSystem.IsolatedFile">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class that implements access to a file located
            in Isolated Storage. <b>This class is not supported by Xceed Zip for .NET Compact Framework as
            Isolated Storage does not exist on the .NET Compact Framework.</b>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IsolatedFile class with the fully qualified name 
            of an underlying physical file.
            </summary>
            <param name="fileName">Fully qualified name of the underlying physical file. 
            This file may or may not physically exist.</param>
            <remarks><para>
            Allowed paths: "file.txt", "folder\file.txt", "\folder\file.txt"
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical file.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            The file must be created in a folder that exists otherwise an exception will be thrown. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties is
            taken. This snapshot is <b>not</b> automatically updated whenever the physical item's properties change.
            </para><para>
            <see langword="Refresh"/> re-reads the information from the physical item and updates the snapshot.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.
            </para><para>
            The <paramref name="share"/> parameter allows you to control how the file is 
            shared by different processes.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be 
            seekable.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared 
            by different processes.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target file are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination file.</param>
            <returns><see langword="true"/> if the source and target files
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> if the path is rooted (for example "folder\file.txt"); 
            <see langword="false"/> otherwise (for example "file.txt"). </returns>    
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception will be thrown.</para> 
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "\folder\file.txt" is "file.txt", and the short name of a folder named "\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator 
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The fullname consists of the item's name, fully-qualified, with a path. 
            For example: "folder\file.txt".</para>
            <para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasAttributes">
            <summary>
            Gets a boolean value indicating if the file supports attributes.
            </summary>
            <value><see langword="false"/> because isolated files do not support attributes.</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoAttributes">
            <summary>
            Gets or sets the attributes of the item. <b>Not supported</b>.
            </summary>    
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that represents the 
            attributes of the item.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFile.DoHasAttributes"/> always returns <see langword="false"/>, DoAttributes
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the file supports having a creation date and time.
            </summary>
            <value><see langword="false"/> because isolated files do not support creation dates and times.</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFile.DoHasCreationDateTime"/> always returns <see langword="false"/>, DoCreationDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the file supports having a last write date and time.
            </summary>
            <value><see langword="false"/> because isolated files do not support last write dates and times.</value>    
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFile.DoHasLastWriteDateTime"/> always returns <see langword="false"/>, DoLastWriteDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoHasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the file supports having a last access date and time.
            </summary>
            <value><see langword="false"/> because isolated files do not support last access dates and times.</value>    
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFile.DoHasLastAccessDateTime"/> always returns <see langword="false"/>, DoLastAccessDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>A reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing a new
            <see cref="T:Xceed.FileSystem.IsolatedFolder"/>.</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying 
            physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>),
            otherwise these methods will throw an exception.</para><para>
            The property will always reflect the physical item's existence.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before 
            accessing this property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFile.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="T:Xceed.FileSystem.IsolatedFolder">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFolder"/> class that implements access to a folder located
            in Isolated Storage. <b>This class is not supported by Xceed Zip for .NET Compact Framework as
            Isolated Storage does not exist on the .NET Compact Framework.</b>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IsolatedFolder class 
            with the fully qualified name of an underlying physical folder.
            </summary>
            <param name="folderName">Fully qualified name of the underlying physical folder. 
            This folder may or may not physically exist.</param>
            <remarks><para>
            Allowed paths: "folder", "folder\subFolder", "\folder\subFolder"
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary> 
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the
            items ( files and folders ) contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            The folder must be created in a folder that exists otherwise an exception will be thrown. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item. In the case of a IsolatedFolder object,
            we are always up-to-date.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param> 
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>   
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object regardless of
            if the file represented by the object exists or not.</returns>
            <remarks><para><paramref name="fileName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para>
            <para>Case-sensitivity is system specific in Isolated Storage.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object regardless of
            if the folder represented by the object exists or not.</returns>
            <remarks><para><paramref name="folderName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para>
            <para>Case-sensitivity is system specific in Isolated Storage.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Returns a boolean value indicating if the source and target items are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination item.</param> 
            <returns><see langword="true"/> if the source and target <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects 
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>    
            <returns><see langword="true"/> if the path is rooted (for example "\folder"); 
            <see langword="false"/> otherwise. (for example "folder")</returns>
        </member>
        <member name="M:Xceed.FileSystem.IsolatedFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "\folder\file.txt" is "file.txt", and the short name of a folder named "\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator character.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The full name consists of the item's name fully-qualified with a path. 
            For example: "folder\file.txt", "folder\".</para><para>
            If the item represents a file, its name does <b>not</b> end with a path
            separator character.</para><para>
            If the item represents a folder, its name <b>does</b> end with a path separator character.
            </para><para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasAttributes">
            <summary>
            Gets a boolean value indicating if the folder supports attributes.
            </summary>
            <value><see langword="false"/> because isolated folders do not support attributes</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoAttributes">
            <summary>
            Gets or sets the attributes of the item. <b>Not supported</b>.
            </summary>    
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that represents the 
            attributes of the item.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFolder.DoHasAttributes"/> always returns <see langword="false"/>, DoAttributes
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the folder supports having a creation date and time.
            </summary>
            <value><see langword="false"/> because isolated folders do not support creation dates and times.</value>    
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFolder.DoHasCreationDateTime"/> always returns <see langword="false"/>, DoCreationDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the folder supports having a last write date and time.
            </summary>
            <value><see langword="false"/> because isolated folderss do not support last write dates and times.</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was modified. </value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFolder.DoHasLastWriteDateTime"/> always returns <see langword="false"/>, DoLastWriteDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoHasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the folder supports having a last access date and time.
            </summary>
            <value><see langword="false"/> because isolated folders do not support last access dates and times.</value>    
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item. <b>Not supported</b>.
            </summary>
            <value>The date and time when the item was last accessed. </value>
            <remarks><para>
            Because <see cref="P:Xceed.FileSystem.IsolatedFolder.DoHasLastAccessDateTime"/> always returns <see langword="false"/>, DoLastAccessDateTime
            should never be called.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>A reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing a new
            <see cref="T:Xceed.FileSystem.IsolatedFolder"/>.</value>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying physical 
            item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>).</para><para>
            The property will always reflect the physical item's existence.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need
            to be called before accessing this property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.IsolatedFolder.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="T:Xceed.FileSystem.Licenser">
            <summary>
            Class which is used to register the classes located in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            We recommend you set the LicenseKey property in the main entry point of the application.
            For example, the LicenseKey property can be set, for C# users, in the static main
            function. For VB.NET users, it can be set in the constructor of the main form or
            in the "Sub Main" procedure. If no entry point is available, it is recommended that the LicenseKey 
            property be set in a static constructor of a class that will be accessed systematically before
            any of the library's classes are instantiated or, you can simply set the LicenseKey
            property immediately BEFORE you instantiate a class.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.Licenser.LicenseKey">
            <summary>
            Gets or sets the license key used to license this product.
            </summary>
            <value>A string value representing the license key used to license this product.</value>
        </member>
        <member name="T:Xceed.FileSystem.MemoryFile">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class that implements access 
            to a file located in memory.
            </summary>
            <remarks><para>
            As long as you hold at least one instance on a MemoryFile or a <see cref="T:Xceed.FileSystem.MemoryFolder"/> located in a 
            specific root name, all files and folders in that same virtual ram drive stay alive. When a root name 
            is no longer referenced, all its content will get garbage collected later.
            </para><para>
            To make sure the memory allocated for a MemoryFile's data is released, as soon as you don't need the 
            file anymore, call <see cref="M:Xceed.FileSystem.FileSystemItem.Delete"/> on that MemoryFile.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor">
            <summary>
            Initializes a new instance of the MemoryFile class, using a unique root name and filename.
            </summary>
            <remarks><para>
            As long as you hold at least one instance on a MemoryFile or a <see cref="T:Xceed.FileSystem.MemoryFolder"/> located in a 
            specific root name, all files and folders in that same virtual ram drive stay alive. When a root name 
            is no longer referenced, all its content will get garbage collected later.
            </para><para>
            To make sure the memory allocated for a MemoryFile's data is released, as soon as you don't need the 
            file anymore, call <see cref="M:Xceed.FileSystem.FileSystemItem.Delete"/> on that MemoryFile.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MemoryFile class specifying its full name.
            </summary>
            <param name="fullName">The fully qualified name of the MemoryFile, as returned by 
            <see cref="P:Xceed.FileSystem.FileSystemItem.FullName"/>, including the root part. The file does not need to exist. 
            For example, "RAM:\memoryFile.txt" or "MyRam1:\subfolder\MyFile.txt"</param>
            <remarks><para>
            As long as you hold at least one instance on a MemoryFile or a <see cref="T:Xceed.FileSystem.MemoryFolder"/> located in a 
            specific root name, all files and folders in that same virtual ram drive stay alive. When a root name 
            is no longer referenced, all its content will get garbage collected later.
            </para><para>
            To make sure the memory allocated for a MemoryFile's data is released, as soon as you don't need the 
            file anymore, call <see cref="M:Xceed.FileSystem.FileSystemItem.Delete"/> on that MemoryFile.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MemoryFile class specifying its root name and filename.
            </summary>
            <param name="rootName">The root name of the MemoryFile, without the colon (:). You can see this as the drive letter (or name) of your memory drive. For example: "RamDrive1"</param>
            <param name="fullName">The name of the MemoryFile, without the root part. Can contain a path. For example, "memoryFile.txt" or "\subfolder\MyFile.txt</param>
            <remarks><para>
            As long as you hold at least one instance on a MemoryFile or a <see cref="T:Xceed.FileSystem.MemoryFolder"/> located in a 
            specific root name, all files and folders in that same virtual ram drive stay alive. When a root name 
            is no longer referenced, all its content will get garbage collected later.
            </para><para>
            To make sure the memory allocated for a MemoryFile's data is released, as soon as you don't need the 
            file anymore, call <see cref="M:Xceed.FileSystem.FileSystemItem.Delete"/> on that MemoryFile.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.Finalize">
            <summary>
            Allows the MemoryFile object to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical file.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>The file must be created in an existing folder.</para></remarks>    
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item. In the case of a MemoryFile object,
            we are always up-to-date.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>   
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target file are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination file.</param>
            <returns><see langword="true"/> if the source and target files
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> if the path is rooted (for example "RAM_DRIVE:\folder\file.txt"); 
            <see langword="false"/> otherwise (for example "file.txt"). </returns>  
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.
            </para><para>
            The <paramref name="share"/> parameter allows you to control how the file is 
            shared by different processes.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be 
            seekable.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared 
            by different processes.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "RAM_DRIVE:\file.txt" is "file.txt", and the short name of a folder named "RAM_DRIVE:\folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. </para><para>
            The short name of an item must <b>not</b> end with a path separator 
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The fullname consists of the item's name, fully-qualified, with a path. 
            For example: "RAM_DRIVE:\folder\file.txt".</para>
            <para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical
            disk, it is usually represented by a drive letter ("C:\") or UNC root ("\\server\share\").
            </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that
            needs to access the underlying physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>),
            otherwise these methods will throw an exception.</para><para>
            The property will always reflect the physical item's existence.</para>
            <note>
            <see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before accessing this 
            property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFile.DoSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception will be thrown.</para> 
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="F:Xceed.FileSystem.MemoryHandler.m_refCount">
            <summary>
            As soon as a MemoryHandler is referenced by a MemoryFile or a MemoryFolder
            its parent MemoryFolderHandlers are referenced too. This mecanism 
            propagates reference counting to the root. It always know if at least one
            handler is referenced. As long as any one handler in a world is referenced,
            all handlers are kept alive, existing or not.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.MemoryFolder">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFolder"/> class that implements access 
            to a folder located in memory.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor">
            <summary>
            Initializes a new instance of the MemoryFolder class, using a unique root name.
            </summary>
            <remarks><note>This creates a root folder.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MemoryFolder class specifying its full path name.
            </summary>
            <param name="fullName">The full name of the MemoryFolder, as returned by <see cref="P:Xceed.FileSystem.FileSystemItem.FullName"/>,
            including the root part. The folder does not need to exist. 
            For example, "RAM:\" or "MyRam1:\Data\Images\Gifs"</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MemoryFolder class specifying its root name and folder path.
            </summary>
            <param name="rootName">The root name of the MemoryFolder, without the colon (:). You can see this as the drive letter (or name) of your memory drive. For example: "RamDrive1"</param>
            <param name="fullPath">The full path of the MemoryFolder, without the root part. For example, "\" or "\Data\Images\Gifs"</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.Finalize">
            <summary>
            Allows the MemoryFolder object to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            The folder must be created in a folder that exists otherwise an exception will be thrown. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical folder.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item. In the case of a MemoryFolder object,
            we are always up-to-date.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>   
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Returns a boolean value indicating if the source and target items are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination item.</param> 
            <returns><see langword="true"/> if the source and target <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects 
            are the same; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>    
            <returns><see langword="true"/> if the path is rooted (for example "RAM_DRIVE:\folder"); 
            <see langword="false"/> otherwise. (for example "folder")</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary> 
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the
            items ( files and folders ) contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>   
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="name">The name of the file to retrieve.</param>
            <remarks><para><paramref name="fileName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object regardless of
            if the file represented by the object exists or not.</returns>
        </member>
        <member name="M:Xceed.FileSystem.MemoryFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="name">The name of the folder to retrieve.</param>
            <remarks><para><paramref name="folderName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object regardless of
            if the folder represented by the object exists or not.</returns>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "RAM_DRIVE:\folder\file.txt" is "file.txt", 
            and the short name of a folder named "RAM_DRIVE:\folder\" is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator character.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The full name consists of the item's name fully-qualified with a path. 
            For example: "RAM_DRIVE:\folder\file.txt", "RAM_DRIVE:\folder\".</para><para>
            If the item represents a file, its name does <b>not</b> end with a path
            separator character.</para><para>
            If the item represents a folder, its name <b>does</b> end with a path separator character.
            </para><para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, 
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.
            </note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical
            disk, it is usually represented by a drive letter ("C:\") or UNC root ("\\server\share\").
            </para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying physical 
            item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>).</para><para>
            The property will always reflect the physical item's existence.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need
            to be called before accessing this property.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.MemoryFolder.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="T:Xceed.FileSystem.SingleFileFolder">
            <summary>
            This class exposes a single file specified at construction. 
            You cannot create more files or folders in that folder.
            </summary>
            <remarks>Its primary use is to provide a RootFolder and ParentFolder for special files
            like the StreamFile.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.StreamFile">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class that implements access 
            to any type of stream as though it were a file.
            </summary>
            <example>
            The following example demonstrates how to extract the contents of a zip file contained
            within the resources of an application to a local folder.
            <code lang="Visual Basic">
            ' Create a stream that access a zip file contained within the resources
            ' of an application.
            Dim resources As Stream = Me.GetType().Assembly.GetManifestResourceStream( "Resources.zip" )
            
            ' Initialize a new instance of the StreamFile class specifying the inner stream
            ' as well as the name of the file.
            Dim file As New StreamFile( resources, "Resources.zip" )
            
            ' Initialize a new instance of the ZipArchive class using 
            ' newly created StreamFile object.
            Dim zip As New ZipArchive( file )
            
            ' Copy files from the zip file contained within the resources to a local folder.
            zip.CopyFilesTo( New DiskFolder( "d:\Destination" ), false, true )
            </code>
            <code lang="C#">
            // Create a stream that access a zip file contained within the resources
            // of an application.
            Stream resources = this.GetType().Assembly.GetManifestResourceStream( "Resources.zip" );
            
            // Initialize a new instance of the StreamFile class specifying the inner stream
            // as well as the name of the file.
            StreamFile file = new StreamFile( resources, "Resources.zip" );
            
            // Initialize a new instance of the ZipArchive class using 
            // newly created StreamFile object.
            ZipArchive zip = new ZipArchive( file );
            
            // Copy files from the zip file contained within the resources to a local folder.
            zip.CopyFilesTo( new DiskFolder( @"d:\Destination" ), false, true );
            </code>
            </example>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the StreamFile class specifying its inner stream.
            </summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the StreamFile class specifying its inner stream as
            well as its name.
            </summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
            <param name="name">The name representing the StreamFile object. </param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item. In the case of a StreamFile object, there
            is nothing to refresh.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>   
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>    
            <remarks><note type="caution">This does not close the attached stream; It simply invalidates this 
            StreamFile.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical file. This method will always throw a <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/> exception
            since it is not possible to recreate a StreamFile once it has been destroyed.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target file are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination file.</param>
            <returns><see langword="true"/> if the source and target files are the same; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> since every StreamFile is considered to be rooted.</returns>  
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.
            </para><para>
            The <paramref name="share"/> parameter allows you to control how the file is 
            shared by different processes.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be 
            seekable.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared 
            by different processes.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoName">
            <summary>
            Gets or sets the short name of the item.
            </summary>
            <value>A string that represents the short name of the item.</value>
            <remarks><para>The short name consists of the item's name without a path.</para><para>
            For example, the short name of a file named "folder\file.txt" is "file.txt", and the short name of a folder named "folder\"
            is "folder".</para><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The short name of an item must <b>not</b> end with a path separator 
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The fullname consists of the item's name, fully-qualified, with a path. 
            For example: "folder\file.zip".</para>
            <para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para><para>
            Some types of items may not expose attributes. In this case, an exception is thrown when trying to 
            read or modify the attributes.</para><para>
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            </remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. 
            </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that
            needs to access the underlying physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>),
            otherwise these methods will throw an exception.</para><para>
            The property will always reflect the physical item's existence.</para></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception is thrown.</para>
            </remarks>
        </member>
    </members>
</doc>
