<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xceed.Ftp</name>
    </assembly>
    <members>
        <member name="T:Xceed.Ftp.FtpAbortException">
            <summary>
            The exception that is thrown by the FTP client when the current operation is aborted.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.FtpException">
            <summary>
            The exception that is thrown by the FTP client when a FTP-specific error occurs. 
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FtpException class with a specified error message and a 
            reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpAbortException.#ctor">
            <summary>
            Initializes a new instance of the FtpAbortException class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAbortException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the FtpAbortException class with a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpInternalException">
            <summary>
            The exception that is thrown by the FTP client when an unexpected error occurs. 
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor">
            <summary>
            Initializes a new instance of the FtpInternalException class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpInternalException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the FtpInternalException class with a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FtpInternalException class with a specified error 
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpInvalidStateException">
            <summary>
            The exception that is thrown by the FTP client when it is not in a valid state to perform the
            requested FTP operation.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor">
            <summary>
            Initializes a new instance of the FtpInvalidStateException class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpInvalidStateException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpIOException">
            <summary>
            The exception that is thrown by the FTP client when an I/O error occurs.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpIOException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the FtpIOException class with a reference to the 
            inner exception that is the cause of this exception.
            </summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FtpIOException class with a specified error 
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpReplyException">
            <summary>
            The exception that is thrown by the FTP client when an error reply is received from an FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply,System.String)">
            <summary>
            Initializes a new instance of the FtpReplyException class with a specified <see cref="T:Xceed.Ftp.FtpReply"/> and 
            error message.
            </summary>
            <param name="reply">The <see cref="T:Xceed.Ftp.FtpReply"/> received from the FTP server.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply)">
            <summary>
            Initializes a new instance of the FtpReplyException class with a specified <see cref="T:Xceed.Ftp.FtpReply"/>.
            </summary>
            <param name="reply">The <see cref="T:Xceed.Ftp.FtpReply"/> received from the FTP server.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpReplyException.ToString">
            <summary>
            Returns a string representation of the current exception including the reply
            that was received from the FTP server.
            </summary>
            <returns>A string representation of the current exception including the reply
            that was received from the FTP server.</returns>
        </member>
        <member name="P:Xceed.Ftp.FtpReplyException.Reply">
            <summary>
            Gets the <see cref="T:Xceed.Ftp.FtpReply"/> received from the FTP server.
            </summary>
            <value>A reference to an <see cref="T:Xceed.Ftp.FtpReply"/> object representing the reply received from the
            FTP server.</value>
        </member>
        <member name="T:Xceed.Ftp.FtpSslException">
            <summary>
            The exception that is thrown when a problem occurs with SSL handshake, encryption, or certificate manipulation.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.FtpTimeoutException">
            <summary>
            The exception that is thrown by the FTP client when an operation times-out.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the FtpTimeoutException class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FtpTimeoutException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Ftp.Engine.FtpDataConsumerCommand.SetDataChannel(Xceed.Ftp.Engine.FtpDataChannel)">
            <summary>
            </summary>
            <param name="dataChannel"></param>
            <remarks>Overrides <B>must</B> call base.</remarks>
        </member>
        <member name="M:Xceed.Ftp.Engine.FtpCommandSequence.OnCommandStarting(Xceed.Ftp.Engine.BaseFtpCommand)">
            <summary>
            </summary>
            <param name="command"></param>
            <returns>If you override this method, you can return <B>false</B> to skip this command.</returns>
        </member>
        <member name="M:Xceed.Ftp.Engine.FtpCommandSequence.OnCommandCompleted(Xceed.Ftp.Engine.BaseFtpCommand,System.Exception)">
            <summary>
            </summary>
            <param name="command"></param>
            <param name="except"></param>
            <returns>If you override this method, you can return <B>false</B> to hide the 
            exception and continue with the next command. If <B>except</B> is null, the returned
            value has no impact.</returns>
        </member>
        <member name="M:Xceed.Ftp.Engine.FtpCommandSequence.OnDisposing(Xceed.Ftp.Engine.BaseFtpCommand)">
            <summary>
            </summary>
            <param name="command"></param>
            <remarks>You can override this method to unadvise from events on this command.</remarks>
        </member>
        <member name="T:Xceed.Ftp.Engine.FtpCommandChannel">
            <summary>
            This is a simple class that manages the command socket, so you can connect, send command strings,
            get notified of incoming replies and disconnect.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Collections.ListBase">
            <summary>
            Represents any type of list.  
            </summary>
            <remarks><note type="inheritinfo"><para>
            There are 3 ways to access or modify the items of the list:
            If you want all verifications to be done, use the List* methods. To bypass the fixed size and 
            readonly verifications, use the Internal* methods. If you do not want to On* methods to be called
            and you also want to bypass the fixed size and readonly verifications, then use the Array* methods.
            </para><para>
            When you derive from this class you must call List* for all typed IList implementations.
            </para></note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the item.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The item to insert into the list .</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of <paramref name="value"/> from the list.
            </summary>
            <param name="value">The item to remove from the list.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#Contains(System.Object)">
            <summary>
            Retrieves a boolean value indicating if the item exists in the list.
            </summary>
            <param name="value">The item to locate.</param>
            <returns>
            <see langword="true"/> if the item is found in the list; <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified item in the list and returns the zero-based
            index of the first occurrence.
            </summary>
            <param name="value">The item to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> 
            within the entire list, if found; otherwise, returns -1.
            </returns>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to add.</param>
            <returns>The index at which the new item was inserted.</returns>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListRemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the item.</param>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListInsert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The item to insert into the list .</param>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListRemove(System.Object)">
            <summary>
            Removes the first occurrence of <paramref name="value"/> from the list.
            </summary>
            <param name="value">The item to remove from the list.</param>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListContains(System.Object)">
            <summary>
            Retrieves a boolean value indicating if the item exists in the list.
            </summary>
            <param name="value">The item to locate.</param>
            <returns>
            <see langword="true"/> if the item is found in the list; <see langword="false"/>
            otherwise.
            </returns>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListClear">
            <summary>
            Removes all items from the list.
            </summary>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListIndexOf(System.Object)">
            <summary>
            Searches for the specified item in the list and returns the zero-based
            index of the first occurrence.
            </summary>
            <param name="value">The item to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> 
            within the entire list, if found; otherwise, returns -1.
            </returns>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListAdd(System.Object)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to add.</param>
            <returns>The index at which the new item was inserted.</returns>
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListGetItem(System.Int32)">
            <summary>
            Retrieves the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to retrieve the item.</param>
            <returns>A reference to the item located at <paramref name="index"/>.</returns>
            <remarks><note type="inheritinfo">When using the List* methods in a dervied class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ListSetItem(System.Int32,System.Object)">
            <summary>
            Sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to set the item.</param>
            <param name="value">The item to set.</param>    
            <remarks><note type="inheritinfo">When using the List* methods in a derived class, all verifications will be done.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ArrayAdd(System.Object)">
            <summary>
            Adds an item to the array.
            </summary>
            <param name="value">The item to add.</param>
            <returns>The index at which the new item was inserted.</returns>
            <remarks><note type="inheritinfo">When using the Array* methods in a derived class, the On* methods
            will not be called and the fixed size and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ArrayInsert(System.Int32,System.Object)">
            <summary>
            Inserts an item into the array at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The item to insert into the array .</param>
            <remarks><note type="inheritinfo">When using the Array* methods in a derived class, the On* methods
            will not be called and the fixed size and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ArrayRemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the item.</param>
            <remarks><note type="inheritinfo">When using the Array* methods in a derived class, the On* methods
            will not be called and the fixed size and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ArrayClear">
            <summary>
            Removes all items from the array.
            </summary>
            <remarks><note type="inheritinfo">When using the Array* methods in a derived class, the On* methods
            will not be called and the fixed size and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.ArrayInit(System.Object[])">
            <summary>
            Initializes the array and populates it with the specified objects.
            </summary>
            <param name="objects">An array of objects which is used to initialize the array.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalAdd(System.Object)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to add.</param>
            <returns>The index at which the new item was inserted.</returns>
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalInsert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The item to insert into the list .</param>
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalRemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the item.</param>
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalRemove(System.Object)">
            <summary>
            Removes the first occurrence of <paramref name="value"/> from the list.
            </summary>
            <param name="value">The item to remove from the list.</param>
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalClear">
            <summary>
            Removes all items from the list.
            </summary>
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.InternalSetItem(System.Int32,System.Object)">
            <summary>
            Sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to set the item.</param>
            <param name="value">The item to set.</param>   
            <remarks><note type="inheritinfo">When using the Internal* methods in a derived class, the fixed size
            and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items of the <see cref="T:System.Collections.ICollection"/>
            to an array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the
            items copied from <see cref="T:System.Collections.ICollection"/>. The Array 
            must have zero-based indexing.</param>
            <param name="startIndex">The zero-based index in <paramref name="array"/> 
            at which copying begins.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary><returns>
            A <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.#ctor">
            <summary>
            Initializes a new instance of the ListBase class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ListBase class specifying its initial capacity.
            </summary>
            <param name="initialCapacity">A value representing the initial capacity of the list.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.#ctor(Xceed.Utils.Collections.ListBase)">
            <summary>
            Initializes a new instance of the ListBase class specifying the
            template that will be used to create other ListBase objects.
            </summary>
            <param name="template">A reference to a <see cref="T:Xceed.Utils.Collections.ListBase"/> object that
            will be used to create other ListBase objects.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of this instance of the list is at least the specified value.
            </summary>
            <param name="min">The minimum capacity to ensure</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>
            Performs additional custom processes before inserting a new item into the
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance. 
            </summary>
            <param name="index">The zero-based index at which to insert <paramref name="value"/>.</param>
            <param name="value">The new value of the item at <paramref name="index"/>.</param>
            <param name="cancel">
            <see langword="true"/> to cancel the operation; <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new item into the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance. 
            </summary>
            <param name="index">The zero-based index at which to insert <paramref name="value"/>.</param>
            <param name="value">The new value of the item at <paramref name="index"/>.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnRemove(System.Int32,System.Object,System.Boolean@)">
            <summary>
            Performs additional custom processes when removing an item from the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> can be found.</param>
            <param name="value">The value of the item to remove at <paramref name="index"/>.</param>
            <param name="cancel">
            <see langword="true"/> to cancel the operation; <see langword="false"/> otherwise.
            </param>
            <remarks><para>
            If the index of the item is unknown, <paramref name="index"/> is -1. In that case, 
            the <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> method needs to be called with the <paramref name="value"/>
            to retrieve the index.
            </para></remarks>    
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an item from the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> can be found.</param>
            <param name="value">The value of the item to remove from <paramref name="index"/>.</param>
            <remarks><para>
            If the index of the item is unknown, <paramref name="index"/> is -1. In that case, 
            the <see cref="M:System.Collections.IList.IndexOf(System.Object)"/> method needs to be called with the <paramref name="value"/>
            to retrieve the index.
            </para></remarks>  
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnClear(System.Boolean@)">
            <summary>
            Performs additional custom processes when clearing the contents of the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
            <param name="cancel">
            <see langword="true"/> to cancel the operation; <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>
            Performs additional custom processes before setting a value in the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="oldValue"/> can be found.</param>
            <param name="oldValue">The value to replace with <paramref name="newValue"/>.</param>
            <param name="newValue">The new value of the item at <paramref name="index"/>.</param>
            <param name="cancel">
            <see langword="true"/> to cancel the operation; <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the 
            <see cref="T:Xceed.Utils.Collections.ListBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="oldValue"/> can be found.</param>
            <param name="oldValue">The value to replace with <paramref name="newValue"/>.</param>
            <param name="newValue">The new value of the item at <paramref name="index"/>.</param>
        </member>
        <member name="M:Xceed.Utils.Collections.ListBase.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary><value>
            The item found at the specified index.
            </value>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.IsFixedSize">
            <summary>
            Gets a boolean value indicating whether the list has a fixed size.
            </summary><value>
            <see langword="true"/> if the list has a fixed size; <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.IsReadOnly">
            <summary>
            Gets a boolean value indicating if the list is readonly.
            </summary><value>
            <see langword="false"/> since by default the list is not readonly.
            </value>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.Array">
            <summary>
            Gets an array containing the contents of the list.
            </summary>
            <value>A reference to an <see cref="P:Xceed.Utils.Collections.ListBase.Array"/> containing the contents of the list.</value>
            <remarks><note type="inheritinfo">When using the Array* methods in a derived class, the On* methods
            will not be called and the fixed size and readonly verifications will be bypassed.</note></remarks>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.IsSynchronized">
            <summary>
            Gets a boolean value indicating if access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary><value>
            <see langword="true"/> if access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe); 
            <see langword="false"/> otherwise.
            </value>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            The number of items contained in the <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="P:Xceed.Utils.Collections.ListBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            <see cref="T:System.Collections.ICollection"/>.
            </summary><value>
            An object that can be used to synchronize access to the 
            <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="T:Xceed.Utils.Exceptions.ExceptionFilter">
            <summary>
            Exposes utility methods for filtering exceptions.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Exceptions.ExceptionFilter.IsPublicException(System.Exception)">
            <summary>
            Determines if an exception can be thrown by a public method.
            </summary>
            <param name="exception">The exception to evaluate.</param>
            <returns>true if the exception can be thrown as-is; false if the exception should be converted.</returns>
            <remarks>
            Every public method should have a final exception handler for any un-caught
            exceptions that should call this method to determine if the exception can
            be thrown as-is to the caller (i.e. if the exception makes sense to the caller), or
            if it should be wrapped in a more meaningful exception for the caller.
            </remarks>
            <example>
            The following example illustrate how to implement this:
            <code>
            public void MyMethod()
            {
              try
              {
                DoSomething();
                DoSomethingElse();
              }
              catch( SomeSpecificException e )
              {
                HandleTheException();
              }
              catch( Exception e )
              {
                if( <B>ExceptionFilter.IsPublicException( e )</B> )
                  throw; // Simply pass the exception as-is to the caller
                  
                throw new MyUnexpectedException( "Something unexpected happened.", e );
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.Certificate">
            <summary>
            Defines a X509 v3 encoded certificate.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean,Xceed.Utils.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:Xceed.Utils.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,Xceed.Utils.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:Xceed.Utils.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromCerFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by opening a certificate file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the certificate file to open.</param>
            <returns>One of the certificates in the certificate file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <param name="offset">The offset from which to start reading.</param>
            <param name="size">The length of the certificate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by duplicating an existing <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.
            </summary>
            <param name="certificate">The X509Certificate instance to duplicate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPemFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="filename">The path to the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the file.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromPemFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="file">The contents of the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertString(System.String,System.String)">
            <summary>
            Extracts an encoded certificate from a PEM file.
            </summary>
            <param name="cert">The PEM encoded certificate file.</param>
            <param name="delimiter">The delimiter to search for.</param>
            <returns>The Base64 encoded certificate if successfull or a null reference otherwise.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.#ctor(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Duplicates a given certificate.
            </summary>
            <param name="certificate">The certificate to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.InitCertificate(System.IntPtr,System.Boolean,Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <param name="store">The store that owns the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertificateInfo">
            <summary>
            Returns the <see cref="T:Xceed.Utils.Security.CertificateInfo"/> structure associated with the certificate.
            </summary>
            <returns>A CertificateInfo instance.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.#ctor(System.IntPtr,Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="store">The <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> that contains the certificate.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.Clone">
            <summary>
            Creates a copy of this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The Certificate this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.Finalize">
            <summary>
            Disposes of the certificate and frees unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> object.
            </summary>
            <returns>A string representation of the current Certificate object.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the current X509Certificate object, with extra information, if specified.
            </summary>
            <param name="verbose"><b>true</b> to produce the verbose form of the string representation; otherwise, <b>false</b>.</param>
            <returns>A string representation of the current X509Certificate object.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertHash">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertHash(Xceed.Utils.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.HashType"/> values.</param>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertHashString">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertHashString(Xceed.Utils.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.HashType"/> values.</param>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.BytesToString(System.Byte[])">
            <summary>
            Converts an array of bytes to its hexadecimal string representation.
            </summary>
            <param name="buffer">The bytes to convert.</param>
            <returns>The hexadecimal representation of the byte array.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetEffectiveDate">
            <summary>
            Returns the effective date of this X.509v3 certificate.
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>The effective date is the date after which the X.509 certificate is considered valid.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetExpirationDate">
            <summary>
            Returns the expiration date of this X.509v3 certificate.
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>The expiration date is the date after which the X.509 certificate is no longer considered valid.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetIssuerName">
            <summary>
            Returns the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>The name of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetKeyAlgorithm">
            <summary>
            Returns the key algorithm information for this X.509v3 certificate.
            </summary>
            <returns>The key algorithm information for this X.509 certificate as a string.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetKeyAlgorithmParameters">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetKeyAlgorithmParametersString">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetPublicKey">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetPublicKeyString">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetRawCertData">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>A byte array containing the X.509 certificate data.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetRawCertDataString">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>The X.509 certificate data as a hexadecimal string.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetSerialNumber">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetSerialNumberString">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetPublicKeyLength">
            <summary>
            Returns the length of the public key of the X.509v3 certificate.
            </summary>
            <returns>Returns the length of the public key in bits. If unable to determine the key's length, returns zero.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetDistinguishedName">
            <summary>
            Returns a list of attributes of the X.509v3 certificate.
            </summary>
            <returns>A StringDictionary that contains the attributes.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the attributes.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetExtensions">
            <summary>
            Returns a list of extensions of the X.509v3 certificate.
            </summary>
            <returns>An array of Extension instances.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.FindExtension(System.String)">
            <summary>
            Searches for a certificate extension.
            </summary>
            <param name="oid">The extension to search for.</param>
            <returns>An instance of the <see cref="T:Xceed.Utils.Security.Certificates.Extension"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if the specified extension could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oid"/> is a null  reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.DecodeExtension(Xceed.Utils.Security.Certificates.Extension,System.Int32,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">One of the predefined constants specified in the Win32 CryptoAPI. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks><p>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </p></remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.DecodeExtension(Xceed.Utils.Security.Certificates.Extension,System.String,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks><p>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </p></remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.DecodeExtension(Xceed.Utils.Security.Certificates.Extension,System.IntPtr,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks><p>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </p></remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetName">
            <summary>
            Returns the name of the current principal.
            </summary>
            <returns>The name of the current principal.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">The certificate does not have a name attribute.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetIntendedKeyUsage">
            <summary>
            Returns a list of intended key usages of the X.509v3 certificate.
            </summary>
            <returns>An integer that contains a list of intended key usages.</returns>
            <remarks>Use the bitwise And operator to check whether a specific key usage is set.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetEnhancedKeyUsage">
            <summary>
            Returns a list of enhanced key usages of the X.509v3 certificate.
            </summary>
            <returns>A StringCollection that contains a list of the enhanced key usages.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the enhanced key usages.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertificateChain">
            <summary>
            Returns a <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> where the leaf certificate corresponds to this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The CertificateChain corresponding to this Certificate.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.HasPrivateKey">
            <summary>
            Checks whether the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> has a private key associated with it.
            </summary>
            <returns><b>true</b> if the certificate has a private key associated with it, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetFormat">
            <summary>
            Returns the name of the format of this X.509v3 certificate.
            </summary>
            <returns>The format of this X.509 certificate.</returns>
            <remarks>The format X.509 is always returned in this implementation.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetHashCode">
            <summary>
            Returns the hash code for the X.509v3 certificate as an integer.
            </summary>
            <returns>The hash code for the X.509 certificate as an integer.</returns>
            <remarks>If the X.509 certificate hash is an array of more than 4 bytes, any byte after the fourth byte is not seen in this integer representation.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.Equals(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Compares two <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Compares a <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> object and an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object for equality.
            </summary>
            <param name="other">An X509Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetValidUsages(Xceed.Utils.Security.Certificates.Certificate[])">
            <summary>
            Returns an array of usages consisting of the intersection of the valid usages for all certificates in an array of certificates.
            </summary>
            <param name="certificates">Array of certificates to be checked for valid usage.</param>
            <returns>An array of valid usages -or- a null reference (<b>Nothing</b> in Visual Basic) if all certificates support all usages.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificates"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The array of certificates contains at least one invalid entry.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while determining the intersection of valid usages.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToPfxFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToPfxBuffer(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> as a PFX encoded buffer.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateCertStore(System.Boolean)">
            <summary>
            Creates an in memory <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> with this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> in it.
            </summary>
            <param name="withParents"><b>true</b> if the parent certificates should be included [if possible], <b>false</b> otherwise.</param>
            <returns>A CertificateStore instance.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToCerFile(System.String)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> as an encoded file.
            </summary>
            <param name="filename">The file where to store the certificate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
            <remarks>If the specified file already exists, this method will throw an exception.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToCerBuffer">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> as an encoded buffer.
            </summary>
            <returns>An array of bytes that represents the encoded certificate.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetCertificateBuffer">
            <summary>
            Returns a buffer with the encoded certificate.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToX509">
            <summary>
            Returns an X509Certificate object that corresponds to this <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/>.
            </summary>
            <returns>An X509Certificate instance.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.CreateFromBase64String(System.String)">
            <summary>
            Creates a new Certificate from a string representation.
            </summary>
            <param name="rawString">A Base64-encoded representation of the certificate.</param>
            <returns>A new Certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawString"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
            <exception cref="T:System.FormatException">The length of <paramref name="rawString"/> is less than 4 -or- the length of <paramref name="rawString"/> is not an even multiple of 4.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToBase64String">
            <summary>
            Returns a Base64-encoded representation of the certificate.
            </summary>
            <returns>A Base64-encoded representation of the certificate.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ToPemBuffer">
            <summary>
            Converts the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> to a PEM encoded buffer.
            </summary>
            <returns>An array of bytes that represents the PEM encoded certificate.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.GetKeyIdentifier">
            <summary>
            Gets the unique identifier associated with the key.
            </summary>
            <returns>A byte array containing the unique identifier associated with the key.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ConvertIntToByteArray(System.Int32)">
            <summary>
            Converts an integer to a series of bytes.
            </summary>
            <param name="dwInput">The integer to convert.</param>
            <returns>An array of bytes that represents the integer.</returns>
            <remarks>This method returns the minimum required number of bytes to represent a specific integer number.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <remarks>
            <p>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</p>
            <p>The private key will not be exportable.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String,System.Boolean)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private key should be marked exportable, <b>false</b> otherwise.</param>
            <remarks>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.ExportPrivateKey(System.String,System.String)">
            <summary>
            Exports the private key of this certificate to a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to create.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while exporting the private key.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the PVK file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.TryDecrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Tries decrypting the PRIVATEKEYBLOB blob.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to decrypt.</param>
            <param name="password">The password used to encrypt the PVK file (the salt should be prepended to the password).</param>
            <param name="keyLen">The effective key length in bytes (16 for 128 bit encryption, 5 for 40 bit encryption).</param>
            <returns>The decrypted buffer if successfull, or a null reference otherwise.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Certificate.VerifyRevocation(System.Byte[])">
            <summary>
            Verifies whether this certificate has been revoked or not.
            </summary>
            <param name="crl">The encoded CRL to check against.</param>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="crl"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <returns><b>true</b> if the certificate is not on the CRL and therefore valid, or <b>false</b> if the certificate is on the CRL and therefore revoked.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Certificate.m_Handle">
            <summary>
            The handle of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> object.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Certificate.m_Store">
            <summary>
            The handle of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> object.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Certificate.m_CertInfo">
            <summary>
            A <see cref="T:Xceed.Utils.Security.CertificateInfo"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Certificate.m_Context">
            <summary>
            A <see cref="T:Xceed.Utils.Security.CertificateContext"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Certificate.m_Chain">
            <summary>
            A reference to the associated <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/>.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.Handle">
            <summary>
            Gets the handle of the Certificate.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the Certificate object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.Store">
            <summary>
            Gets the handle of the associated <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>, if any.
            </summary>
            <value>A CertificateStore instance -or- a null reference (<b>Nothing</b> in Visual Basic) is no store is associated with this certificate.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.IsCurrent">
            <summary>
            Gets a value indicating whether the certificate is current, that is, has not expired.
            </summary>
            <value><b>true</b> if the certificate is current; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.SupportsDataEncryption">
            <summary>
            Gets a value indicating whether the certificate can be used for encrypting and decrypting messages.
            </summary>
            <value><b>true</b> if the certificate can be used for data encryption; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.SupportsDigitalSignature">
            <summary>
            Gets a value indicating whether the certificate can be used for digital signatures.
            </summary>
            <value><b>true</b> if the certificate can be used for digital signature; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.PrivateKey">
            <summary>
            Gets the private key for the certificate.
            </summary>
            <value>A System.Security.Cryptography.RSA containing the private key for the certificate.</value>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.Certificate.PublicKey">
            <summary>
            Gets the public key derived from the certificate's data. This key cannot be used to sign or decrypt data.
            </summary>
            <value>A System.Security.Cryptography.RSA that contains the public key derived from the certificate's data.</value>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateChain">
            <summary>
            Defines a chain of certificates.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.#ctor(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> instance from a <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.#ctor(Xceed.Utils.Security.Certificates.Certificate,Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> instance from a <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.#ctor(Xceed.Utils.Security.Certificates.Certificate,Xceed.Utils.Security.Certificates.CertificateStore,Xceed.Utils.Security.Certificates.CertificateChainOptions)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> instance from a <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <param name="options">Additional certificate chain options.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.Finalize">
            <summary>
            Disposes of the certificate chain.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.GetCertificates">
            <summary>
            Returns the list of certificates in this <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/>.
            </summary>
            <returns>An array of <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/> instances.</returns>
            <remarks>
            The certificate with index 0 is the end certificate in the chain, the certificate with the highest index is the root certificate [if it can be found].
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.VerifyChain(System.String,Xceed.Utils.Security.Certificates.AuthType)">
            <summary>
            Verifies the end <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.</param>
            <returns>One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.VerifyChain(System.String,Xceed.Utils.Security.Certificates.AuthType,Xceed.Utils.Security.Certificates.VerificationFlags)">
            <summary>
            Verifies the end <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:Xceed.Utils.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <returns>One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.VerifyChain(System.String,Xceed.Utils.Security.Certificates.AuthType,Xceed.Utils.Security.Certificates.VerificationFlags,System.Byte[])">
            <summary>
            Verifies the end <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:Xceed.Utils.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="crl">An optional CRL to check. This parameter can be null (<b>Nothing</b> in Visual Basic).</param>
            <returns>One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <remarks>Only the leaf certificate is checked against the CRL.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,Xceed.Utils.Security.Certificates.AuthType,Xceed.Utils.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins verification of the end <see cref="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:Xceed.Utils.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="asyncState">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while queuing the verification request.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.EndVerifyChain(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous certificate verification request.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ar"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="ar"/> parameter was not returned by a call to the <see cref="M:Xceed.Utils.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,Xceed.Utils.Security.Certificates.AuthType,Xceed.Utils.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><b>EndVerifyChain</b> was previously called for the asynchronous chain verification.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while verifying the certificate chain.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateChain.StartVerification(System.Object)">
            <summary>
            Verifies a certificate chain and calls a delegate when finished.
            </summary>
            <param name="state">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChain.m_Handle">
            <summary>
            The handle of the certificate chain.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChain.m_Certificate">
            <summary>
            The end certificate that was used to build the chain.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateChain.Certificate">
            <summary>
            Returns the certificate for which this chain was built.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate error is detected.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateException.#ctor">
            <summary>
            Initializes a new instance of the CertificateException class with default properties.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CertificateException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateStore">
            <summary>
            Defines a certificate store.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.CAStore">
            <summary>Represents the predefined system certificate store "CA". This field is constant.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.MyStore">
            <summary>Represents the predefined system certificate store "My". This field is constant.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.RootStore">
            <summary>Represents the predefined system certificate store "Root". This field is constant.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.TrustStore">
            <summary>Represents the predefined system certificate store "Trust". This field is constant.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.UnTrustedStore">
            <summary>Represents the untrusted certificate store. This field is constant.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.SoftwarePublisherStore">
            <summary>Represents the software publisher certificate store. This field is constant.</summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean,Xceed.Utils.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:Xceed.Utils.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,Xceed.Utils.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:Xceed.Utils.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.GetFileContents(System.String)">
            <summary>
            Returns the contents of a file.
            </summary>
            <param name="file">The file to read from.</param>
            <returns>A byte array with the contents of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the specified file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.CreateFromCerFile(System.String)">
            <summary>
            Creates a new certificate store from a certificate file.
            </summary>
            <param name="file">The certificate file.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while loading the certificate.</exception>
            <remarks>The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Duplicates an exisiting <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="store">The store to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <remarks>The handle will not be duplicated; when this CertificateStore instance is garbage collected, the handle will be freed.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> from a given store name.
            </summary>
            <param name="store">The name of the system store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
            <remarks>
            <p>If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used.</p>
            <p>Some example system stores are listed in the following table. 
             <list type="table">
               <listheader>
                 <term>Predefined system store name</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>"CA"</term>
                 <description>Certification authority certificates.</description>
               </item>
               <item>
                 <term>"MY"</term>
                 <description>A certificate store holding "My" certificates with their associated private keys.</description>
               </item>
               <item>
                 <term>"ROOT"</term>
                 <description>Root certificates.</description>
               </item>
               <item>
                 <term>"SPC"</term>
                 <description>Software publisher certificates.</description>
               </item>
             </list></p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(Xceed.Utils.Security.Certificates.StoreLocation,System.String)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> from a given store name and a given store location.
            </summary>
            <param name="location">The location of the store.</param>
            <param name="store">The name of the store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor">
            <summary>
            Initializes a new temporary <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> in memory.
            </summary>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while creating the store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new temporary <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> in memory and adds the specified certificates to it.
            </summary>
            <param name="certs">A set of certificates.</param>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:System.InvalidCastException"><i>certs</i> contains at least one object that is not of type <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/>.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.#ctor(System.Byte[],Xceed.Utils.Security.Certificates.CertificateStoreType)">
            <summary>
            Opens a serialized certificate store or a certificate store with signed PKCS7 messages.
            </summary>
            <param name="buffer">The bytes of the store to open.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while opening the store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.InitStore(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificate">
            <summary>
            Returns the first certificate from the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> from the store.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificate(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Returns a certificate from the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> -or- a null reference (<b>Nothing in Visual Basic</b>) if there is no certificate after <paremref name="previous"/>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[])">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[],Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> and that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no other valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[])">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <returns>The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with the matching default hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[],Xceed.Utils.Security.Certificates.HashType)">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <param name="hashType">One of the HashType values.</param>
            <returns>The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with the matching hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateByKeyIdentifier(System.Byte[])">
            <summary>
            Finds a certificate with a matching key identifier.
            </summary>
            <param name="keyID">The key identifier to search for.</param>
            <returns>The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with the matching key identifier -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyID"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyID"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String,Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while encoding the specified string.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String,Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.EnumCertificates">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <returns>An array of <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instances.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.EnumCertificates(System.String[])">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>An array of <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.ToPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.ToPfxBuffer(System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.GetPfxBuffer(System.String,System.Boolean)">
            <summary>
            Returns the byte representation of the PFX encoded store.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.ToCerFile(System.String,Xceed.Utils.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> in a file.
            </summary>
            <param name="filename">The filename of the serialized store.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.ToCerBuffer(Xceed.Utils.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> in a buffer.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.GetCerBuffer(Xceed.Utils.Security.Certificates.CertificateStoreType)">
            <summary>
            Returns the byte representation of the serialized store.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.AddCertificate(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Adds a <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> to the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="cert">The certificate to add to the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while adding the certificate to the store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.DeleteCertificate(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Deletes a <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> from the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while removing the certificate from the store.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStore.Finalize">
            <summary>
            Disposes of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/>.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStore.m_Handle">
            <summary>
            Holds the handle of the certificate store.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateStore.Handle">
            <summary>
            Gets the handle of the CertificateStore.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the CertificateStore object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateStoreCollection">
            <summary>
            Defines a collection of certificate stores.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStoreCollection.#ctor(Xceed.Utils.Security.Certificates.CertificateStore[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="stores">An array of stores that should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stores"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> objects in the array is a <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStoreCollection.#ctor(Xceed.Utils.Security.Certificates.CertificateStoreCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="collection">The CertificateStoreCollection whose elements are copied to the new certificate store collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStoreCollection.AddStore(Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Adds a certificate store to the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified certificate store is a <see cref="T:Xceed.Utils.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while adding the certificate to the collection.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateStoreCollection.RemoveStore(Xceed.Utils.Security.Certificates.CertificateStore)">
            <summary>
            Removes a certificate store from the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStoreCollection.m_Stores">
            <summary>
            Holds the references to the CertificateStore instances in the collection. This is to avoid CertificateStores finalizing and destroying their handles.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.HashType">
            <summary>
            Defines the different hash type values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.HashType.SHA1">
            <summary>The certificate will be hashed using the SHA1 algorithm.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.HashType.MD5">
            <summary>The certificate will be hashed using the MD5 algorithm.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.HashType.Default">
            <summary>The certificate will be hashed using the default hashing algorithm.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.KeyUsage">
            <summary>
            Defines the different key usage values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.DataEncipherment">
            <summary>The key can be used for data encipherment.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.DigitalSignature">
            <summary>The key can be used to sign data.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.KeyAgreement">
            <summary>The key can be used in key agreement algorithms.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.KeyCertSign">
            <summary>The key can be used to sign certificates.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.KeyEncipherment">
            <summary>The key can be used for key encipherment.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.NonRepudiation">
            <summary>The key can be used for electronic non-repudiation.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeyUsage.CrlSign">
            <summary>The key can be used to sign certificate revocation lists.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.AuthType">
            <summary>
            Defines the different authentication type values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.AuthType.Client">
            <summary>The certificate is a client certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.AuthType.Server">
            <summary>The certificate is a server certificate.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateStatus">
            <summary>
            Defines the different certificate status values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.ValidCertificate">
            <summary>The certificate is valid.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.Expired">
            <summary>A required certificate is not within its validity period.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidBasicConstraints">
            <summary>The certificate's basic constraints are invalid or missing.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidChain">
            <summary>A chain of certificates was not correctly created.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidNesting">
            <summary>The validity periods of the certification chain do not nest correctly.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidPurpose">
            <summary>A certificate is being used for a non permitted purpose.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidRole">
            <summary>A certificate that can only be used as an end-entity is being used as a CA or visa versa.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.InvalidSignature">
            <summary>The signature of the certificate cannot be verified.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.NoCNMatch">
            <summary>The certificate's CN name does not match the passed value.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.ParentRevoked">
            <summary>A certificate in the chain has been explicitly revoked by its issuer.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.RevocationFailure">
            <summary>The revocation process could not continue. The certificates could not be checked.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.RevocationServerOffline">
            <summary>Since the revocation server was offline, the called function was not able to complete the revocation check.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.Revoked">
            <summary>The certificate or signature has been revoked.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.UntrustedRoot">
            <summary>A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.UntrustedTestRoot">
            <summary>The root certificate is a testing certificate and policy settings disallow test certificates.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.WrongUsage">
            <summary>The certificate is not valid for the requested usage.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStatus.OtherError">
            <summary>The certificate is invalid.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateStoreType">
            <summary>
            Defines the different certificate store values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStoreType.SerializedStore">
            <summary>The certificate store should be saved as a serializes store.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateStoreType.Pkcs7Message">
            <summary>The certificate store should be saved as a signed PKCS7 message.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateChainOptions">
            <summary>
            Defines additional options for building a certificate chain.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.Default">
            <summary>The default chain options</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.RevocationCheckEndCert">
            <summary>Revocation checking is done on the end certificate and only the end certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.RevocationCheckChain">
            <summary>Revocation checking is done on all of the certificates in every chain.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.RevocationCheckChainExcludeRoot">
            <summary>Revocation checking in done on all certificates in all of the chains except the root certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.RevocationCacheEndCert">
            <summary>When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end certificate is not cached and it would need to be verified each time a chain is built for it.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.RevocationCheckCacheOnly">
            <summary>Revocation checking only accesses cached URLs and does not hit the wire to do any revocation URL retrieval. Supported on Windows Me, Windows 2000 and later.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.CacheOnlyUrlRetrieval">
            <summary>Uses only cached URLs in building a certificate chain. The Internet and Intranet are not searched for URL-based objects. Note, not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for revocation checking.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.DisablePass1QualityFiltering">
            <summary>For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain paths during the second pass.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.ReturnLowerQualityContexts">
            <summary>The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are returned in the chain context's cLowerQualityChainContext and rgpLowerQualityChainContext fields.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateChainOptions.DisableAuthRootAutoUpdate">
            <summary>Setting this flag inhibits the auto update of third party roots from the Windows Update Web Server.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.VerificationFlags">
            <summary>
            Defines the different verificateion flags values.
            </summary>
            <remarks>
            You can specify more VerificationFlags at once by combining them with the OR operator.
            </remarks>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.None">
            <summary>No flags.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreTimeNotValid">
            <summary>Ignore an invalid time.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>Ignore an invalid time of the certificate trust list.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreTimeNotNested">
            <summary>Ignore an invalid time nesting.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreInvalidBasicContraints">
            <summary>Ignore invalid basic contraints.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreAllTimeChecks">
            <summary>Ignore all time checks.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.AllowUnknownCA">
            <summary>Allow an unknown certificate authority.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreWrongUsage">
            <summary>Ignore the wrong usage of a certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreInvalidName">
            <summary>Ignore an invalid name.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreInvalidPolicy">
            <summary>Ignore an invalid policy.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreEndRevUnknown">
            <summary>Ignore an unknown revocation status of the end certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreSignerRevUnknown">
            <summary>Ignore an unknown revocation status of the signer certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreCARevUnknown">
            <summary>Ignore an unknown revocation status of the certificate authority.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreRootRevUnknown">
            <summary>Ignore an unknown revocation status of the root certificate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.IgnoreAllRevUnknown">
            <summary>Ignore an unknown revocation status of any of the certificates.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.AllowTestroot">
            <summary>Allow a test root.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.VerificationFlags.TrustTestroot">
            <summary>Trust a test root.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.StoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.CurrentService">
            <summary>The certificate store for the current service.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.Services">
            <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.Unknown">
            <summary>The location is unknown.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.StoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.NameAttribute">
            <summary>
            Defines a structure that represents one attribute of a relative distinguished name.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.NameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> instance.
            </summary>
            <param name="oid">The object identifier of the attribute.</param>
            <param name="val">The decoded value of the attribute.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.NameAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/>.
            </summary>
            <param name="obj">The Object to compare with the current Object. </param>
            <returns><b>true</b> if the specified Object is equal to the current NameAttribute; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.NameAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.NameAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/>.
            </summary>
            <returns>A String that represents the current NameAttribute.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.NameAttribute.ObjectID">
            <summary>
            The object identifier of the attribute.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.NameAttribute.Value">
            <summary>
            The value of the attribute.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.Extension">
            <summary>
            Represents an encoded certificate extension. 
            </summary>
            <remarks>These extensions can be decoded with the Certificate.DecodeExtension() method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.Extension.#ctor(System.String,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.Extension"/> class.
            </summary>
            <param name="oid">The object identifier of the extension.</param>
            <param name="critical"><b>true</b> if it is a critical extension, <b>false</b> otherwise.</param>
            <param name="val">A byte array that contains the encoded extension.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Extension.ObjectID">
            <summary>
            The object identifier of the extension.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Extension.Critical">
            <summary>
            <b>true</b> if it is a critical extension, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.Extension.EncodedValue">
            <summary>
            A byte array that contains the encoded extension.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.KeysetLocation">
            <summary>
            Defines the different keyset locations.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeysetLocation.Default">
            <summary>The private keys are stored in the default location.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeysetLocation.LocalMachine">
            <summary>The private keys are stored under local machine and not the current user.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.KeysetLocation.CurrentUser">
            <summary>The private keys are stored under the current user and not the local machine even if the PFX BLOB specifies they should go into local machine.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.CertificateVerificationResult">
            <summary>
            Represents the status of an asynchronous certificate chain verification operation.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateVerificationResult.#ctor(Xceed.Utils.Security.Certificates.CertificateChain,System.String,Xceed.Utils.Security.Certificates.AuthType,Xceed.Utils.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new CertificateVerificationResult instance.
            </summary>
            <param name="chain">The <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> that has to be verified.</param>
            <param name="server">The server to which the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> has been issued.</param>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One of the <see cref="T:Xceed.Utils.Security.Certificates.VerificationFlags"/> values.</param>
            <param name="callback">The delegate to call when the verification finishes.</param>
            <param name="asyncState">User-defined state data.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.CertificateVerificationResult.VerificationCompleted(System.Exception,Xceed.Utils.Security.Certificates.CertificateStatus)">
            <summary>
            Sets the WaitHandle to signalled and calls the appropriate delegate.
            </summary>
            <param name="error">An exception that may have occurred.</param>
            <param name="status">The status of the certificate chain.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_IsCompleted">
            <summary>Holds the value of the IsCompleted property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_AsyncState">
            <summary>Holds the value of the AsyncState property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Chain">
            <summary>Holds the value of the Chain property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Type">
            <summary>Holds the value of the Type property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Flags">
            <summary>Holds the value of the Flags property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Callback">
            <summary>Holds the value of the Callback property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_HasEnded">
            <summary>Holds the value of the HasEnded property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_ThrowException">
            <summary>Holds the value of the ThrowException property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.CertificateVerificationResult.m_Status">
            <summary>Holds the value of the Status property.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value>Always <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.IsCompleted">
            <summary>
            Gets a boolean value that indicates whether the operation has finished.
            </summary>
            <value>
            <b>true</b> if the verification of the chain has been completed, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value>
            A WaitHandle that is used to wait for an asynchronous operation to complete.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value>
            A user-defined object that qualifies or contains information about an asynchronous operation.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.Chain">
            <summary>
            Gets the associated certificate chain.
            </summary>
            <value>
            A <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> instance.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.Server">
            <summary>
            Gets the associated server name.
            </summary>
            <value>
            A string that holds the server name.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.Type">
            <summary>
            Gets the associated authentication type.
            </summary>
            <value>
            One of the <see cref="T:Xceed.Utils.Security.Certificates.AuthType"/> values.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.Flags">
            <summary>
            Gets the associated verification flags.
            </summary>
            <value>
            One of the <see cref="T:Xceed.Utils.Security.Certificates.VerificationFlags"/> values.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.HasEnded">
            <summary>
            Gets or sets a value that indicates whether the user has called EndVerifyChain for this object.
            </summary>
            <value>
            <b>true</b> if the user has called EndVerifyChain, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.ThrowException">
            <summary>
            Gets an exception that has occurred while verifying the certificate chain or a null reference (<b>Nothing</b> in Visual Basic) if the verification succeeded.
            </summary>
            <value>
            A <see cref="T:System.Exception"/> instance.
            </value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.CertificateVerificationResult.Status">
            <summary>
            Gets the status of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/>.
            </summary>
            <value>
            One of the <see cref="T:Xceed.Utils.Security.Certificates.CertificateStatus"/> values.
            </value>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.DistinguishedName">
            <summary>
            Represents a Relative Distinguished Name (RDN) of a <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/>.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.#ctor(Xceed.Utils.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="cni">A <see cref="T:Xceed.Utils.Security.CertificateNameInfo"/> instance that's used to initialize the object.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="input">A pointer to a buffer that's used to initialize the object.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">Could not decode the buffer.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Initialize(Xceed.Utils.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> class with a given <see cref="T:Xceed.Utils.Security.CertificateNameInfo"/> instance.
            </summary>
            <param name="cni">The CertificateNameInfo instance to initialize from.</param>
            <exception cref="T:Xceed.Utils.Security.Certificates.CertificateException">An error occurs while initializeing the DistinguishedName object.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Add(Xceed.Utils.Security.Certificates.NameAttribute)">
            <summary>
            Adds a <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> to the end of the list.
            </summary>
            <param name="attribute">The NameAttribute to be added to the end of the list. </param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Contains(Xceed.Utils.Security.Certificates.NameAttribute)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns><b>true</b> if item is found in the list; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.IndexOf(Xceed.Utils.Security.Certificates.NameAttribute)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.IndexOf(System.String)">
            <summary>
            Searches for an Object with the specified Object identifier and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="oid">The object identifier to search for.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Insert(System.Int32,Xceed.Utils.Security.Certificates.NameAttribute)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> to insert.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.Remove(Xceed.Utils.Security.Certificates.NameAttribute)">
            <summary>
            Removes the first occurrence of a specific element from the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.NameAttribute"/> to remove from the list.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedName.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.DistinguishedName.m_List">
            <summary>
            The internal list instance.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedName.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:Xceed.Utils.Security.Certificates.DistinguishedName.Count"/>.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedName.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
            <value>The number of elements actually contained in the list.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Certificates.DistinguishedNameList">
            <summary>
            Implements a collection of <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> instances.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.#ctor">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
            <param name="state">The initial state of the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="state"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Add(Xceed.Utils.Security.Certificates.DistinguishedName)">
            <summary>
            Adds a <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> to the end of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> to be added to the end of the DistinguishedNameList.</param>
            <returns>The list index at which the value has been added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Clear">
            <summary>
            Removes all elements from the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Contains(Xceed.Utils.Security.Certificates.DistinguishedName)">
            <summary>
            Determines whether an element is in the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The Object to locate in the DistinguishedNameList. The element to locate cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns><b>true</b> if item is found in the DistinguishedNameList; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.IndexOf(Xceed.Utils.Security.Certificates.DistinguishedName)">
            <summary>
            Searches for the specified <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The DistinguishedName to locate in the DistinguishedNameList.</param>
            <returns>The zero-based index of the first occurrence of value within the entire DistinguishedNameList, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Insert(System.Int32,Xceed.Utils.Security.Certificates.DistinguishedName)">
            <summary>
            Inserts an element into the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> to insert. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Remove(Xceed.Utils.Security.Certificates.DistinguishedName)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedName"/> to remove from the DistinguishedNameList.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from DistinguishedNameList. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional -or- <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> -or- the number of elements in the source DistinguishedNameList is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.InvalidCastException">The type of the source DistinguishedNameList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>An IEnumerator for the entire ArrayList.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Certificates.DistinguishedNameList.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>A shallow copy of the DistinguishedNameList.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Certificates.DistinguishedNameList.m_List">
            <summary>
            Holds the internal list.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> has a fixed size.
            </summary>
            <value><b>true</b> if the ArrayList has a fixed size; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> is read-only.
            </summary>
            <value><b>true</b> if the ArrayList is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>The number of elements actually contained in the DistinguishedNameList.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> is synchronized (thread-safe).
            </summary>
            <value><b>true</b> if access to the DistinguishedNameList is synchronized (thread-safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Certificates.DistinguishedNameList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>An object that can be used to synchronize access to the DistinguishedNameList.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.ARCFourManaged">
            <summary>
            Accesses the managed version of the ARCFour algorithm. This class cannot be inherited.
            ARCFour is fully compatible with the RC4<sup>TM</sup> algorithm.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RC4">
            <summary>
            Represents the base class from which all implementations of the RC4 symmetric stream cipher must inherit.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.#ctor">
            <summary>
            Initializes a new instance of the RC4 class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.Create">
            <summary>
            Creates an instance of the default cryptographic object used to perform the RC4 transformation.
            </summary>
            <returns>The instance of a cryptographic object used to perform the RC4 transformation.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.Create(System.String)">
            <summary>
            Creates an instance of the specified cryptographic object used to perform the RC4 transformation.
            </summary>
            <param name="AlgName">The name of the specific implementation of <see cref="T:Xceed.Utils.Security.Cryptography.RC4"/> to create.</param>
            <returns>A cryptographic object.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4.GetRNGCSP">
            <summary>
            Returns an <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> instance.
            </summary>
            <returns>An RNGCryptoServiceProvider instance.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4.m_RNG">
            <summary>
            Holds the RNGCryptoServiceProvider object.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:Xceed.Utils.Security.Cryptography.RC4.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.#ctor">
            <summary>
            Initializes a new instance of the ARCFourManaged class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:Xceed.Utils.Security.Cryptography.RC4"/> decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:Xceed.Utils.Security.Cryptography.RC4"/> encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour encryptor object.</returns>
            <remarks>Use the <see cref="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Xceed.Utils.Security.Cryptography.ARCFourManaged"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ARCFourManagedTransform class.
            </summary>
            <param name="key">The key used to initialize the ARCFour state.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.Init">
            <summary>
            This method (re)initializes the cipher.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_Key">
            <summary>
            Holds the key that is used to initialize the ARCFour state.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_KeyLen">
            <summary>
            Holds the length of the key, in bytes.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_Permutation">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_Index1">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_Index2">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.m_Disposed">
            <summary>
            Holds a boolean that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.ARCFourManagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.ProtectionType">
            <summary>
            Specifies the type of encryption method to use when protecting data.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ProtectionType.LocalMachine">
            <summary>The encrypted data is associated with the local machine. Any user on the computer on which the data is encrypted can decrypt the data.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.ProtectionType.CurrentUser">
            <summary>The encrypted data is associated with the current user. Only a user with logon credentials matching those of the encrypter can decrypt the data.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm">
            <summary>
            Specifies the type of algorithm to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoAlgorithm.Rijndael128">
            <summary>The Rijndael algorithm with a key size of 128 bits.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoAlgorithm.Rijndael192">
            <summary>The Rijndael algorithm with a key size of 192 bits.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoAlgorithm.Rijndael256">
            <summary>The Rijndael algorithm with a key size of 256 bits.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoAlgorithm.RC4">
            <summary>The RC4 algorithm.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.CryptoProvider">
            <summary>
            Specifies the type of CSP to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoProvider.RsaFull">
            <summary>Microsoft's full RSA CSP.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoProvider.RsaAes">
            <summary>Microsoft's full RSA CSP that supports the AES.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.CryptoMethod">
            <summary>
            Specifies the type of transformation for a cryptographic operation.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoMethod.Encrypt">
            <summary>Encrypt the data.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.CryptoMethod.Decrypt">
            <summary>Decrypt the data.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.PUBLICKEYSTRUC">
            <summary>
            The PUBLICKEYSTRUC structure, also known as the BLOBHEADER structure, indicates a key's BLOB type and the algorithm that the key uses. One of these structures is located at the beginning of the pbData member of every key BLOB.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.PUBLICKEYSTRUC.bType">
            <summary>Key BLOB type. The only BLOB types currently defined are PUBLICKEYBLOB, PRIVATEKEYBLOB, SIMPLEBLOB, and PLAINTEXTBLOB. Other key BLOB types will be defined as needed. </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.PUBLICKEYSTRUC.bVersion">
            <summary>Version number of the key BLOB format. This currently must always have a value of CUR_BLOB_VERSION (0x02).</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.PUBLICKEYSTRUC.reserved">
            <summary>WORD reserved for future use. Must be set to zero.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.PUBLICKEYSTRUC.aiKeyAlg">
            <summary>Algorithm identifier for the key contained by the key BLOB. Some examples are CALG_RSA_SIGN, CALG_RSA_KEYX, CALG_RC2, and CALG_RC4.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider">
            <summary>
            The DataProtectionCryptoServiceProvider is a class that performs encryption and decryption on data without explicitly requiring a password.
            <br>There are two different types of encryption. The first type will associate the encrypted data with the logon credentials of the current user. Hence only a user with matching logon credentials can decrypt the data.</br>
            <br>The second type will associate the encrypted data with the local machine. Any user of a specific machine will be able to decrypt encrypted data under this scheme.</br>
            <br>This class cannot be inherited.</br>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
            <param name="optionalEntropy">A buffer holding any additional entropy that can be used during encryption and decryption.</param>
            <remarks>The same entropy must be provided during the encryption and decryption process. Otherwise, the decryption will fail.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>
            The number of the returned bytes will be larger than the number of input bytes.
            The method will use the entropy from the <see cref="P:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[],System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:Xceed.Utils.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin encrypting.</param>
            <param name="size">The number of bytes to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with the <see cref="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[])"/> method.
            </summary>
            <param name="data">The data to decrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>
            The method will use the entropy from the <see cref="P:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            The entropy used during decryption must be the same as the entropy used during encryption.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with the <see cref="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[])"/> method.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with the <see cref="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(Xceed.Utils.Security.Cryptography.ProtectionType,System.Byte[])"/> method.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin decrypting.</param>
            <param name="size">The number of bytes to decrypt.</param>
            <param name="entropy">Additional entropy to use during the decryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.Finalize">
            <summary>
            Finalizes the <see cref="T:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.m_OptionalEntropy">
            <summary>
            Holds the entropy.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.m_Disposed">
            <summary>
            Holds a value that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy">
            <summary>
            Holds additional entropy that can be used during the encryption and decryption process.
            </summary>
            <value>An array en entropy bytes.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.HMAC">
            <summary>
            Implements the HMAC keyed message authentication code algorithm.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.HMAC"/> class. This class cannot be inherited.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <remarks>A random key will be generated and used by the HMAC.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.HMAC"/> class.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <param name="rgbKey">The key to use for the HMAC -or- a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>If <paramref name="rgbKey"/> is a null reference, the HMAC class will generate a random key.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.Initialize">
            <summary>
            Initializes the HMAC.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input for which to compute the hash code. </param>
            <param name="ib">The offset into the byte array from which to begin using data. </param>
            <param name="cb">The number of bytes in the byte array to use as data. </param>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the HMAC.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.HMAC.Finalize">
            <summary>
            Finalizes the HMAC.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.HMAC.m_HashAlgorithm">
            <summary>
            Holds the internal hash algorithm
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.HMAC.m_KeyBuffer">
            <summary>
            Holds the key buffer.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.HMAC.m_IsHashing">
            <summary>
            <b>true</b> if a hash operation is in prograss, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.HMAC.m_IsDisposed">
            <summary>
            <b>true</b> if the object has been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.HMAC.HashSize">
            <summary>
            Gets the size of the computed hash code in bits.
            </summary>
            <value>The size of the computed hash code in bits.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.MD2">
            <summary>
            Represents the abstract class from which all implementations of the MD2 hash algorithm inherit.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Cryptography.MD2"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD2 hash algorithm.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD2 to use.</param>
            <returns>A new instance of the specified implementation of MD2.</returns>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:Xceed.Utils.Security.Cryptography.MD2"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:Xceed.Utils.Security.Cryptography.MD2"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.MD4">
            <summary>
            Represents the abstract class from which all implementations of the MD4 hash algorithm inherit.
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Cryptography.MD4"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD4 hash algorithm.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD4 to use.</param>
            <returns>A new instance of the specified implementation of MD4.</returns>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:Xceed.Utils.Security.Cryptography.MD4"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:Xceed.Utils.Security.Cryptography.MD4"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.MD4CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP) version of the RC4 algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same parameters.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric encryptor object.</returns>
            <remarks>Use the <see cref="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same parameters to decrypt the result of this method.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.CanUseUnmanaged(System.Int32)">
            <summary>
            Returns a boolean that indicates whether the unmanaged CSP can be used or not.
            </summary>
            <param name="keySize">The size of the required key (in bits).</param>
            <returns><b>true</b> if the unmanaged CSP can be used to encrypt and decrypt data, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.Dispose">
            <summary>
            Releases all managed and unmanaged resources used by this class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the RC4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:Xceed.Utils.Security.Cryptography.RC4"/> instance.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged RC4 CSP.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.m_MinLen">
            <summary>Minimal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.m_MaxLen">
            <summary>Maximal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.m_Disposed">
            <summary><b>true</b> if the class is disposed, <b>false</b> otherwise.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4CryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform"/> class.
            </summary>
            <param name="key">The key used to initialize the RC4 state.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:Xceed.Utils.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RC4UnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider">
            <summary>
            Accesses the unmanaged version of the <see cref="T:System.Security.Cryptography.Rijndael"/> algorithm. This class cannot be inherited.
            </summary>
            <remarks>
            This class will use the unmanaged implementation of the Rijndael algorithm, when possible. If the unmanaged Rijndael algorithm is not available, it will fall back to the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> implementation.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random IV when none is specified.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> decryptor object with the specified <see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> encryptor object with the specified <see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael encryptor object.</returns>
            <remarks>Use the <see cref="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.GetKeyType(System.Int32)">
            <summary>
            Converts a key size into an instance of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> enum.
            </summary>
            <param name="size">The size of the key, in bits.</param>
            <returns>One of the CryptoAlgorithm values.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="size"/> is invalid.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged(System.Int32,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the specified parameters.
            </summary>
            <param name="keySize">A value that indicates the size of the key, in bits.</param>
            <param name="blockSize">A value that indicates the size of the blocks, in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the current parameters.
            </summary>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:System.Security.Cryptography.Rijndael"/> instance.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged AES CSP.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.m_Disposed">
            <summary>Holds a boolean that indicates whether this object has been disposed.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
            <remarks>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>The feedback size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The feedback size is larger than the block size.</exception>
            <remarks>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the IV to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid size.</exception>
            <remarks>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV"/> is called to create a new random value.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <p>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be secure, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</p>
            <p>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey"/> is called to create a new random value.</p>
            </remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
            <remarks>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only block sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not one of the CipherMode values.</exception>
            <remarks>See CipherMode for a description of specific modes.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is not one of the PaddingMode values.</exception>
            <remarks>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <see cref="T:System.Security.Cryptography.PaddingMode"/> for a description of specific modes.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.KeyType">
            <summary>
            Gets the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> value that corresponds with the value of the <see cref="P:Xceed.Utils.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize"/> property.
            </summary>
            <returns>One of the CryptoAlgorithm values.</returns>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform">
            <summary>
            Defines the basic operations of a unmanaged Rijndael cryptographic transformation.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.#ctor(Xceed.Utils.Security.Cryptography.CryptoAlgorithm,Xceed.Utils.Security.Cryptography.CryptoMethod,System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Initializes a new instance of the RijndaelUnmanagedTransform class.
            </summary>
            <param name="algorithm">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="method">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoMethod"/> values.</param>
            <param name="key">The key to use.</param>
            <param name="iv">The IV to use.</param>
            <param name="mode">One of the <see cref="T:System.Security.Cryptography.CipherMode"/> values.</param>
            <param name="feedback">The feedback size of the cryptographic operation in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the specified offsets or lengths is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The combination of offset and length is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.m_BlockSize">
            <summary>
            Holds the block size of the algorithm.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:Xceed.Utils.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.m_Method">
            <summary>
            Holds the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoMethod"/> for this cryptographic operation.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value><b>true</b> if the current transform can be reused; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value><b>true</b> if multiple blocks can be transformed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>The size of the input data blocks in bytes.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RijndaelUnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>The size of the output data blocks in bytes.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RIPEMD160">
            <summary>
            Represents the abstract class from which all implementations of the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash algorithm inherit.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <returns>A new instance of the RIPEMD160 hash algorithm.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of RIPEMD160 to use.</param>
            <returns>A new instance of the specified implementation of RIPEMD160.</returns>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.RIPEMD160Managed">
            <summary>
            Computes the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash for the input data.
            </summary>
            <remarks>Based on the papers located at <a href="http://www.esat.kuleuven.ac.be/~cosicart/ps/AB-9601/">the RIPEMD homepage</a>.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160Managed"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.Initialize">
            <summary>
            Initializes an instance of <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160Managed"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The RIPEMD160Managed instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.HashFinal">
            <summary>
            Returns the computed <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Xceed.Utils.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.m_ExtraData">
            <summary>
            A buffer that holds the extra data.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.m_X">
            <summary>
            The X vectors.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.m_HashValue">
            <summary>
            The current value of the hash.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.m_Length">
            <summary>
            The nubver of bytes hashed.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.m_Disposed">
            <summary>
            A boolean that indicates whether the object has been disposed or not.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.RIPEMD160Managed.InputBlockSize">
            <summary>
            When overridden in a derived class, gets the input block size.
            </summary>
            <value>The input block size.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Cryptography.SymmetricKey">
            <summary>
            Represents a symmetric key.
            </summary>
            <remarks>
            Large parts of this code are based on the article available at http://support.microsoft.com/default.aspx?scid=KB;en-us;q228786
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.#ctor(Xceed.Utils.Security.Cryptography.CryptoProvider)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoProvider"/> values.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs when acquiring the cryptographic context.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">The handle of a CSP.</param>
            <param name="key">The handle of a symmetric key.</param>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.#ctor(Xceed.Utils.Security.Cryptography.CryptoProvider,Xceed.Utils.Security.Cryptography.CryptoAlgorithm)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs when generating a new key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.#ctor(Xceed.Utils.Security.Cryptography.CryptoProvider,Xceed.Utils.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="buffer">An array of bytes that contains the key to import.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.KeyFromBytes(System.Int32,Xceed.Utils.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Imports a specified key.
            </summary>
            <param name="provider">The handle of the CSP.</param>
            <param name="algorithm">One of the <see cref="T:Xceed.Utils.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="key">The key to import.</param>
            <returns>The handle of the symmetric key.</returns>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while importing the specified key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.ToBytes">
            <summary>
            Returns the bytes that represent the symmetric key.
            </summary>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.ToString">
            <summary>
            Returns a string representation of the symmetric key.
            </summary>
            <returns>A string that represents the key in hexadecimal notation.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.CreateExponentOfOneKey">
            <summary>
            Creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <remarks>An exponent-of-one key is a public/private key pair that doesn't encrypt data.</remarks>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.CreateStaticExponentOfOneKey">
            <summary>
            Statically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.CreateDynamicExponentOfOneKey">
            <summary>
            Dynamically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Cryptography.SymmetricKey.GetPaddingMode(System.Security.Cryptography.PaddingMode)">
            <summary>
            Converts a <see cref="T:System.Security.Cryptography.PaddingMode"/> value to a CryptoAPI constant.
            </summary>
            <param name="mode">The PaddingMode to covnert.</param>
            <returns>The CryptoAPI constant associated with the specified padding mode.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.m_Handle">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Handle"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.m_Provider">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Provider"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.m_ExponentOfOne">
            <summary>Holds the exponent-of-one handle.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.m_PaddingMode">
            <summary>Holds the value of the <see cref="T:System.Security.Cryptography.PaddingMode"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.m_OwnsProvider">
            <summary><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Cryptography.SymmetricKey.ExponentOfOne">
            <summary>
            A byte representation of an exponent-of-one key.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Provider">
            <summary>
            Gets the handle of the CSP of the SymmetricKey.
            </summary>
            <value>The handle of the CSP.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Handle">
            <summary>
            Gets the handle of the SymmetricKey.
            </summary>
            <value>The handle of the key.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.IV">
            <summary>
            Gets or sets the initialization vector associated with the symmetric key.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">The initialization vector is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the IV.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Mode">
            <summary>
            Gets or sets the cipher mode associated with the symmetric key.
            </summary>
            <value>The cipher mode.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the cipher mode.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.FeedbackSize">
            <summary>
            Gets or sets the feedback size associated with the symmetric key.
            </summary>
            <value>The feedback size.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the feedback size.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Cryptography.SymmetricKey.Padding">
            <summary>
            Gets or sets the padding mode associated with the symmetric key.
            </summary>
            <value>One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while setting the padding mode.</exception>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.Shared.RSAKeyTransform">
            <summary>
            We use this class because there's a bug in the RSACryptoServiceProvider class that disallows encrypting
            more than 16 bytes on Windows 98, ME and NT4.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.Shared.XBuffer">
            <summary>
            Creates a stream whose backing store is memory.
            </summary>
            <remarks>This class is created by Kevin Knoop.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.Shared.XBuffer.#ctor">
            <summary>
            Initializes a new instance of the XBuffer class with an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.Shared.XBuffer.RemoveXBytes(System.Int32)">
            <summary>
            Removes a number of leading bytes from the buffer.
            </summary>
            <param name="aByteCount">The number of bytes to remove.</param>
            <exception cref="T:System.ArgumentException"><paramref name="aByteCount"/> is invalid.</exception>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.RequestEventArgs">
            <summary>
            Provides data for the <see cref="T:Xceed.Utils.Security.Ssl.CertRequestEventHandler"/> event.
            </summary>
            <remarks>
            This class is used when a CertRequestEventHandler delegate is called. Application code can set a <see cref="P:Xceed.Utils.Security.Ssl.RequestEventArgs.Certificate"/> instance that will then be subseuently used by the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> to send to the peer.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.RequestEventArgs.#ctor">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.RequestEventArgs.#ctor(Xceed.Utils.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:Xceed.Utils.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
            <param name="cert">A <see cref="P:Xceed.Utils.Security.Ssl.RequestEventArgs.Certificate"/> instance.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.RequestEventArgs.m_Certificate">
            <summary>
            Holds the Certificate instance.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.RequestEventArgs.Certificate">
            <summary>
            Gets or sets the <see cref="P:Xceed.Utils.Security.Ssl.RequestEventArgs.Certificate"/> that should be sent to the remote host.
            </summary>
            <value>A Certificate instance.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecureNetworkStream">
            <summary>
            Provides the underlying stream of data for secure network access.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.#ctor(Xceed.Utils.Security.Ssl.SecureSocket)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.#ctor(Xceed.Utils.Security.Ssl.SecureSocket,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this NetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.#ctor(Xceed.Utils.Security.Ssl.SecureSocket,System.IO.FileAccess)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="access">One of the <see cref="T:System.IO.FileAccess"/> values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- The SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.#ctor(Xceed.Utils.Security.Ssl.SecureSocket,System.IO.FileAccess,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data.</param>
            <param name="access">One of the FileAccess values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this SecureNetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Flush">
            <summary>
            Flushes data from the stream. This method is reserved for future use.
            </summary>
            <remarks>
            The Flush method implements the Stream.Flush method but, because SecureNetworkStream is not buffered, has no effect on secure network streams. Calling the Flush method will not throw an exception.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns>The position in the stream. This method is not supported.</returns>
            <exception cref="T:System.NotSupportedException">The Seek method is not supported.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
            <exception cref="T:System.NotSupportedException">The SetLength method is not supported.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The location in memory to store data read from the stream.</param>
            <param name="offset">The location in the buffer to begin storing the data to.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The data to write to the stream.</param>
            <param name="offset">The location in the buffer to start writing data from.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.ChangeSecurityProtocol(Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:Xceed.Utils.Security.Ssl.SecurityOptions"/> parameters.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/>!
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.Close">
            <summary>
            Closes the stream and optionally closes the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <remarks>
            The Close method frees resources used by the SecureNetworkStream instance and, if the SecureNetworkStream owns the underlying socket, closes the underlying socket.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from a stream.
            </summary>
            <param name="buffer">The location in memory that stores the data from the stream.</param>
            <param name="offset">The location in buffer to begin storing the data to.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing an asynchronous call. </param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write to a stream.
            </summary>
            <param name="buffer">The location in memory that holds the data to send.</param>
            <param name="offset">The location in buffer to begin sending the data.</param>
            <param name="size">The size of buffer.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.OnBytesSent(System.IAsyncResult)">
            <summary>
            Called when the bytes have been sent to the remote server
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.OnWriteComplete(System.Exception)">
            <summary>
            Called when all bytes have been sent to the remote host, or when a network error occurred.
            </summary>
            <param name="e">The error that occurred.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureNetworkStream.EndWrite(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous write.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="asyncResult"/> parameter was not returned by a call to the BeginWrite method.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing to the network.</exception>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureNetworkStream.m_WriteResult">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.WriteResult"/> property</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureNetworkStream.m_OwnsSocket">
            <summary><b>true</b> if the SecureNetworkStream owns the SecureSocket, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureNetworkStream.m_CanRead">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.CanRead"/> property</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureNetworkStream.m_CanWrite">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.CanWrite"/> property</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureNetworkStream.m_Socket">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.Socket"/> property</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
            <value><b>false</b> to indicate that SecureNetworkStream cannot seek a specific location in the stream.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.Length">
            <summary>
            The length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The length of the data available on the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Length property is not supported.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The current position in the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Position property is not supported.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.Socket">
            <summary>
            Gets the underlying network connection.
            </summary>
            <value>A <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> that represents the underlying network connection.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.WriteResult">
            <summary>
            Holds the <see cref="T:Xceed.Utils.Security.Ssl.Shared.TransferItem"/> object returned by BeginWrite.
            </summary>
            <value>A <see cref="T:Xceed.Utils.Security.Ssl.Shared.TransferItem"/> object.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureNetworkStream.DataAvailable">
            <summary>
            Gets a value indicating whether data is available on the stream to be read.
            </summary>
            <value><b>true</b> if data is available on the stream to be read; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecureSocket">
            <summary>
            Implements the Berkeley sockets interface and optionally encrypts/decrypts transmitted data.
            </summary>
            <remarks>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations. Any instance members are not guaranteed to be thread safe.</remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.VirtualSocket">
            <summary>
            Implements the Berkeley sockets interface.
            </summary>
            <remarks>
            The VirtualSocket class implements exactly the same methods as the System.Net.Sockets.Socket class,
            however all these methods are marked as virtual so they can be overridden in derived classes.
            In addition to the constructor specified by the Socket class, the VirtualSocket class also
            has a constructor that accepts an already created Socket; this can be very useful is you have
            to override the Accept and BeginAccept/EndAccept methods in a derived class.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of <paramref name="addressFamily"/>, <paramref name="socketType"/>, and <paramref name="protocolType"/> results in an invalid socket.</exception>
            <remarks>The <paramref name="addressFamily"/> parameter specifies the addressing scheme that the VirtualSocket uses, the <paramref name="socketType"/> parameter specifies the type of the VirtualSocket, and <paramref name="protocolType"/> specifies the protocol used by the VirtualSocket. The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the socket type is implicit in the protocol. If the combination of address family, socket type, and protocol type results in an invalid VirtualSocket, a SocketException is thrown.<br>The AddressFamily enumeration defines the valid address families, the SocketType enumeration defines the valid socket types, and the ProtocolType enumeration defines the valid protocol types.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="internalSocket">The accepted socket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="internalSocket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Accept">
            <summary>
            Creates a new VirtualSocket to handle an incoming connection request.
            </summary>
            <returns>A VirtualSocket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Accept method extracts the first connection request from the queue of pending requests and creates a new VirtualSocket to handle it.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.InternalAccept">
            <summary>
            Creates a new Socket to handle an incoming connection request.
            </summary>
            <returns>A Socket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalAccept method extracts the first connection request from the queue of pending requests and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle it.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous VirtualSocket creation.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginAccept method starts an asynchronous request to create a VirtualSocket to handle an incoming connection request. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)"/> method to retrieve the VirtualSocket.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginConnect method starts an asynchronous request for a remote host connection. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)"/> method to return the VirtualSocket.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected VirtualSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
            <remarks>The BeginReceive method starts asynchronously reading data from a VirtualSocket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)"/> method to return the data read from the VirtualSocket.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a specified network device.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the source of the data.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br>
            <br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br><br>-or-</br><br><paramref name="offset"/> is outside the bounds of buffer.</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected VirtualSocket.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSend method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a specific remote host.
            </summary>
            <param name="buffer">The data to send. </param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device. </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. </param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSendTo method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a VirtualSocket with a local endpoint.
            </summary>
            <param name="localEP">The local <see cref="T:System.Net.EndPoint"/> to associate with the VirtualSocket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>If you want to use a specific local endpoint, you can call the Bind method before you call the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.Listen(System.Int32)"/> or <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)"/> methods.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Close">
            <summary>
            Forces a VirtualSocket connection to close.
            </summary>
            <remarks><p>The <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.Connected"/> property is set to <b>false</b> when the socket is closed.</p><p>The application should call <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)"/> before calling Close to ensure that all pending data is sent or received before the VirtualSocket is closed.</p></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Connect method establishes a network connection between <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.LocalEndPoint"/> and the device identified by <paramref name="remoteEP"/>. Once the connection has been made, you can send data to the remote device with the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.Send(System.Byte[])"/> method, or receive data from the remote device with the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.Receive(System.Byte[])"/> method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The EndAccept method completes a request for a connection that was started with the BeginAccept method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.InternalEndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:System.Net.Sockets.Socket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalEndAccept method completes a request for a connection that was started with the InternalBeginAccept method.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from BeginConnect or the callback delegate used as an input parameter to BeginConnect as the asyncresult parameter. The EndConnect method blocks.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceive was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceive as the asyncResult parameter. The EndReceive method blocks until the read ends.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
            <summary>
            Ends a pending asynchronous read from a specific endpoint.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <param name="endPoint">The source <see cref="T:System.Net.EndPoint"/>.</param>
            <returns>If successful, the number of bytes received. If unsuccessful, returns 0 if the connection is closed by the remote host.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the BeginReceiveFrom method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceiveFrom was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceiveFrom. as the asyncResult parameter. The EndReceiveFrom method frees any resources allocated by the BeginReceiveFrom method. The EndReceiveFrom method blocks until read ends.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, the number of bytes sent to the VirtualSocket; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSend was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSend as the asyncResult parameter. The EndSend method frees any resources allocated by the BeginSend method. The EndSend method blocks until the send ends.<br>The EndSend method frees any resources allocated by the BeginSend method.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send to a specific location.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data .</param>
            <returns>If successful, the number of bytes sent; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSendTo was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks><br>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:Xceed.Utils.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSendTo as the asyncResult parameter. The EndSendTo method frees any resources allocated by the BeginSendTo method. The EndSendTo method blocks until send is complete.</br><br>The EndSendTo method frees any resources allocated by the BeginSendTo method.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.GetHashCode">
            <summary>
            This member overrides Object.GetHashCode.
            </summary>
            <returns>A hash code for the current VirtualSocket.</returns>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>
            Gets the value of a specified socket option.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <returns>The value of the option. When the optionName parameter is set to Linger the return value is an instance of the LingerOption. When optionName is set to AddMembership or DropMembership, the return value is an instance of the MulticastOption. When optionName is any other value, the return value is an integer.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>VirtualSocket options determine the behavior of the current instance. Upon successful completion, GetSocketOption returns an object describing the requested option. For example, if you specify Linger as the option, a LingerOption is returned.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Gets the specified VirtualSocket option setting.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">The buffer that is to receive the option setting.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Upon successful completion of this method, the array specified by the optionValue parameter contains the value of the specified Socket option. When the length of the optionValue array is smaller than the number of bytes required to store the value of the specified Socket option, a <see cref="T:System.Net.Sockets.SocketException"/> is thrown.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Returns the value of the specified Socket option and returns in an array.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionLength">The length, in bytes, of the expected return value.</param>
            <returns>An array of bytes containing the value of the socket option.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The optionLength parameter sets the maximum size of the returned byte array. If the option value requires fewer bytes, the array will contain only that many bytes. If the option value requires more bytes, a SocketException will be thrown.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.IOControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Sets low-level operating modes for the VirtualSocket.
            </summary>
            <param name="ioControlCode">The control code of the operation to perform.</param>
            <param name="optionInValue">The input data required by the operation.</param>
            <param name="optionOutValue">The output data returned by the operation.</param>
            <returns>The number of bytes in optionOutValue parameter.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The IOControl method provides low-level access to the operating system socket underlying the current instance of the VirtualSocket class. For more information about IOControl, see the WSAIoct documentation in MSDN.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Listen(System.Int32)">
            <summary>
            Places a VirtualSocket in a listening state.
            </summary>
            <param name="backlog">The Maximum length of the queue of pending connections.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>In a listening state, the VirtualSocket will poll for incoming connection attempts. If you want to listen using a specific network interface on a specific port, you must call the Bind method first.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer. The offset defaults to 0, size defaults to the buffer length, and the socketFlags value defaults to None.</p>
            <p>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer and the necessary SocketFlags. The offset defaults to 0, and the size defaults to the buffer length.</p>
            <p>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer, the number of bytes you want to send, and the necessary SocketFlags. The offset defaults to 0.</p>
            <p>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The location in buffer to store the received data. </param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer, and EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length and the socketFlags value defaults to None.</p>
            <p>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length.</p>
            <p>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0.</p>
            <p>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The position in the buffer parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</p>
            <p>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</p>
            <p>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send. This overload only requires you to provide a data buffer. The offset defaults to 0, the size defaults to the buffer length, and SocketFlags value defaults to None.</p>
            <p>You must set the LocalEndPoint property of the current instance before calling this method.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</p>
            <p>This overload only requires you to provide a data buffer and SocketFlags. The offset defaults to 0, and the size parameter defaults to the buffer length.</p>
            <p>You must set the LocalEndPoint property of the current instance before calling this method.</p>
            <p>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</p>
            <p>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</p>
            <p>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</p>
            <p>This overload only requires you to provide a data buffer, SocketFlags, and the number bytes to be sent. The offset defaults to 0.</p>
            <p>You must set the LocalEndPoint property of the current instance before calling this method.</p>
            <p>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</p>
            <p>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</p>
            <p>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</p>
            <p>This overload gives you the flexibility to specify the Send starting position in the data buffer, the number bytes you are sending, and the necessary SocketFlags.</p>
            <p>You must set the LocalEndPoint property of the current instance before calling this method.</p>
            <p>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</p>
            <p>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</p>
            <p>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint. This overload only requires you to provide a data buffer, and the remote EndPoint. The offset defaults to 0. The size defaults to the buffer length, and SocketFlags value defaults to None.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</p>
            <p>This overload only requires you to provide a data buffer, SocketFlags, and the remote EndPoint. The offset defaults to 0, and size defaults to the buffer length.</p>
            <p>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</p>
            <p>This overload only requires you to provide a data buffer, SocketFlags, the number bytes to be sent and the remote EndPoint. The offset defaults to 0.</p>
            <p>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</p>
            <p><b>Note</b>   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</p>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A byte array representing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require a byte array as an option value.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. For an option with a Boolean data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. Socket options are grouped by level of protocol support.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A LingerOption or MulticastOption containing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionValue"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require anything other than an integer or Boolean as an option value. For example, to set the Linger option, you must create an instance of LingerOption and pass it to SetSocketOption as the optionvalue parameter.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on a VirtualSocket.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while closing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <p>Setting how to Send, specifies that subsequent calls to Send are not allowed. With TCP sockets, a FIN will be sent after all data is sent and acknowledged by the receiver.</p>
            <p>Setting how to Receive, specifies that subsequent calls to Receive are not allowed. This has no effect on lower protocol layers. For TCP sockets, the connection is reset if data is waiting to be received or if more data arrives after the Socket is disabled. For UDP sockets, datagrams are accepted and queued.</p>
            <p>Setting how to Both disables both sends and receives as described above.</p>
            <p>To finish closing the Socket, a call to Close must be made after the call to Shutdown. You should not attempt to reuse the Socket.</p>
            </remarks>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.VirtualSocket.m_InternalSocket">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.InternalSocket"/> property.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.InternalSocket">
            <summary>
             Gets or sets the internal <see cref="T:System.Net.Sockets.Socket"/> value.
            </summary>
            <value>An instance of the Socket class.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.Blocking">
            <summary>
             Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.AddressFamily">
            <summary>
             Gets the address family of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.AddressFamily"/> values.</value>
            <remarks>AddressFamily specifies the addressing scheme that an instance of the VirtualSocket class can use. This property is read-only and is set when the VirtualSocket is created.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.Available">
            <summary>
             Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <remarks>If you are using a Stream VirtualSocket type, the available data is generally the total amount of data queued on the current instance. If you are using a message-oriented VirtualSocket type such as Dgram, the available data is the first message in the input queue.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.Connected">
            <summary>
             Gets a value indicating whether a VirtualSocket is connected to a remote resource.
            </summary>
            <value><b>true</b> if the VirtualSocket is connected to a remote resource; otherwise, <b>false</b>.</value>
            <remarks>Gets the connection state of the VirtualSocket. This property will return the latest known state of the VirtualSocket. When it returns <b>false</b>, the VirtualSocket was either never connected, or no longer connected. When it returns <b>true</b>, the VirtualSocket was connected at the time of the last I/O operation.<br><b>Note</b>   There is no guarantee that the VirtualSocket is still Connected even though Connected returns <b>true</b>.</br></remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.Handle">
            <summary>
             Gets the operating system handle for the VirtualSocket.
            </summary>
            <value>An <see cref="T:System.IntPtr"/> representing the operating system handle for the VirtualSocket.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.LocalEndPoint">
            <summary>
             Gets the local endpoint.
            </summary>
            <value>The local endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The LocalEndPoint property contains the network connection information associated with the local network device. LocalEndPoint is set by calling the Bind method.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.ProtocolType">
            <summary>
             Gets the protocol type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.ProtocolType"/> values.</value>
            <remarks>ProtocolType is set when the VirtualSocket is created, and specifies the protocol used by that VirtualSocket.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.RemoteEndPoint">
            <summary>
             Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The RemoteEndPoint property gets the network connection information associated with the remote host. RemoteEndPoint is set by VirtualSocket methods that establish a connection to a remote host.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VirtualSocket.SocketType">
            <summary>
             Gets the type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:Xceed.Utils.Security.Ssl.VirtualSocket.SocketType"/> values.</value>
            <remarks>SocketType is set when the class is created.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <remarks>The SecureSocket will act like a normal Socket and will not use a secure transfer protocol.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <param name="options">The <see cref="T:Xceed.Utils.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.Socket,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="accepted">The accepted <see cref="T:System.Net.Sockets.Socket"/> instance.</param>
            <param name="options">The <see cref="T:Xceed.Utils.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.ChangeSecurityProtocol(Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:Xceed.Utils.Security.Ssl.SecurityOptions"/> parameters.</param>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)"/>, <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.Accept"/>, <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.Send(System.Byte[])"/> or <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.Receive(System.Byte[])"/>!
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device and optionally negotiates a secure transport protocol.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called then the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> connects to the remote host.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)"/> was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while negotiating the security protocol.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Accept">
            <summary>
            Creates a new <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> to handle an incoming connection request.
            </summary>
            <returns>A SecureSocket to handle an incoming connection request.</returns>
            <remarks>The returned <see cref="T:Xceed.Utils.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to create the credentials.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous SecureSocket creation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A SecureSocket to handle the incoming connection.</returns>
            <remarks>The returned <see cref="T:Xceed.Utils.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to create the credentials -or- client authentication error.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while encrypting the data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <returns>If successful, the number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected SecureSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset parameter is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while shutting the secure connection down.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginShutdown(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut the connection down.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginShutdown(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.OnShutdown(System.IAsyncResult)">
            <summary>
            Called when the shutdown data has been sent to the remote server.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.EndShutdown(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to shut the connection down.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginShutdown(System.AsyncCallback,System.Object)"/> has not been called first.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> has not been returned by a call to <see cref="M:Xceed.Utils.Security.Ssl.SecureSocket.BeginShutdown(System.AsyncCallback,System.Object)"/>.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.QueueRenegotiate">
            <summary>
            Queues a renegotiation request.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <remarks>
            Use the QueueRenegotiate function with caution. Some SSL/TLS clients or server do not support renegotiation.
            For instance, requesting a renegotiation in the middle of sending a HTTP request to a MS IIS server causes the connection to be shut down.
            Renegotiations should only be used when a small private key [512 bits] is used and the connection is active for a long period of time.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Close">
            <summary>
            Forces a SecureSocket connection to close.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Finalize">
            <summary>
            Frees resources used by the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> class.
            </summary>
            <remarks>
            The SecureSocket class finalizer calls the Close method to close the SecureSocket and free resources associated with the SecureSocket.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values -or- the socket is in SSL or TLS mode.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">An error occurs while interpreting the security data.</exception>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.LocalCertificate">
            <summary>
            Gets the local certificate.
            </summary>
            <value>An instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.RemoteCertificate">
            <summary>
            Gets the remote certificate.
            </summary>
            <value>An instance of the <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate has been received.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.SecureProtocol">
            <summary>
            Gets the security protocol in use.
            </summary>
            <value>A bitwise combination of the <see cref="P:Xceed.Utils.Security.Ssl.SecureSocket.SecureProtocol"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.Entity">
            <summary>
            Gets the credential type.
            </summary>
            <value>One of the <see cref="T:Xceed.Utils.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.CommonName">
            <summary>
            Gets the common name of the remote host.
            </summary>
            <value>A string representing the common name of the remote host.</value>
            <remarks>
            The common name of the remote host is usually the domain name.
            </remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.VerificationType">
            <summary>
            Gets the credential verification type.
            </summary>
            <value>One of the <see cref="T:Xceed.Utils.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.Verifier">
            <summary>
            Gets the verify delegate.
            </summary>
            <value>A <see cref="T:Xceed.Utils.Security.Ssl.CertVerifyEventHandler"/> instance.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.SecurityFlags">
            <summary>
            Gets the security flags of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="P:Xceed.Utils.Security.Ssl.SecureSocket.SecurityFlags"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.ActiveEncryption">
            <summary>
            Gets the active encryption cipher suite.
            </summary>
            <value>One of the <see cref="T:Xceed.Utils.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            This value is properly initialized after the handshake of the SSL or TLS protocol. Currently, there's no way of knowing when a handshake is completed. However as soon as either a Send or a Receive returns, the handshake must be complete.
            <p>If SSL or TLS is not used, this property returns <b>SslAlgorithms.NONE</b>.</p>
            </remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureSocket.Blocking">
            <summary>
             Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Non-blocking sockets are not supported in SSL or TLS mode.</exception>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecureTcpClient">
            <summary>
            Provides secure client connections for TCP network services.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> class.
            </summary>
            <remarks>
             The default constructor initializes a new SecureTcpClient. You must call the Connect method to establish a remote host connection.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> bound to the specified local endpoint.
            </summary>
            <param name="localEP">The IPEndPoint to which you bind the TCP Socket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is null (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> class and connects to the specified port on the specified host.
            </summary>
            <param name="hostname">DNS name of the remote host to which you intend to connect.</param>
            <param name="port">Port number of the remote host to which you intend to connect.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostname"/> is null (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is less than MinPort -or- <paramref name="port"/> is greater than MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostname"/><br>-or-</br><br>an error occurred while connecting to the remote host.</br></exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> class.
            </summary>
            <param name="options">The security options to use.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(System.Net.IPEndPoint,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> bound to the specified local endpoint.
            </summary>
            <param name="localEP">The IPEndPoint to which you bind the TCP Socket.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is null (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(System.String,System.Int32,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> class and connects to the specified port on the specified host.
            </summary>
            <param name="hostname">DNS name of the remote host to which you intend to connect.</param>
            <param name="port">Port number of the remote host to which you intend to connect.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="hostname"/> is null (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is less than MinPort -or- <paramref name="port"/> is greater than MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error is encountered when resolving <paramref name="hostname"/> -or- an error occurred while connecting to the remote host.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.#ctor(Xceed.Utils.Security.Ssl.SecureSocket)">
            <summary>
            Initializes a new instance of <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/>.
            </summary>
            <param name="socket">The accepted socket.</param>
            <remarks>This constructor is used by the SecureTcpListener class.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects the client to a remote TCP host using the specified remote network endpoint.
            </summary>
            <param name="remoteEP">The IP endpoint to which you intend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="remoteEP"/> parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Connects the client to a remote TCP host using the specified IP address and port number.
            </summary>
            <param name="address">The IP address of the host to which you intend to connect.</param>
            <param name="port">The port number to which you intend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="address"/> parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is less than MinPort -or- <paramref name="port"/> is greater than MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects the client to the specified port on the specified host.
            </summary>
            <param name="hostname">The DNS name of the remote host to which you intend to connect.</param>
            <param name="port">The port number of the remote host to which you intend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="hostname"/> parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is less than MinPort -or- <paramref name="port"/> is greater than MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.GetStream">
            <summary>
            Returns the stream used to send and receive data.
            </summary>
            <returns>The underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureNetworkStream"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">The SecureTcpClient is not connected to a remote host.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.Close">
            <summary>
            Closes the TCP connection.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while closing the Socket.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpClient.Dispose">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> and optionally releases the managed resources.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpClient.m_Active">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpClient.Active"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpClient.m_CleanedUp">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpClient.CleanedUp"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpClient.m_Client">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpClient.Client"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpClient.m_DataStream">
            <summary>Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpClient.DataStream"/> property.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.LingerState">
            <summary>
            Gets or sets information about the sockets linger time.
            </summary>
            <value>A LingerOption.</value>
            <remarks>This property controls the length of time that the underlying Socket will remain open after a call to Close, when data remains to be sent. If the Enabled property of the LingerOption is true, then data will continue to be sent to the network with a time out of LingerOption.LingerTime seconds. Once the data is sent, or if the time-out expires, the connection is closed and any unsent data is lost. If the Enabled property of the LingerOption is false , then the connection will close, even if data remains to be sent.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.NoDelay">
            <summary>
            Gets or sets a value that enables a delay when send or receive buffers are not full.
            </summary>
            <value><b>true</b> to disable a delay, otherwise <b>false</b>.</value>
            <remarks>When NoDelay is false, TCP does not send a packet over the network until it has collected a significant amount of outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data would be very inefficient. However, situations do exist where you might want to send very small amounts of data or expect immediate responses from each packet you send. Your decision should weigh the relative importance of network efficiency versus application requirements.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
            <value>The size of the receive buffer, in bytes.</value>
            <remarks>The ReceiveBufferSize property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time a <see cref="T:Xceed.Utils.Security.Ssl.SecureTcpClient"/> will wait to receive data once initiated.
            </summary>
            <value>The time-out value of the connection in milliseconds.</value>
            <remarks>The ReceiveTimeout property determines the amount of time a SecureTcpClient will wait to receive data after a read is initiated. This time is measured in milliseconds. The underlying Socket will throw a SocketException if a read is initiated, and the ReceiveTimeout expires.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.SendBufferSize">
            <summary>
            Gets or sets the size of the send buffer.
            </summary>
            <value>The size of the send buffer, in bytes.</value>
            <remarks>The SendBufferSize property gets or sets the number of bytes to store in the send buffer for each send operation.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.SendTimeout">
            <summary>
            Gets or sets the amount of time a SecureTcpClient will wait to receive confirmation after you initiate a send.
            </summary>
            <value>The send time-out value, in milliseconds.</value>
            <remarks>After you initiate a send, the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> returns the number of bytes actually sent to the host. The SendTimeout property determines the amount of time a TcpClient will wait before receiving the number of bytes returned by the SecureSocket class. The underlying SecureSocket will throw a SocketException if a send is initiated and the SendTimeout expires.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <value>The underlying Network Socket.</value>
            <remarks>SecureTcpClient creates a SecureSocket to send and receive data over a network. Classes deriving from SecureTcpClient can use this property to get or set this SecureSocket. Use the underlying SecureSocket returned from Client, if you require access beyond that which SecureTcpClient provides. You can also use Client to set the underlying SecureSocket to an existing SecureSocket. This might be useful if you want to take advantage of the simplicity of SecureTcpClient using a pre-existing SecureSocket.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made.
            </summary>
            <value><b>true</b> if the connection has been made; otherwise, <b>false</b>.</value>
            <remarks>Classes deriving from SecureTcpClient can use this property to keep track of the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> connection state.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.CleanedUp">
            <summary>
            Gets or sets a value that indicates whether the underlying SecureSocket has been closed or not.
            </summary>
            <value><b>true</b> if the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> has been closed, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpClient.DataStream">
            <summary>
            Gets or sets the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureNetworkStream"/> associated with this SecureTcpClient.
            </summary>
            <value>An instance of the SecureNetworkStream class.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecureTcpListener">
            <summary>
            Listens for secure connections from TCP network clients.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SecureTcpListener class that listens on the specified port.
            </summary>
            <param name="port">The port on which to listen. If this number is 0, the system will assign an open port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between MinPort and MaxPort.</exception>
            <remarks><paramref name="port"/> specifies the local port number on which you intend to listen. When you call Start, SecureTcpListener uses the default network interface to listen for connections on the specified port.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Int32,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureTcpListener class that listens on the specified port.
            </summary>
            <param name="port">The port on which to listen. If this number is 0, the system will assign an open port.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port parameter is not between MinPort and MaxPort.</exception>
            <remarks><paramref name="port"/> specifies the local port number on which you intend to listen. When you call Start, SecureTcpListener uses the default network interface to listen for connections on the specified port.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the SecureTcpListener class that listens to the specified IP address and port.
            </summary>
            <param name="localaddr">The local IP address.</param>
            <param name="port">The port on which to listen.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localaddr"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between MinPort and MaxPort.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Net.IPAddress,System.Int32,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureTcpListener class that listens to the specified IP address and port.
            </summary>
            <param name="localaddr">The local IP address.</param>
            <param name="port">The port on which to listen.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localaddr"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between MinPort and MaxPort.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the SecureTcpListener class with the specified local endpoint.
            </summary>
            <param name="localEP">The local endpoint to which to bind the listener Socket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks><paramref name="localEP"/> specifies the local <see cref="T:System.Net.IPEndPoint"/>. This constructor creates an underlying SecureSocket, and binds that SecureSocket to <paramref name="localEP"/>. If you call the Start method, TcpListener will listen for connections on <paramref name="localEP"/>.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(System.Net.IPEndPoint,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureTcpListener class with the specified local endpoint.
            </summary>
            <param name="localEP">The local endpoint to which to bind the listener Socket.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks><paramref name="localEP"/> specifies the local <see cref="T:System.Net.IPEndPoint"/>. This constructor creates an underlying SecureSocket, and binds that SecureSocket to <paramref name="localEP"/>. If you call the Start method, TcpListener will listen for connections on <paramref name="localEP"/>.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.#ctor(Xceed.Utils.Security.Ssl.SecureSocket,Xceed.Utils.Security.Ssl.SecurityOptions)">
            <summary>
            Initializes a new instance of the SecureTcpListener class with the specified listener SecureSocket.
            </summary>
            <param name="listener">The listener <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.</param>
            <param name="options">The security options to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listener"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the LocalEndPoint property.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.AcceptSocket">
            <summary>
            Accepts a pending connection request.
            </summary>
            <returns>A <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to Start.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to create the SSPI credentials.</exception>
            <remarks>AcceptSocket returns a SecureSocket that you can use to send and receive data. This SecureSocket is initialized with the IP address and port number of the remote machine. You can use any of the Send and Receive methods available in the Socket class to communicate with the remote machine.<br><b>Note</b>   When you finish using the Socket, be sure to call its Close method.</br><br><b>Note</b>   If your application is relatively simple, consider using the AcceptTcpClient method rather than AcceptSocket. SecureTcpClient provides you with simple methods for sending and receiving data over a network.</br></remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.AcceptTcpClient">
            <summary>
            Accepts a pending connection request.
            </summary>
            <returns>A SecureTcpClient used to send and receive data.</returns>
            <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to Start.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to create the SSPI credentials.</exception>
            <remarks>
            AcceptTcpClient returns a SecureTcpClient that you can use to send and receive data. Use SecureTcpClient.GetStream to obtain the underlying SecureNetworkStream of the SecureTcpClient. SecureNetworkStream inherits from Stream, which provides a rich collection of methods and properties for network communications.
            <br><b>Note</b>   When you are through with the returned SecureTcpClient, be sure to call it's Close method.</br>
            <br><b>Note</b>   If you want greater flexibility than a SecureTcpClient offers, consider using AcceptSocket.</br>
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.Pending">
            <summary>
            Determines if there are pending connection requests.
            </summary>
            <returns><b>true</b> if connections are pending; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.InvalidOperationException">The listener has not been started with a call to Start.</exception>
            <remarks>Pending polls for the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> to determine if there are pending connections.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.Start">
            <summary>
            Starts listening to network requests.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while opening the network socket.</exception>
            <exception cref="T:Xceed.Utils.Security.SecurityException">Unable to create the SSPI credentials.</exception>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecureTcpListener.Stop">
            <summary>
            Closes the listener.
            </summary>
            <remarks>Stop closes the listener.</remarks>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpListener.m_LocalEndpoint">
            <summary>Holds the value if the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpListener.LocalEndpoint"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpListener.m_Server">
            <summary>Holds the value if the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpListener.Server"/> property.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureTcpListener.m_SecurityOptions">
            <summary>Holds the value if the <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpListener.SecurityOptions"/> property.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpListener.Active">
            <summary>
            Gets a value that indicates whether SecureTcpListener is actively listening for client connections.
            </summary>
            <value><b>true</b> if SecureTcpListener is actively listening; otherwise <b>false</b>.</value>
            <remarks>Classes deriving from SecureTcpListener can use this property to keep track of the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> connection state.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpListener.LocalEndpoint">
            <summary>
            Gets the underlying <see cref="T:System.Net.EndPoint"/> of the current SecureTcpListener.
            </summary>
            <value>An instance of the EndPoint class used to bind the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.</value>
            <remarks>You can use LocalEndpoint if you want to identify the local network interface and port number being used to listen for incoming client connection requests.<br><b>Note</b>   To obtain address and port information, you must explicitly cast LocalEndpoint to return an <see cref="T:System.Net.IPEndPoint"/>. You can then use the various methods within IPEndPoint to retrieve the desired information.</br></remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpListener.Server">
            <summary>
            Gets the underlying <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <value>An instance of the SecureSocket class that provides the underlying network socket.</value>
            <remarks>SecureTcpListener creates a SecureSocket to listen for incoming client connection requests. Classes deriving from SecureTcpListener can use this property to get this Socket. Use the underlying SecureSocket returned by the Server property if you require access beyond that which SecureTcpListener provides.<br><b>Note</b>    Server only returns the SecureSocket used to listen for incoming client connection requests. Use the AcceptSocket method to accept a pending connection request and obtain a SecureSocket for sending and receiving data. You can also use the AcceptTcpClient method to accept a pending connection request and obtain a SecureTcpClient for sending and receiving data.</br></remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecureTcpListener.SecurityOptions">
            <summary>
            Gets the security options that are used for incoming connections.
            </summary>
            <value>A <see cref="P:Xceed.Utils.Security.Ssl.SecureTcpListener.SecurityOptions"/> instance.</value>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecurityOptions">
            <summary>
            Represents the security options that should be used when connecting to a secure server, or when accepting secure connections.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecurityOptions.#ctor(Xceed.Utils.Security.Ssl.SecureProtocol,Xceed.Utils.Security.Certificates.Certificate,Xceed.Utils.Security.Ssl.ConnectionEnd,Xceed.Utils.Security.Ssl.CredentialVerification,Xceed.Utils.Security.Ssl.CertVerifyEventHandler,System.String,Xceed.Utils.Security.Ssl.SecurityFlags,Xceed.Utils.Security.Ssl.SslAlgorithms,Xceed.Utils.Security.Ssl.CertRequestEventHandler)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:Xceed.Utils.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:Xceed.Utils.Security.Ssl.ConnectionEnd"/> values.</param>
            <param name="verifyType">One of the <see cref="T:Xceed.Utils.Security.Ssl.CredentialVerification"/> values.</param>
            <param name="verifier">The <see cref="T:Xceed.Utils.Security.Ssl.CertVerifyEventHandler"/> delegate.</param>
            <param name="commonName">The common name of the remote computer. This is usually a domain name.</param>
            <param name="flags">A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SecurityFlags"/> values.</param>
            <param name="allowed">A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SslAlgorithms"/> values.</param>
            <param name="requestHandler">The <see cref="T:Xceed.Utils.Security.Ssl.CertRequestEventHandler"/> delegate.</param>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecurityOptions.#ctor(Xceed.Utils.Security.Ssl.SecureProtocol,Xceed.Utils.Security.Certificates.Certificate,Xceed.Utils.Security.Ssl.ConnectionEnd)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:Xceed.Utils.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:Xceed.Utils.Security.Ssl.ConnectionEnd"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecurityOptions.#ctor(Xceed.Utils.Security.Ssl.SecureProtocol)">
            <summary>
            Initializes a new instance of the SecurityOptions structure.
            </summary>
            <param name="protocol">One of the <see cref="T:Xceed.Utils.Security.Ssl.SecureProtocol"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.SecurityOptions.Clone">
            <summary>
            Creates a shallow copy of this <see cref="T:Xceed.Utils.Security.Ssl.SecurityOptions"/> object.
            </summary>
            <returns>A shallow copy of this object.</returns>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_Protocol">
            <summary>One of the <see cref="T:Xceed.Utils.Security.Ssl.SecureProtocol"/> values.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_Certificate">
            <summary>A <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/> instance.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_Entity">
            <summary>One of the <see cref="T:Xceed.Utils.Security.Ssl.ConnectionEnd"/> values.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_VerificationType">
            <summary>One of the <see cref="T:Xceed.Utils.Security.Ssl.CredentialVerification"/> values.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_Verifier">
            <summary>The <see cref="T:Xceed.Utils.Security.Ssl.CertVerifyEventHandler"/> delegate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_RequestHandler">
            <summary>The <see cref="T:Xceed.Utils.Security.Ssl.CertRequestEventHandler"/> delegate.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_CommonName">
            <summary>The common name of the remote computer. This is usually a domain name.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_Flags">
            <summary>A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SecurityFlags"/> values.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityOptions.m_AllowedAlgorithms">
            <summary>A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SslAlgorithms"/> values.</summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.Protocol">
            <summary>
            Gets or sets the secure protocol that the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SecureProtocol"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate">
            <summary>
            Gets or sets the <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/> that the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>An instance of the Certificate class.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.Entity">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> is a server or a client socket.
            </summary>
            <value>One of the <see cref="T:Xceed.Utils.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.VerificationType">
            <summary>
            Gets or sets a value that indicates how the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> will try to verify the peer <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/>.
            </summary>
            <value>One of the <see cref="T:Xceed.Utils.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.Verifier">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> receives the peer certificate.
            </summary>
            <value>A <see cref="T:Xceed.Utils.Security.Ssl.CertVerifyEventHandler"/> delegate.</value>
            <remarks>This member will only be used if the <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.VerificationType"/> is set to Manual.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.RequestHandler">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> receives a request for a client certificate.
            </summary>
            <value>A <see cref="T:Xceed.Utils.Security.Ssl.CertRequestEventHandler"/> delegate.</value>
            <remarks>This member will only be used if no <see cref="P:Xceed.Utils.Security.Ssl.SecurityOptions.Certificate"/> is specified in the Certificate property of this class.</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.CommonName">
            <summary>
            Gets or sets the common name of the peer.
            </summary>
            <value>A <see cref="T:System.String"/> that holds the common name of the peer. This is usually a domain name.</value>
            <remarks>Servers that do not use client authentication should set this member to a null reference (<b>Nothing</b> in Visual Basic).</remarks>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.Flags">
            <summary>
            Gets or sets the security flags associated with the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/>.
            </summary>
            <value>A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SecurityFlags"/> values.</value>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.SecurityOptions.AllowedAlgorithms">
            <summary>
            Gets or sets the list of algorithms that can be used to encrypt and compress data.
            </summary>
            <value>A bitwise combination of the <see cref="T:Xceed.Utils.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            This member should always contain at least one encryption algorithm and one compression algorithm.
            Currently, the only defined compression algorithm is SslAlgorithms.NULL_COMPRESSION.
            The default setting for this member is SslAlgorithms.ALL.
            </remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecureProtocol">
            <summary>
            Specifies the type of security protocol that an instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureProtocol.None">
            <summary>No security protocol will be used. The SecureSocket will act as a normal Socket.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureProtocol.Ssl3">
            <summary>SSLv3 will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecureProtocol.Tls1">
            <summary>TLS will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SecurityFlags">
            <summary>
            Specifies the different security flags that an instance of the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityFlags.Default">
            <summary>No special behavior is required.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityFlags.MutualAuthentication">
            <summary>
            Client authentication is required. This flag only has an effect on server sockets.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityFlags.DontSendEmptyRecord">
            <summary>
            To avoid a certain CBC IV attack, the Security Library sends an empty message after the handshake and before the actual application payload.
            Unfortunately, some broken implementations do not support empty packets, so sending these empty packets can be turned off
            by specifying the DontSendEmptyRecord flag.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SecurityFlags.IgnoreMaxProtocol">
            <summary>
            Setting this flag will allow a client to issue a SSLv3.0 version number as latest version supported in the premaster secret, even when TLSv1.0 (version 3.1) was announced in the client hello. Normally this is forbidden to prevent version rollback attacks.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.ConnectionEnd">
            <summary>
            Specifies the different connection end values.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.ConnectionEnd.Server">
            <summary>The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> is a server socket.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.ConnectionEnd.Client">
            <summary>The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> is a client socket.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.SslAlgorithms">
            <summary>
            Specifies the different cipher suites and compression algorithms.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.NONE">
            <summary>No encryption or compression.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_RC4_40_MD5">
            <summary>RC4 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_RC4_128_MD5">
            <summary>RC4 encryption with a 128 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_RC4_128_SHA">
            <summary>RC4 encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_RC2_40_MD5">
            <summary>RC2 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_DES_56_SHA">
            <summary>DES encryption with a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_3DES_168_SHA">
            <summary>Triple DES encryption with a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_DES_40_SHA">
            <summary>DES encryption with a 40 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_AES_128_SHA">
            <summary>AES encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.RSA_AES_256_SHA">
            <summary>AES encryption with a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.SECURE_CIPHERS">
            <summary>Cipher Suites that are currently considered secure. As a convenience, this value also specifies NULL compression.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.NULL_COMPRESSION">
            <summary>No compression. This value must always be specified; it is currently the only supported compression algorithm.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.SslAlgorithms.ALL">
            <summary>All encryption and compression algorithms.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.CredentialVerification">
            <summary>
            Specifies the method used to verify the remote credential.
            </summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.CredentialVerification.Manual">
            <summary>The remote certificate will be manually verified. When an incoming connection is accepted, the SecureSocket will raise a CertVerification event. This is the recommended credential verification method.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.CredentialVerification.Auto">
            <summary>The remote certificate will be automatically verified by the crypto API.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.CredentialVerification.AutoWithoutCName">
            <summary>The remote certificate will be automatically verified by the crypto API, but the common name of the server will not be checked.</summary>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.CredentialVerification.None">
            <summary>The remote certificate will not be verified. This method is not secure and should only be used for debugging purposes.</summary>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.CertVerifyEventHandler">
            <summary>
            References the method to be called when the remote certificate should be verified.
            </summary>
            <param name="socket">The <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> that received the certificate to verify.</param>
            <param name="remote">The <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> of the remote party to verify. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="chain">The <see cref="T:Xceed.Utils.Security.Certificates.CertificateChain"/> associated with the remote certificate. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="e">A <see cref="T:Xceed.Utils.Security.Ssl.VerifyEventArgs"/> instance used to (in)validate the certificate. If this parameter is <b>true</b> after the delegate returns, the SecureSocket will continue the connection. If this parameter is <b>false</b> after the delegate returns, the connection will be closed.</param>
            <remarks>
            If an error is thrown by the code in the delegate, the SecureSocket will close the connection.
            </remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.CertRequestEventHandler">
            <summary>
            References the method to be called when the <see cref="T:Xceed.Utils.Security.Ssl.SecureSocket"/> receives a <see cref="T:Xceed.Utils.Security.Certificates.Certificate"/> request from the peer.
            </summary>
            <param name="socket">The SecureSocket that received the certificate request.</param>
            <param name="acceptable">An instance of the <see cref="T:Xceed.Utils.Security.Certificates.DistinguishedNameList"/> class that contains a list of relative distinguished names. If the client chooses to send a certificate to the remote server, the CA that signed this certificate should be in the list of distinguished names.</param>
            <param name="e">A <see cref="T:Xceed.Utils.Security.Ssl.RequestEventArgs"/> instance used to pass the certificate to the SecureSocket.</param>
            <remarks>
            <p>This delegate is only used by client sockets</p>
            <p>If an error is thrown by the code in the delegate, the SecureSocket will close the connection.</p>
            </remarks>
        </member>
        <member name="T:Xceed.Utils.Security.Ssl.VerifyEventArgs">
            <summary>
            Provides data for the Verify event.
            </summary>
            <remarks>
            When the CertVerifyEventHandler delegate is called, one of its parameters is an instance of this class. If the certificate should not be accepted and the connection should be closed, simply set the Valid property to <b>false</b> and return from the callback.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VerifyEventArgs.#ctor">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <remarks>The initial value of the <see cref="P:Xceed.Utils.Security.Ssl.VerifyEventArgs.Valid"/> property will be <b>true</b>.</remarks>
        </member>
        <member name="M:Xceed.Utils.Security.Ssl.VerifyEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <param name="valid">The initial value of the <see cref="P:Xceed.Utils.Security.Ssl.VerifyEventArgs.Valid"/> property.</param>
        </member>
        <member name="F:Xceed.Utils.Security.Ssl.VerifyEventArgs.m_Valid">
            <summary>
            Holds the value of the <see cref="P:Xceed.Utils.Security.Ssl.VerifyEventArgs.Valid"/> property.
            </summary>
        </member>
        <member name="P:Xceed.Utils.Security.Ssl.VerifyEventArgs.Valid">
            <summary>
            Gets or sets whether the certificate should be accepted as a valid certficate or not.
            </summary>
            <value><b>true</b> if the certificate is valid, otherwise <b>false</b>.</value>
        </member>
        <member name="T:Xceed.Utils.Security.SecurityConstants">
            <summary>
            Defines the external methods of the CryptoAPI and SCHANNEL API.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.SecurityConstants.#ctor">
            <summary>
            Defeat instantiation of this class.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.SecurityException">
            <summary>
            The exception that is thrown when a security error is detected.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.SecurityException.#ctor">
            <summary>
            Initializes a new instance of the SecurityException class with default properties.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Security.SecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Utils.Security.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner"/> parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Xceed.Utils.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SecurityException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Xceed.Utils.Security.DataBlob">
            <summary>
            The DataBlob structure contains an array of bytes. 
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CertificateInfo">
            <summary>
            The CertificateInfo structure contains a certificate's information.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CERT_PUBLIC_KEY_INFO">
            <summary>
            The CERT_PUBLIC_KEY_INFO structure contains a public key and its algorithm.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CertificateContext">
            <summary>
            The CertificateContext structure contains both the encoded and decoded representations of a certificate.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.TrustListUsage">
            <summary>
            The TrustListUsage structure contains an array of Object Identifiers (OIDs) for Certificate Trust List (CTL) extensions. CTL_USAGE structures are used in functions that search for CTLs for specific uses.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CertificateExtension">
            <summary>
            The CertificateExtension structure contains the extension information for a certificate, Certificate Revocation List (CRL) or Certificate Trust List (CTL).
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CertificateNameValue">
            <summary>
            The CertificateNameValue structure contains a relative distinguished name (RDN) attribute value. It is like the CERT_RDN_ATTR structure, except that it does not include the object identifier member that is a member of CERT_RDN_ATTR. As in CERT_RDN_ATTR, the interpretation of the Value member depends on dwValueType.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CertificateNameInfo">
            <summary>
            The CertificateNameInfo structure contains subject or issuer names. The information is represented as an array of CERT_RDN structures.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.RelativeDistinguishedName">
            <summary>
            The RelativeDistinguishedName structure contains a relative distinguished name (RDN) consisting of an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.RdnAttribute">
            <summary>
            The RdnAttribute structure contains a single attribute of a relative distinguished name (RDN). A whole RDN is expressed in a CERT_RDN structure that contains an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.ChainParameters">
            <summary>
            The ChainParameters structure establishing the searching and matching criteria to be used in building a certificate chain.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.ChainPolicyStatus">
            <summary>
            The ChainPolicyStatus structure holds certificate chain status information returned by CertVerifyCertificateChainPolicy from the verification of certificate chains.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.ChainPolicyParameters">
            <summary>
            The ChainPolicyParameters structure contains information used in CertVerifyCertificateChainPolicy to establish policy criteria for the verification of certificate chains.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.SslPolicyParameters">
            <summary>
            The SslPolicyParameters structure contains extra policy options.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.CRYPT_KEY_PROV_INFO">
            <summary>
            The CRYPT_KEY_PROV_INFO structure contains fields that are passed as the arguments to CryptAcquireContext to acquire a handle to a particular key container within a particular cryptographic service provider (CSP), or to create or destroy a key container.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.PUBLIC_KEY_BLOB">
            <summary>
            Union of the PUBLICKEYSTRUC [=BLOBHEADER] and RSAPUBKEY structures 
            </summary>
        </member>
        <member name="T:Xceed.Utils.Security.SspiProvider">
            <summary>
            Defines the external methods of the CryptoAPI.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Streams.NotifyStream">
            <summary>
            Pass-through stream that notifies FileZipEntry on certain events.
            </summary>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Xceed.Utils.Streams.NotifyStream.Dispose(System.Boolean)">
            <summary>
            Provides correct cleanup of resources in the base class and its derived classes.
            </summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Utils.Streams.NotifyStream.CheckIfDisposed">
            <summary>
            Checks if the object has been disposed.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Streams.NotifyStreamArgs">
            <summary>
            Parameters for every event raised by a <see cref="T:Xceed.Utils.Streams.NotifyStream"/>.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Streams.NotifyStreamArgs.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="userData"></param>
        </member>
        <member name="P:Xceed.Utils.Streams.NotifyStreamArgs.UserData">
            <summary>
            The user data associated with this NotifyStream.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Streams.ReadingFromStreamEventHandler">
            <summary>
            Data was read from the inner stream.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Streams.WritingToStreamEventHandler">
            <summary>
            Data will be written to the inner stream.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Streams.ClosingStreamEventHandler">
            <summary>
            The inner stream was closed through an explicit call to Close.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.AsyncFtpClient">
            <summary>
            This class provides you with access to asynchronous FTP functionalities. GUI applications should always 
            use the AsyncFtpClient class since the library uses multiple threads. When using the 
            <see cref="T:Xceed.Ftp.FtpClient"/> class, the user is prone to encounter timeout errors since the library may be 
            trying to generate events on the main UI thread through a message, but the application is blocked in a 
            method call and not pumping messages.
            </summary>
            <remarks><para>
            Xceed FTP for .NET is a highly multi-threaded library that uses asynchronous operations
            on sockets and network streams to allow fast and fluent execution. This results in
            most events being called from a different thread than the one that called the initiating
            method.</para><para> 
            When building a GUI application using System.Windows.Forms, you must always make
            sure to access UI elements (controls and forms) from the main thread since all those
            controls have thread-affinity for the main STA thread. This is done using 
            Control.Invoke or Control.BeginInvoke.
            </para><para>
            If you use the <see cref="T:Xceed.Ftp.FtpClient"/> class, subscribe to an event and call a method, your main
            UI thread will be blocked in that method call and will not pump messages. The event
            you subscribe to will be raised on a different thread, so Control.Invoke must be
            called to make any changes to the user interface of your application. This, however,
            causes another problem: your main UI thread is not pumping messages, and Control.Invoke
            will freeze until the method call times out. If you use Control.BeginInvoke, it will
            not freeze, but the invocation will get through after the method returns: only then
            will your UI be updated.
            </para><para>
            The safe and correct way of using Xceed FTP for .NET in a GUI application is to use
            the AsyncFtpClient class, call asynchronous methods (those that start with "Begin"),
            provide callbacks and call the corresponding "End" method in them, or manually pump
            messages while waiting for completion and then call the corresponding "End" method.
            </para><para>
            If you do not want to have to call Control.Invoke to update the UI in the callbacks,
            you can set the AsyncFtpClient's <see cref="P:Xceed.Ftp.AsyncFtpClient.SynchronizingObject"/> property to your form (or any
            other control that implements the ISynchronizeInvoke interface) to automatically
            do it for you. However, in order for the SynchronizingObject to work, your application
            must be pumping messages, either explicitly while waiting for completion (Application.DoEvents),
            or by not calling any blocking methods and returning control to your application's
            main loop (Application.Run in Main).
            </para><para>
            There are two suggested ways to use AsyncFtpClient in a GUI application:
            </para><para>
            1- Use a callback in the BeginXyz method, and call EndXyz in that callback only. The developer must then 
            be aware that calling BeginXyz won't block, and execution of the application will continue.  For example:
            
            <code lang="Visual Basic">
            Dim client As New AsyncFtpClient()
            
            Try
                ' Start connecting asynchronously.
                client.BeginConnect("ftp.winzip.com", New AsyncCallback(AddressOf ConnectCompleted), client)
            Catch except As Exception
                Console.WriteLine(except.Message)
            End Try
            
            ' Normally, you will want to make that method return so your 
            ' application continues pumping messages. But for the sake of this
            ' sample, we want to avoid returning and running the second example
            ' before this one completes. Let's pump messages until disconnected.
            While client.State &lt;&gt; FtpClientState.NotConnected
                Application.DoEvents()
            End While
            
            Private Sub ConnectCompleted(result As IAsyncResult)
                Dim client As AsyncFtpClient = result.AsyncState
                
                Try
                    ' All Begin calls must be matched by its End call.
                    client.EndConnect(result)
                    
                    ' Now that we are connected, let's login anonymously, but again
                    ' using the async method call.
                      client.BeginLogin(New AsyncCallback(AddressOf LoginCompleted), client)
                Catch except As Exception
                    Console.WriteLine(except.Message)
                End Try
            End Sub
            
            Private Sub LoginCompleted(result As IAsyncResult)
                Dim client As AsyncFtpClient = result.AsyncState
                
               Try
                   ' All Begin calls must be matched by its End call.
                   client.EndLogin(result)
                   
                   ' Finally, we disconnect asynchronously. You can see that if you
                   ' wish to perform more operations, a cascading serie of async
                   ' calls can get out of hands.
                   client.BeginDisconnect(New AsyncCallback(AddressOf DisconnectCompleted), client)
               Catch except As Exception
                   Console.WriteLine(except.Message)
               End Try
            End Sub
            
            Private Sub DisconnectCompleted(result As IAsyncResult)
                Dim client As AsyncFtpClient = result.AsyncState
                
                Try
                    ' All Begin calls must be matched by its End call.
                    client.EndDisconnect(result)
                Catch except As Exception
                    Console.WriteLine(except.Message)
                End Try
            End Sub 
            </code>
            <code lang="C#">
            AsyncFtpClient client = new AsyncFtpClient();
            
            try
            {
                // Start connecting asynchronously.
                IAsyncResult result = client.BeginConnect( hostname, new AsyncCallback( ConnectCompleted ), client );
            }
            catch( Exception except )
            {
                console.WriteLine( except.Message );
            }
            
            // Normally, you will want to make that method return so your 
            // application continues pumping messages. But for the sake of this
            // sample, we want to avoid returning and running the second example
            // before this one completes. Let's pump messages until disconnected.
            while( client.State != FtpClientState.NotConnected )
            {
                Application.DoEvents();
            }
            
            private void ConnectCompleted( IAsyncResult result )
            {
                AsyncFtpClient client = result.AsyncState as AsyncFtpClient;
                
                try
                {
                    // All Begin calls must be matched by its End call.
                    client.EndConnect( result );
                     
                    // Now that we are connected, let's login anonymously, but again using the async method call.
                    client.BeginLogin( new AsyncCallback( LoginCompleted ), client );
                }
                catch( Exception except )
                {
                    Console.WriteLine( except.Message );
                }
            }
            
            private void LoginCompleted( IAsyncResult result )
            {
                AsyncFtpClient client = result.AsyncState as AsyncFtpClient;
                
                try
                {
                    // All Begin calls must be matched by its End call.
                    client.EndLogin( result );
                    
                    // Finally, we disconnect asynchronously. You can see that if you
                    // wish to perform more operations, a cascading serie of async
                    // calls can get out of hands.
                    client.BeginDisconnect( new AsyncCallback( DisconnectCompleted ), client );
                    
                 }
                 catch( Exception except )
                 {
                     Console.WriteLine( except.Message );
                 }
            }
            
            private void DisconnectCompleted( IAsyncResult result )
            {
               AsyncFtpClient client = result.AsyncState as AsyncFtpClient;
               
               try
               {
                   // All Begin calls must be matched by its End call.
                   client.EndDisconnect( result );
               }
               catch( Exception except )
               {
                   Console.WriteLine( except.Message );
               }
            }  
            </code></para><para>
            2- Call BeginXyz, then pump messages as long as the returned IAsyncResult's <see cref="P:System.IAsyncResult.IsCompleted"/> 
            property is <see langword="false"/>. For example:
            
            <code lang="Visual Basic">
            ' If you don't mind pumping messages explicitly, this alternative 
            ' use of AsyncFtpClient can prove very useful to get readable code.
            Dim client As New AsyncFtpClient()
            
            Try
                ' Start connecting asynchronously. No need for a callback!
                Dim result As IAsyncResult = client.BeginConnect(hostname, Nothing, Nothing)
                
                ' Wait for that async result to complete, making sure to pump messages.
                While Not result.IsCompleted
                    Application.DoEvents()
                End While
                  
                ' Complete the connection. All "Begin" calls must be matched
                ' by their matching "End" method call.
                client.EndConnect(result)
                
                ' Now that we are connected, we can login.
                result = client.BeginLogin(Nothing, Nothing)
                
                While Not result.IsCompleted
                    Application.DoEvents()
                End While 
                
                client.EndLogin(result)
                
                ' And finally, we disconnect.
                result = client.BeginDisconnect(Nothing, Nothing)
                
                While Not result.IsCompleted
                    Application.DoEvents()
                End While 
                
                client.EndDisconnect(result)
            Catch except As Exception
                Console.WriteLine(except.Message)
            End Try
            </code>
            <code lang="C#">
            AsyncFtpClient client = new AsyncFtpClient();
            
            // When using AsyncFtpClient and async method calls, you can instruct
            // the library to automatically redirect events on the main UI thread
            // by setting the SynchronizingObject property.
            client.SynchronizingObject = m_resultsForm;
            
            try
            {
                // Start connecting asynchronously. No need for a callback!
                IAsyncResult result = client.BeginConnect( hostname, null, null );
                
                // Wait for that async result to complete, making sure to pump messages.
                while( !result.IsCompleted )
                    Application.DoEvents();
                    
                // Complete the connection. All "Begin" calls must be matched by their matching "End" method call.
                client.EndConnect( result );
                
                // Now that we are connected, we can login.
                result = client.BeginLogin( null, null );
                
                while( !result.IsCompleted )
                    Application.DoEvents();
                    
                client.EndLogin( result );
                
                // And finally, we disconnect.
                result = client.BeginDisconnect( null, null );
                
                while( !result.IsCompleted )
                    Application.DoEvents();
                    
                client.EndDisconnect( result );
                
            catch( Exception except )
            {
                Console.WriteLine( except.Message );
            } 
            </code></para></remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpClient">
            <summary>
            This class provides you with quick and easy access to FTP functionalities in the same 
            style as the ActiveX version of the Xceed FTP Library. 
            </summary>
            <remarks><para>
            GUI applications should always use the <see cref="T:Xceed.Ftp.AsyncFtpClient"/> class since the library uses 
            multiple threads. When using the FtpClient class, the user is prone to encounter timeout errors since 
            the library may be trying to generate events on the main UI thread through a message, but the 
            application is blocked in a method call and not pumping messages.
            </para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.#ctor">
            <summary>
            Initializes a new instance of the FtpClient class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String)">
            <summary>
            Connects the FTP client to an FTP server on port 21.
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.FtpClient.Login(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand)"/> method to log-in to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>
            Connects the FTP client to a <b>secure</b> FTP server on port 21.
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.FtpClient.Login(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand)"/> method to log-in to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects the FTP client to an FTP server using the specified hostname and port.
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 
            21 will be used.</param>
            <remarks><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.FtpClient.Login(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand)"/> method to log-in to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>
            Connects the FTP client to a <b>secure</b> FTP server using the specified hostname and port.
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 
            21 will be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <remarks><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.FtpClient.Login(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand)"/> method to log-in to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects the FTP client to an FTP server using the specified <see cref="T:System.Net.IPEndPoint"/> 
            (IP address and port).
            </summary>
            <param name="serverAddress">An <see cref="T:System.Net.IPEndPoint"/> representing the IP address 
            and port of the FTP server to connect to. If 0 is specified for the port, 21 will 
            be used.</param>
            <remarks><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.FtpClient.Login(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand)"/> method to log-in to the FTP server.
            </para></remarks>
            <example>
            The following example demonstrates how to connect to an FTP server using
            an IPEndPoint. If you are using an IP address (ie: "192.168.0.128")
            or a server address (ie: "localhost" ), it is much simpler to use the overloads
            of the Connect method that do not use an IPEndPoint.
            <code lang="Visual Basic">
            Dim ftp As New FtpClient()
                
            Dim host As IPHostEntry = Dns.Resolve( "localhost" )
            Dim endPoint As new IPEndPoint( host.AddressList( 0 ), 21 )
            
            ftp.Connect( endPoint )</code>
            <code lang="C#">
            FtpClient ftp = new FtpClient();
            
            IPHostEntry host = Dns.Resolve( "localhost" );
            IPEndPoint endPoint = new IPEndPoint( host.AddressList[ 0 ], 21 );
            
            ftp.Connect( endPoint );
            </code></example>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection)">
            <summary>
            Authenticates and encrypts the current FTP connection.
            </summary>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="dataProtection">How the data channels will be protected.</param>
            <remarks><para>
            The <see cref="M:Xceed.Ftp.FtpClient.Connect(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ConnectFtpCommand)"/> method that requires an authentication method, verification flags
            and a client certificate can be used in the case where the FTP server does not allow authentication
            after the connection has been established.
            </para><para>
            If the FTP server requires a certificate or the one provided was rejected, the 
            <see cref="E:Xceed.Ftp.FtpClient.CertificateRequired"/> will be raised. When the FTP server's certificate is received 
            and verified, the <see cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/> event will be raised. 
            </para><para>
            The Authenticate method will send the AUTH and PROT commands to the FTP server.
            </para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
            <summary>
            Authenticates and encrypts the current FTP connection.
            </summary>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <remarks><para>
            The <see cref="M:Xceed.Ftp.FtpClient.Connect(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ConnectFtpCommand)"/> method that requires an authentication method, verification flags
            and a client certificate can be used in the case where the FTP server does not allow authentication
            after the connection has been established.
            </para><para>
            If the FTP server requires a certificate or the one provided was rejected, the 
            <see cref="E:Xceed.Ftp.FtpClient.CertificateRequired"/> will be raised. When the FTP server's certificate is received 
            and verified, the <see cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/> event will be raised. 
            </para><para>
            The Authenticate method will send the AUTH and PROT commands to the FTP server.
            </para><para><note type="Caution">
            When using this overload of the BeginAuthenticate method, the data channel is <b>not</b>  secured (DataChannelProtection.Clear).
            </note></para></remarks><seealso cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/><seealso cref="E:Xceed.Ftp.FtpClient.CertificateRequired"/>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login">
            <summary>
            Login the FTP client <b>anonymously</b> to the FTP server to which it is connected.
            </summary>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para>
            <para>The Login method will send the USER and PASS commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String)">
            <summary>
            Login the FTP client to the FTP server to which it is connected using the specified username
            and password.
            </summary> 
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para><para>The Login method will send the USER and PASS commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String,System.String)">
            <summary>
            Login the FTP client to the FTP server to which it is connected using the specified username
            and password.
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para><para>The Login method will send the USER, PASS and ACCT commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser">
            <summary>
            Changes the currently logged-in user to the anonymous user without disconnecting from the FTP server.
            </summary>
            <remarks><para>The ChangerUser method will send the REIN, USER and PASS commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String)">
            <summary>
            Changes the currently logged-in user to the specified user without disconnecting from the FTP server.
            </summary>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <remarks><para>The ChangeUser method will send the REIN, USER and PASS commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String,System.String)">
            <summary>
            Changes the currently logged-in user to the specified user and account without disconnecting from 
            the FTP server.
            </summary>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <remarks><para>The ChangeUser method will send the REIN, USER, PASS and ACCT commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Disconnect">
            <summary>
            Disconnects the FTP client from the FTP server to which it is connected.
            </summary>
            <remarks><para>
            If the FTP client is in an invalid state, for example, sending a file, the 
            Disconnect method will throw an exception. It is up to the user to call 
            Abort before calling Disconnect.
            </para><para>The Disconnect method will send the QUIT command to the FTP server and make sure
            that the command connection is closed.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetCurrentFolder">
            <summary>
            Retrieves the current working folder of the FTP server.
            </summary>
            <returns>A string representing the FTP server's current folder. The path returned is an absolute path that 
            can be used with the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> to go directly to this folder regardless of the
            current working folder.</returns>
            <remarks><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. It can be 
            changed using the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods.
            </para><para>The GetCurrentFolder method will send the PWD command to the FTP server.
            </para><para>
            This method is the equivalent of the CurrentFolder property of the ActiveX version of the 
            Xceed FTP Library.
            </para></remarks>
            <seealso cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/><seealso cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(System.String)">
            <summary>
            Changes the current working folder of the FTP server.
            </summary>
            <param name="folder">The new current working folder. <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            Both relative and absolute paths can be provided to the ChangeCurrentFolder method to change
            the FTP server's current working folder, however some FTP servers might not support absolute paths 
            and different server types may have different ways of representing absolute paths.
            </para><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. 
            </para><para>
            The <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> method should be used in the case where
            you want the parent folder to be the new current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ChangeCurrentFolder method will send the CWD command to the FTP server.
            </para></remarks>
            <seealso cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/><seealso cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ChangeToParentFolder">
            <summary>
            Changes the current working folder of the FTP server to the parent folder.
            </summary>
            <remarks><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. It can be retrieved 
            via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ChangeToParentFolder method will send CDUP command to the FTP server.
            </para></remarks>
            <seealso cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/><seealso cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.CreateFolder(System.String)">
            <summary>
            Create a folder on the FTP server.
            </summary>
            <param name="folder">The name of the folder to create. <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the folder will be created in the current working folder. If you want to create the folder
            in another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The CreateFolder method will send the MKD command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String)">
            <summary>
            Deletes a folder from the FTP server.
            </summary>
            <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the folder will be deleted from the current working folder. If you want to delete the folder
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            This overload of the DeleteFolder method requires that the folder be empty in order
            to delete it. <b>Some FTP servers will allow folders that contain child items to be
            deleted, therefore, it is possible that calling this overload of the DeleteFolder method
            will delete a folder even if it contains child items.</b>
            </note></para><para>The DeleteFolder method will send the RMD command to the FTP server.
            </para><para>
            This method is the equivalent of the RemoveFolder method of the ActiveX version 
            of the Xceed FTP Library.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String,System.Boolean)">
            <summary>
            Deletes a folder, and optionally each item in the folder, from the FTP server.
            </summary>
            <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="recursive"><see langword="true"/> if each item in the folder
            should also be deleted; <see langword="false"/> otherwise.</param>
            <remarks><para>
            By default, the folder will be deleted from the current working folder. If you want to delete the folder
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            <b>Some FTP servers will allow folders that contain child items to be
            deleted, therefore, it is possible that calling this overload of the DeleteFolder method with
            its <paramref name="recursive"/> parameter set to <see langword="false"/> will still delete
            each item in the folder (including the folder).</b></note></para>
            <para>The DeleteFolder method will send the RMD command and optionally the PWD, CWD, TYPE,
            PASV or PORT and LIST commands to the FTP server.
            </para><para>
            This method is the equivalent of the RemoveFolder method of the ActiveX version 
            of the Xceed FTP Library.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">The format of the reply received from the FTP server was not recognized..</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file from the FTP server.
            </summary>
            <param name="file">The name of the file to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the file will be deleted from the current working folder. If you want to delete the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The DeleteFile method will send the DELE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.RenameFile(System.String,System.String)">
            <summary>
            Renames a file on the FTP server.
            </summary>
            <param name="currentFilename">The filename of the file to rename. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="newFilename">The new filename. <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the file will be renamed in the current working folder. If you want to rename the file
            in another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The RenameFile method will send the RNFR and RNTO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetFolderContents(System.String)">
            <summary>
            Retrieves the contents of the current working folder.
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a 
            filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfoList"/> collection containing 
            <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects each representing a file matched by <paramref name="remoteFileMask"/>.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>
            The listing lines can be manually parsed or modified via the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event.
            </para><para><note>
            If you would prefer to receive an unprocessed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetRawFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property 
            when calling the GetFolderContents method.</note></para><para>The GetFolderContents method will send the LIST and PASV or PORT and TYPE 
            commands to the FTP server.
            </para><para>
            This method is the equivalent of the GetFolderContents and ListFolderContents methods of 
            the ActiveX version of the Xceed FTP Library.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetRawFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
            <seealso cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetFolderContents">
            <summary>
            Retrieves the entire contents of the current working folder.
            </summary>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfoList"/> collection containing 
            <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects each representing a file matched by <paramref name="remoteFileMask"/>.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>
            The listing lines can be manually parsed or modified via the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event.
            </para><para><note>
            If you would prefer to receive an unprocessed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetRawFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the GetFolderContents method.</note></para><para>The GetFolderContents method will send the 
            LIST and PASV or PORT and TYPE commands to the FTP server.
            </para><para>
            This method is the equivalent of the GetFolderContents and ListFolderContents methods of 
            the ActiveX version of the Xceed FTP Library.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetRawFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
            <seealso cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String,System.Boolean)">
            <summary>
            Retrieves an <b>unprocessed</b>, clear text list representing the contents of the current working
            folder as sent by the FTP server and indicates if the entire listing
            or only filenames should be retrieved.
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can 
            can include a filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="namesOnly"><see langword="true"/> if only filenames should be retrieved;
            <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.Ftp.StringList"/> collection containing a list
            of unprocessed strings each representing a file matched by <paramref name="remoteFileMask"/>. 
            For example: <i>"07-25-03  11:46AM                  101 001fdf63.xml"</i>. Of course,
            the format of the strings returned by the FTP server can vary from server to server.
            </returns><remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>
            If <paramref name="namesOnly"/> is set to <see langword="true"/>, the NLST command will
            be sent to the FTP server and only the name of the items will be returned.If 
            <paramref name="namesOnly"/> is set to <see langword="false"/>, the LIST command will
            be sent to the FTP server all the available information will be returned.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the GetRawFolderContents method.</note></para>
            <para>The GetRawFolderContents method will send the LIST or NLST and PASV or PORT and TYPE 
            commands to the FTP server.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String)">
            <summary>
            Retrieves an <b>unprocessed</b>, clear text list representing the contents of the current working 
            folder as sent by the FTP server.
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can 
            can include a filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <returns>A reference to a <see cref="T:Xceed.Ftp.StringList"/> collection containing a list
            of unprocessed strings each representing a file matched by <paramref name="remoteFileMask"/>. 
            For example: <i>"07-25-03  11:46AM                  101 001fdf63.xml"</i>. Of course,
            the format of the strings returned by the FTP server can vary from server to server.
            </returns><remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the GetRawFolderContents method.</note></para>
            <para>The GetRawFolderContents method will send the LIST and PASV or PORT and TYPE 
            commands to the FTP server.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.Boolean)">
            <summary>
            Retrieves an <b>unprocessed</b>, clear text list representing the entire contents of current 
            working folder as sent by the FTP server and indicates if the entire listing
            or only filenames should be retrieved.
            </summary>
            <param name="namesOnly"><see langword="true"/> if only filenames should be retrieved;
            <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.Ftp.StringList"/> collection contain a list
            of unprocessed strings each representing an item <paramref name="folder"/>. 
            For example: <i>"07-25-03  11:46AM                  101 001fdf63.xml"</i>. Of course,
            the format of the strings returned by the FTP server can vary from server to server.
            </returns><remarks><para>
            If <paramref name="namesOnly"/> is set to <see langword="true"/>, the NLST command will
            be sent to the FTP server and only the name of the items will be returned.If 
            <paramref name="namesOnly"/> is set to <see langword="false"/>, the LIST command will
            be sent to the FTP server and all the available information will be returned.
            </para><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the GetRawFolderContents method.</note></para>
            <para>The GetRawFolderContents method will send the LIST or NLST and PASV or PORT and TYPE 
            commands to the FTP server.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents">
            <summary>
            Retrieves an <b>unprocessed</b>, clear text list representing the entire contents of current 
            working folder as sent by the FTP server.
            </summary> 
            <returns>A reference to a <see cref="T:Xceed.Ftp.StringList"/> collection contain a list
            of unprocessed strings each representing an item <paramref name="folder"/>. 
            For example: <i>"07-25-03  11:46AM                  101 001fdf63.xml"</i>. Of course,
            the format of the strings returned by the FTP server can vary from server to server.
            </returns><remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change 
            the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> method instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the GetRawFolderContents methods.</note></para>
            <para>The GetRawFolderContents method will send the LIST and PASV or PORT and TYPE 
            commands to the FTP server.
            </para></remarks><seealso cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred.</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String)">
            <summary>
            Receives the specified file from the current working folder and stores it on the local 
            system using the specified path and filename.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ReceiveFile method will send the RETR and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String,System.Boolean)">
            <summary>
            Receives the specified file from the current working folder and stores it on the local 
            system using the specified path and filename and indicates if the file should append itself to 
            the local file if it already exists.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            local file if it already exists; <see langword="false"/> if the local file should be
            overwritten.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ReceiveFile method will send the RETR and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String)">
            <summary>
            Receives the specified file from the current working folder starting from the specified offset 
            and stores it on the local system using the specified path and filename.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file.</param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ReceiveFile method will send the RETR, REST and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String,System.Boolean)">
            <summary>
            Receives the specified file from the current working folder starting from the specified offset 
            and stores it on the local system using the specified path and filename indicating if the file should 
            append itself to the local file if it already exists.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file. If <paramref name="append"/> is <see langword="true"/>, the remote file will 
            be appended to the end of the local file no matter what the value of <paramref name="offset"/>. 
            Therefore, to implement a real resume procedure, the size of the local file must be specified in 
            <paramref name="offset"/> and <paramref name="append"/> must be set to <see langword="true"/>.</param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            local file if it already exists; <see langword="false"/> if the local file should be
            overwritten.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The ReceiveFile method will send the RETR, REST and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.IO.Stream)">
            <summary>
            Receives the specified file from the current working folder to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="destination">A reference to the <see cref="T:System.IO.Stream"/> to which
            to receive the file.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            The destination stream must be writable (<see cref="P:System.IO.Stream.CanWrite"/>)
            and must be closed by the user.
            </note></para><para><note>When using this overload of the ReceiveFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>.
            </note></para><para>The ReceiveFile method will send the RETR and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Receives the specified file from the FTP server's current working folder into the specified 
            <see cref="T:System.IO.Stream"/>, starting from the specified offset.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file.</param>
            <param name="destination">A reference to the <see cref="T:System.IO.Stream"/> to which
            to receive the file.</param>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            The destination stream must be writable (<see cref="P:System.IO.Stream.CanWrite"/>)
            and must be closed by the user.
            </note></para><para><note>When using this overload of the ReceiveFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>.
            </note></para><para>The ReceiveFile method will send the RETR, REST and PORT or PASV commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Receives the files that match the provided file mask from the current working folder and stores them on 
            the local system in the specified folder.
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to receive. This parameter 
            can include a filtering mask to limit the files that are received. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be received. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be received. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
            <param name="recursive"><see langword="true"/> if the files in child folders should also be received;
            <see langword="false"/> otherwise.</param>
            <param name="recreateFolderStructure"><see langword="true"/> if the remote directory structure
            should be recreated on the local machine; <see langword="false"/> otherwise.</param>
            <remarks><para>
            If a folder is specified in <paramref name="remoteFileMask"/>, for example "MyFiles/*" and
            <paramref name="recreateFolderStructure"/> is set to <see langword="true"/>, the "MyFiles" 
            folder will be recreated locally in <paramref name="localFolder"/>. If only a file mask is
            specified in <paramref name="remoteFileMask"/>, the files/folders will be recreated directly in 
            <paramref name="localFolder"/>.</para><para>
            By default, the files that match the provided file mask will be received from the current working folder. If you want 
            to receive the files from another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            By default, if an error occurs during the multiple-file transfer, the <b>entire</b>  operation
            will be aborted. To change this behavior, the <see cref="E:Xceed.Ftp.FtpClient.MultipleFileTransferError"/> event
            must be handled and its <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action"/> property set to
            either Retry or Ignore.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the ReceiveMultipleFiles method during the initial listing phase.</note></para>
            <para>The ReceiveMultipleFiles method will send the LIST, RETR, PASV or PORT, TYPE, PWD and CWD 
            commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred.</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String)">
            <summary>
            Sends the specified file to the FTP server's current working folder and stores it using the same
            filename.
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <remarks><para>
            The file will be sent to the current working folder, using the same filename. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The SendFile method will send the STOR and PASV or PORT commands and 
            optionally the TYPE and ALLO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.Boolean)">
            <summary>
            Sends the specified file to the FTP server's current working folder using the same filename and 
            indicating if it should append itself to the remote file if it already exists.
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <remarks><para>
            The file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The SendFile method will send the PASV or PORT and the STOR or APPE commands and 
            optionally the TYPE and ALLO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String)">
            <summary>
            Sends the specified file to the FTP server's current working folder and stores it using the 
            specified filename.
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            If the remote file already exists, it will be overwritten.
            </note></para><para>The SendFile method will send the PASV or PORT and STOR commands and 
            optionally the TYPE and ALLO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String,System.Boolean)">
            <summary>
            Sends the specified file to the FTP server's current working folder, indicating if it should 
            append itself to the remote file if it already exists, and stores it using the 
            specified filename.
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The SendFile method will send the PASV or PORT and STOR or APPE commands and 
            optionally the TYPE and ALLO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Sends the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's current working 
            folder, indicating if it should append itself to the remote file if it already exists,
            and stores it using the specified filename.
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>When using this overload of the SendFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para>The SendFile method will send the PASV or PORT and STOR or APPE commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred.</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String)">
            <summary>
            Sends the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's current working folder.
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder. Absolute paths can also be 
            provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>When using this overload of the SendFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para>The SendFile method will send the PASV or PORT and STOR or APPE commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred.</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.String)">
            <summary>
            Sends the specified file to the FTP server's current working folder and stores it using a 
            unique filename.
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <returns>A string representing the unique name that was generated for the file
            that was sent to the FTP server.</returns>
            <remarks><para>
            The file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para>The SendFileToUniqueName method will send the STOU and PASV or PORT commands and 
            optionally the TYPE and ALLO commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.IO.Stream)">
            <summary>
            Sends the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's current working folder
            and stores it using a unique filename.
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <returns>A string representing the unique name that was generated for the file
            that was sent to the FTP server.</returns>
            <remarks><para>
            The file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note>When using this overload of the SendFileToUniqueName method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para>The SendFileToUniqueName method will send the STOU and PASV or PORT commands and 
            optionally the TYPE command to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendMultipleFiles(System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends the files that match the provided file mask to the FTP server's current working folder.
            </summary>
            <param name="localFileMask">The full path and file mask of the local files to send. This parameter 
            can include a filtering mask to limit the files that are sent. For example, 
            if "c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. 
            If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the TXT extension 
            will be sent. The "temp" folder will not be recreated on the FTP server.</param>
            <param name="recursive"><see langword="true"/> if the files in child folders should also be 
            sent; <see langword="false"/> otherwise.</param>
            <param name="recreateFolderStructure"><see langword="true"/> if the local directory structure
            should be recreated on the FTP server; <see langword="false"/> otherwise.</param>
            <remarks><para>
            The files that match the provided file mask will be sent to the current working folder. If you want to 
            send the files to another location, you could use the <see cref="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand)"/> and/or
            <see cref="M:Xceed.Ftp.FtpClient.ChangeToParentFolder"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.FtpClient.GetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand)"/> method.
            </para><para><note type="caution">
            By default, if an error occurs during the multiple-file transfer, the <b>entire</b>  operation
            will be aborted. To change this behavior, the <see cref="E:Xceed.Ftp.FtpClient.MultipleFileTransferError"/> event
            must be handled and its <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action"/> property set to
            either Retry or Ignore.
            </note></para><para>The SendMultipleFiles method will send the STOR and PASV or PORT commands and 
            optionally the PWD, TYPE, ALLO, CWD and MKD commands to the FTP server.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String)">
            <summary>
            Retrieves a direct access to the <b>readonly</b>  data stream being received.
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <returns>The data <see cref="T:System.IO.Stream"/> to read from.</returns>
            <remarks><para><note>
            The FTP client will remain in a "ReceivingFile" state until the stream is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String,System.Int64)">
            <summary>
            Retrieves a direct access to the <b>readonly</b>  data stream being received, beginning at the specified offset.  
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
            <returns>The data <see cref="T:System.IO.Stream"/> to read from</returns>
            <remarks><para><note>
            The FTP client will remain in a "ReceivingFile" state until the stream is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String)">
            <summary>
            Retrieves a direct access to the <b>write-only</b>  data stream to send to.
            </summary>
            <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
            <returns>The data <see cref="T:System.IO.Stream"/> to write to.</returns> 
            <remarks><para><note>The FTP client remains in a "SendingFile" state until the stream is closed.</note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String,System.Boolean)">
            <summary>
            Retrieves a direct access to the <b>write-only</b>  data stream to send to, indicating if existing
            data should be overwritten or appended to.
            </summary>
            <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if existing data should be appended to; <see langword="false"/> otherwise.</param>
            <returns>The data <see cref="T:System.IO.Stream"/> to write to.</returns> 
            <remarks><para><note>The FTP client remains in a "SendingFile" state until the stream is closed.</note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.SendCustomCommand(System.String)">
            <summary>
            Sends a <b>custom</b> command to the FTP server.
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <returns>The reply received from the FTP server in response to the custom command.</returns>
            <remarks><para>
            The SendCustomCommand method is used to send <b>FTP</b> commands. This means that 
            commands you enter using the Windows command-line FTP (such as "dir", "put" or "debug") are not the 
            commands that are actually sent to the FTP server. Although these commands <b>might</b>  be recognized by 
            some FTP servers, they are <b>not guaranteed to  work!</b>.
            </para><para>
            When sending a custom FTP command, the local folder separator character will <b>not</b> be replaced
            by the <see cref="P:Xceed.Ftp.FtpClient.ServerFolderSeparator"/> to allow the local folder separator character to be sent
            "as is".
            </para><para>
            Not all commands are supported by all FTP servers. In order to determine which
            commands are supported, you can use the SendCustomCommand method to send the
            "HELP" command. For example: ftp.SendCustomCommand( "HELP" );.
            </para><para><note type="caution">
            The SendCustomCommand method does <b>not</b> support custom commands that require a data 
            connection such as STOR (<see cref="M:Xceed.Ftp.FtpClient.SendFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.SendFileFtpCommandSequence)"/>), RETR (<see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveFileFtpCommandSequence)"/>), 
            NLST and LIST (<see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>), etc.
            </note></para><para>
            This method is the equivalent of the SendCommand method of the ActiveX version 
            of the Xceed FTP Library.
            </para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpReplyException">An error reply was returned by the FTP server.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="M:Xceed.Ftp.FtpClient.Abort">
            <summary>
            Aborts the current FTP command. 
            </summary>
            <remarks><para>The Abort method will send the ABOR command to the FTP server.
            </para><para>
            This method is the equivalent of the Abort property of the ActiveX version 
            of the Xceed FTP Library.
            </para><para><note>
            Any data connection will be disconnected before reading the reply to the Abort (ABOR) command.
            </note></para></remarks>
            <exception cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.</exception>
            <exception cref="T:Xceed.Ftp.FtpIOException">An I/O error has occurred.</exception>
            <exception cref="T:Xceed.Ftp.FtpInternalException">A fatal FTP-specific error has occurred..</exception>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.PassiveTransfer">
            <summary>
            Gets or sets a boolean value indicating if the FTP client should initiate the data
            connection rather than the FTP server. 
            </summary>
            <value><see langword="true"/> if the FTP client should initiate the data
            connection; <see langword="false"/> otherwise. By default, this property
            is set to <see langword="true"/>.</value>
            <remarks><para>
            If set to <see langword="true"/>, the PASV command will be sent to the FTP server
            rather than the PORT command resulting in the FTP server "listening" on a data port
            (other than its default) and waiting for a data connection to be established by the
            FTP client. If set to <see langword="false"/>, the PORT command will be sent and the FTP client will be 
            listening for an incoming data connection. The FTP server will establish the data connection upon 
            receipt of a transfer command.
            </para><para>
            The reply to the PASV command includes the host and port address the FTP server
            is listening on.
            </para><para><note>
            If you are having issues connecting or sending and receiving files to and from a server,
            try setting the PassiveTransfer property to <see langword="true"/>.</note>
            </para><para>
            This property is the equivalent of the PassiveMode property of the ActiveX version
            of the Xceed FTP Library.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.RepresentationType">
            <summary>
            Gets or sets a value indicating how the data is transferred to and from the FTP server.
            </summary>
            <value>An <see cref="P:Xceed.Ftp.FtpClient.RepresentationType"/> value indicating how the data is transferred
            to and from the FTP server. By default, this property is set to RepresentationType.Binary.</value>
            <remarks><para>
            If set to RepresentationType.Binary (default), the data will be sent/received as contiguous 
            bits which are packed into the 8-bit transfer bytes. If set to RepresentationType.Ascii, 
            it will be sent/received using the standard 8-bit NVT-ASCII representation. 
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.PreAllocateStorage">
            <summary>
            Gets or sets a boolean value indicating if the FTP server must reserve enough 
            space <b>before</b> a file is sent.
            </summary>
            <value><see langword="true"/> if the FTP server must reserve space <b>before</b>
            a file is sent; <see langword="false"/> otherwise. By default, this property is set 
            to <see langword="false"/>.</value>
            <remarks><para>
            If set to <see langword="true"/>, the "ALLO file_size" FTP command will be sent to the FTP server
            to allocate sufficient space before the file is sent.
            </para><para>
            This property is the equivalent of the AllocateStorage property of the ActiveX 
            version of the Xceed FTP Library.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ListingParsers">
            <summary>
            Gets a collection of <see cref="T:Xceed.Ftp.FtpListingParser"/> objects that are used to parse 
            the lines returned by calls to various methods.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.FtpListingParserList"/> collection containing a list
            of <see cref="T:Xceed.Ftp.FtpListingParser"/> objects that are used to parse the lines
            returned by calls to the <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>, <see cref="M:Xceed.Ftp.FtpClient.SendMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.SendMultipleFilesFtpCommandSequence)"/> and
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveMultipleFilesFtpCommandSequence)"/> methods.</value>
            <remarks><para>
            By default, the FtpClient class provides line parsers for AS400, DOS (Windows), 
            UNIX and VMS FTP servers. To manually parse list lines received from
            the FTP server, you can use the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event.
            </para><para><note type="inheritinfo">
            If you want to support other FTP servers and provide your own line parser, you will need
            to create a class that derives from the <see cref="T:Xceed.Ftp.FtpListingParser"/> class
            and add it to the ListingParsers collection.
            </note></para><para>
            This property can be considered to be the equivalent of the ListParsingFlags property 
            of the ActiveX version of the Xceed FTP Library.
            </para></remarks><seealso cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> which will trace the connection/deconnection 
            process as well as the commands and replies sent to and received from the FTP server.
            </summary>
            <value>A reference to a <see cref="T:System.IO.TextWriter"/> which will trace the connection/deconnection 
            process as well as the commands and replies sent to and received from the FTP server. By default 
            this property is set to <see langword="null"/> therefore no tracing is done.</value>
            <remarks><para><note type="caution">
            The FTP client will <b>not</b>  dispose/close the writer.
            </note></para><para>
            This method is the equivalent of the CommandLogFilename property of the ActiveX version of the 
            Xceed FTP Library.
            </para></remarks>
            <example>
            The following example demonstrates how to write to a StreamWriter.
            <code lang="Visual Basic">
            Dim ftp As New FtpClient()
            
            ftp.TraceWriter = New StreamWriter( "d:\ftp.log" )</code>
            <code lang="C#">
            FtpClient ftp = new FtpClient();
            
            ftp.TraceWriter = new StreamWriter( @"d:\ftp.log" );
            </code></example>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.State">
            <summary>
            Gets a value indicating the current state of the FTP client.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.FtpClientState"/> value representing the current state of the FTP
            client.</value>
            <remarks><para>
            This property is the equivalent of the CurrentState property of the ActiveX 
            version of the Xceed FTP Library.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Connected">
            <summary>
            Gets a boolean value indicating if the FTP client is connected to an FTP server. For
            detailed state information, consult the <see cref="P:Xceed.Ftp.FtpClient.State"/> property.
            </summary>
            <value><see langword="true"/> if the FTP client is connected to an FTP server;
            <see langword="false"/> otherwise.</value>
            <seealso cref="P:Xceed.Ftp.FtpClient.State"/>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Busy">
            <summary>
            Gets a boolean value indicating if the FTP client is currently performing an FTP operation. For
            detailed state information, consult the <see cref="P:Xceed.Ftp.FtpClient.State"/> property.
            </summary>
            <value><see langword="true"/> if the FTP client is currently performing an
            FTP operation; <see langword="false"/> otherwise.</value>
            <seealso cref="P:Xceed.Ftp.FtpClient.State"/>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ServerAddress">
            <summary>
            Gets the IP address and port to which the FTP client is connected.
            </summary>
            <value>A reference to an <see cref="T:System.Net.IPEndPoint"/> object representing the
            IP address and port to which the FTP client is connected. Can be <see langword="null"/>
            if the FTP client is not connected to an FTP server.</value>
            <remarks><para>
            The IP address of the FTP server can be retreived via the 
            <see cref="P:System.Net.IPEndPoint.Address"/> property while the port can be retrieved
            via the <see cref="P:System.Net.IPEndPoint.Port"/> property.
            </para><para>
            This property can be considered to be the equivalent of the ServerAddress and 
            ServerPort properties of the ActiveX version of the Xceed FTP Library.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.HostName">
            <summary>
            Gets the host name used to connect, or an empty string if not connected.
            </summary>
            <value>A string representing the host name. If the connection was made with an IPEndPoint, 
            a dotted format IP address will be returned.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.SendTypeCommand">
            <summary>
            Gets or sets a boolean value indicating if the TYPE command should be sent before 
            initiating a file transfer.
            </summary>
            <value><see langword="true"/> if the TYPE command should be sent before initiating
            a file transfer; <see langword="false"/> otherwise. By default, this property is
            set to <see langword="true"/>.</value>
            <remarks><para><note type="caution">
            The TYPE command will be sent regardless of the value of the SendTypeCommand property when 
            calling the <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>, <see cref="M:Xceed.Ftp.FtpClient.GetRawFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/> or 
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveMultipleFilesFtpCommandSequence)"/> method (when retrieving a remote folder's listing).
            </note></para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.Timeout">
            <summary>
            Gets or sets a value, in seconds, indicating after what period of time an FTP operation 
            should timeout.
            </summary>
            <value>A value, in seconds, representing the period of time after which an FTP operation 
            should timeout. By default, this property is set to 30 seconds.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.LocalAddress">
            <summary>
            Gets or sets the local IP address and port from which the FTP client is connected.
            </summary>
            <value>A reference to an <see cref="T:System.Net.IPEndPoint"/> object representing the local
            IP address and port from which the FTP client is connected. If 0 (default) is
            specified for the port, a random port will be used. Can return <see langword="null"/>
            if the FTP client is not connected to an FTP server. Can be set to <see langword="null"/> 
            (default) to use the default network adapter.</value>
            <remarks><para>
            Normally this property can be ignored, however if your client machine has more than one
            network card, the IP address of the card to use can be specified via this property. IPAddress.Any (default)
            can also be used to let the operating system decide which network card to use.
            </para><para>
            The IP address of the FTP client can be retreived via the 
            <see cref="P:System.Net.IPEndPoint.Address"/> property while the port can be retrieved
            via the <see cref="P:System.Net.IPEndPoint.Port"/> property.</para><para> 
            Setting this property when already connected only affects the next connection.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.LocalDataAddress">
            <summary>
            Gets or sets the IP address and port of the client-side data connection to use in <b>subsequent</b>  
            data  connections. If <see cref="P:Xceed.Ftp.FtpClient.PassiveTransfer"/> is <see langword="false"/>, this property 
            represents the address of the client-side listening socket waiting for the server’s data 
            connection request. 
            </summary>
            <value>If <see langword="null"/>, <see cref="P:Xceed.Ftp.FtpClient.LocalAddress"/>.Address + random port (0) will be used.
            If LocalAddress.Address is IPAddress.Any, LocalAddress.Address + LocalDataAddress.Port will be used.</value>
            <remarks><para>
            Normally this property can be ignored, however if your client machine has more than one
            network card, the IP address of the card to use can be specified via this property. 
            IPAddress.Any (default) can also be used to let the operating system decide which network 
            card to use.
            </para><para>
            The IP address of the FTP client can be retreived via the <see cref="P:System.Net.IPEndPoint.Address"/> property 
            while the port can be retrieved via the <see cref="P:System.Net.IPEndPoint.Port"/> property.</para><para> 
            Setting this property when already connected only affects the next connection.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpClient.ServerFolderSeparator">
            <summary>
            Gets or sets the FTP server's folder separator character.
            </summary>
            <value>A char representing the FTP server's folder separator character. By default, '/'.</value>
            <remarks><para>
            All methods will automatically change the local system's folder separator character (represented by
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>) to the ServerFolderSeparator character and 
            vice-versa when the method returns. Listing lines will also contain the modified folder separator 
            character.
            </para><para>
            If you do not want the folder separator characters to be modified, you can set the 
            ServerFolderSeparator property to <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </para><para><note>Only standard ASCII chars are permitted.</note></para></remarks>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ParsingListingLine">
            <summary>
            Raised when a listing line is received from the FTP server.
            </summary>
            <remarks><para>
            If e.Valid is <see langword="true"/> when the event is raised, at least one parser succeeded in 
            parsing the listing line and e.Item has been filled with the parsed information. To filter (remove) an 
            item from the listing set e.Valid to <see langword="false"/>. The content of e.Item can also
            be modified if you want to change the item's information.</para>
            <para>If e.Valid is <see langword="false"/> when the event is raised, none of the 
            parsers succeeded in parsing the listing line. In this case you can provide your own parsing, fill 
            e.Item and set e.Valid to <see langword="true"/>.</para><para>
            Calls to the <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand)"/>, <see cref="M:Xceed.Ftp.FtpClient.SendMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.SendMultipleFilesFtpCommandSequence)"/> and 
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveMultipleFilesFtpCommandSequence)"/> methods will raise this event.
            </para><para>
            This event is the equivalent of the ParsingListLine event of the ActiveX 
            version of the Xceed FTP Library.
            </para></remarks><seealso cref="P:Xceed.Ftp.FtpClient.ListingParsers"/>
            <example>
            The following example demonstrates how to use the ParsingListingLine event to remove the "." and
            ".." FTP items from the listing.
            <code lang="Visual Basic">
            Dim ftp As New FtpClient()
            
            AddHandler ftp.PasrsingListingLine, AddressOf Me.parsing_line
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.GetFolderContents()
            
            ftp.Disconnect()
            
            Private void parsing_line( ByVal sender As Object, ByVal e As ParsingListingLineEventArgs )
              If( e.Item.Name = "." ) Or ( e.Item.Name = ".." ) Then
                e.Valid = False
              Else
                ListBox1.Items.Add( e.Item.Name )
              End If
            End Sub
            </code>
            <code lang="C#">
            FtpClient ftp = new FtpClient();
            ftp.ParsingListingLine += new ParsingListingLineEventHandler( this.parsing_line );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.GetFolderContents();
            
            ftp.Disconnect();
            
            private void parsing_line( object sender, ParsingListingLineEventArgs e )
            {
              if( ( e.Item.Name == "." ) || ( e.Item.Name == ".." ) )
              {
                e.Valid = false;
              }
              else
              {
                listBox1.Items.Add( e.Item.Name );        
              }  
            }  
            </code></example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CommandSent">
            <summary>
            Raised once for every command sent to the FTP server. 
            </summary>
            <remarks><para>
            To be notified when a reply is received from the FTP server, subscribe to the
            <see cref="E:Xceed.Ftp.FtpClient.ReplyReceived"/> event.
            </para><para>
            This event is the equivalent of the LoggingCommandLine event of the ActiveX 
            version of the Xceed FTP Library.
            </para></remarks>
            <example>
            The following example demonstrates how to use the CommandSent event to display logging information.
            Normally, the replies that are received from the FTP server would also be displayed via the
            <see cref="E:Xceed.Ftp.FtpClient.ReplyReceived"/> event.
            
            This example assumes that you are in a Windows application and that the form contains a listbox.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.CommandSent, AddressOf Me.command_sent
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.GetFolderContents()
            
            ftp.Disconnect()
            
            Private Sub command_sent( ByVal sender As Object, ByVal e As CommandSentEventArgs )
            
              listBox1.Items.Add( "&gt;&gt; " + e.Command )
              listBox1.SelectedItem = listBox1.Items.Count - 1
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.CommandSent += new CommandSentEventHandler( this.command_sent );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.GetFolderContents();
            
            ftp.Disconnect();
            
            private void command_sent( object sender, CommandSentEventArgs e )
            {
              listBox1.Items.Add( "&gt;&gt; " + e.Command );
              listBox1.SelectedItem = listBox1.Items.Count - 1;
            }
            </code></example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ReplyReceived">
            <summary>
            Raised once for each reply received from the FTP server. If a reply contains multiple
            lines, they will be received as a group.
            </summary>
            <remarks><para>
            To be notified when a command is sent to the FTP server, subscribe to the
            <see cref="E:Xceed.Ftp.FtpClient.CommandSent"/> event.
            </para><para>
            This event is the equivalent of the LoggingCommandLine event of the ActiveX 
            version of the Xceed FTP Library.
            </para></remarks>
            <example>
            The following example demonstrates how to use the ReplyReceived event to display logging information.
            Normally, the commands that are sent to the FTP server would also be displayed via the
            <see cref="E:Xceed.Ftp.FtpClient.CommandSent"/> event.
            
            This example assumes that you are in a Windows application and that the form contains a listbox.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.ReplyReceived, AddressOf Me.reply_received
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.GetFolderContents()
            
            ftp.Disconnect()
            
            Private Sub reply_received( ByVal sender As Object, ByVal e As ReplyReceivedEventArgs )
            
              Dim line As String
              For Each line in e.Reply.Lines
              
                listBox1.Items.Add( "&lt;&lt;" + line )
                listBox1.SelectedItem = listBox1.Items.Count - 1
              Next line 
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.ReplyReceived += new ReplyReceivedEventHandler( this.reply_received );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.GetFolderContents();
            
            ftp.Disconnect();
            
            private void reply_received( object sender, ReplyReceivedEventArgs e )
            {
              foreach( string line in e.Reply.Lines )
              {
                listBox1.Items.Add( "&lt;&lt;" + line );     
              }
              
              listBox1.SelectedItem = listBox1.Items.Count - 1;
            }
            </code></example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.Disconnected">
            <summary>
            Raised when the <see cref="M:Xceed.Ftp.FtpClient.Disconnect"/> method is called as well as when the
            connection is terminated by the FTP server.
            </summary><seealso cref="M:Xceed.Ftp.FtpClient.Disconnect"/>
            <example>
            The following example demonstrates how to use the Disconnected event to display a messagebox when the
            FTP client is disconnected from the FTP server. This example assumes that you are in a 
            Windows application.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.Disconnected, AddressOf Me.disconnected
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.GetFolderContents()
            
            ftp.Disconnect()
            
            Private Sub disconnected( ByVal sender As Object, ByVal e As EventArgs )
            
              MessageBox.Show( "You are no longer connected to the FTP server!" )
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.Disconnected += new EventHandler( this.disconnected );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.GetFolderContents();
            
            ftp.Disconnect();
            
            private void disconnected( object sender, EventArgs e )
            {
              MessageBox.Show( "You are no longer connected to the FTP server!" );
            }
            </code></example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.FileTransferStatus">
            <summary>
            Raised for every 4Kb sent or received during a file transfer.
            </summary>
            <remarks><para><note>
            When receiving files with the <see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveFileFtpCommandSequence)"/> method, some FTP servers will not provide 
            the size of the file currently being received and therefore, some values 
            of the <see cref="T:Xceed.Ftp.FileTransferStatusEventArgs"/> will be 0. If you require these particular 
            statistics, you can use the <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveMultipleFilesFtpCommandSequence)"/> method instead of the 
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveFileFtpCommandSequence)"/> method. The ReceiveMultipleFiles method requests a complete listing from the 
            FTP server before receiving any files. The FTP client therefore obtains the file sizes of each 
            file being received and can then provide these statistics during the FileTransferStatus event. If you 
            use this technique, keep in mind that the receive operation will be slightly slower (due to the extra 
            listing operation) and that it will not be possible to change the local filename of the file.
            </note></para></remarks>
            <example>
            The following example demonstrates how to use the FileTransferStatus event to display progress
            information during a multiple-file transfer. 
            
            This example assumes that you are in a Windows application and that the form contains 2 labels and 
            2 progress bars.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            ' Subscribe to the FileTransferStatus event.
            AddHandler ftp.FileTransferStatus, AddressOf Me.file_transfer
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.ReceiveMultipleFiles( "ClientFiles\*", "d:\", True, True )
            
            ftp.Disconnect()
            
            Private Sub file_transfer( ByVal sender As Object, ByVal e As FileTransferStatusEventArgs )
            
              If e.BytesTransferred = 0 Then
                label2.Text = "Receiving file " + e.LocalFilename
                label1.Text = "Receiving file #" + e.FilesTransferred.ToString() + " of " + e.FilesTotal.ToString()
              
                label1.Refresh()
                label2.Refresh()
              End If
              
              progressBar2.Value = e.BytesPercent
              progressBar1.Value = e.AllBytesPercent
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            // Subscribe to the FileTransferStatus event.
            ftp.FileTransferStatus += new FileTransferStatusEventHandler( this.file_transfer );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.ReceiveMultipleFiles( @"ClientFiles\*", @"d:\", true, true );
            
            ftp.Disconnect();
            
            private void file_transfer( object sender, FileTransferStatusEventArgs e )
            {
              if( e.BytesTransferred == 0 )
              {
                label2.Text = "Receiving file " + e.LocalFilename;
                label1.Text = "Receiving file #" + e.FilesTransferred.ToString() + " of " + e.FilesTotal.ToString();
              
                label1.Refresh();
                label2.Refresh();
              }
              
              progressBar2.Value = e.BytesPercent;      
              progressBar1.Value = e.AllBytesPercent;      
            }
            </code></example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.SendingFile">
            <summary>
            Raised for each file being sent to the FTP server.
            </summary>
            <remarks><para><note>
            When using overloads of the <see cref="M:Xceed.Ftp.FtpClient.SendFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.SendFileFtpCommandSequence)"/> method that take a 
            <see cref="T:System.IO.Stream"/> as a parameter, the value of the 
            <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> property will be <see cref="F:System.String.Empty"/>.
            </note></para></remarks>
            <example>
            The following example demonstrates how to use the SendingFile event to display the name of the
            file(s) being sent to the FTP server.
            
            This example assumes that you are in a Windows application and that the form contains a listbox.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.SendingFile, AddressOf Me.sending_file
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.SendMultipleFiles( "C:\Demos\*", True, True )
            
            ftp.Disconnect()
            
            Private Sub sending_file( ByVal sender As Object, ByVal e As TransferringFileEventArgs )
            
              listBox1.Items.Add( "SENDING " + e.LocalFilename.ToUpper() + " TO " + e.RemoteFilename.ToUpper() )
              listBox1.Refresh()
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.SendingFile += new TransferringFileEventHandler( this.sending_file );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.SendMultipleFiles( @"C:\Demos\*", true, true );
            
            ftp.Disconnect();
            
            private void sending_file( object sender, TransferringFileEventArgs e )
            {      
              listBox1.Items.Add( "SENDING " + e.LocalFilename.ToUpper() + " TO " + e.RemoteFilename.ToUpper() );
              listBox1.Refresh();      
            }
            </code>
            </example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.ReceivingFile">
            <summary>
            Raised for each file being received from the FTP server.
            </summary>
            <remarks><para><note>
            When using overloads of the <see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveFileFtpCommandSequence)"/> method that take a 
            <see cref="T:System.IO.Stream"/> as a parameter, the value of the 
            <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> property will be <see cref="F:System.String.Empty"/>.
            </note></para></remarks>
            <example>
            The following example demonstrates how to use the ReceivingFile event to display the name of the
            file(s) being received from the FTP server.
            
            This example assumes that you are in a Windows application and that the form contains a listbox.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.ReceivingFile, AddressOf Me.receiving_file
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.ReceiveMultipleFiles( "ClientFiles\*", "d:\", True, True )
            
            ftp.Disconnect()
            
            Private Sub receiving_file( ByVal sender As object, ByVal e As TransferringFileEventArgs )
            
              listBox1.Items.Add( "RECEIVING " + e.RemoteFilename.ToUpper() + " TO " + e.LocalFilename.ToUpper() )
              listBox1.Refresh()
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.ReceivingFile += new TransferringFileEventHandler( this.receiving_file );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.ReceiveMultipleFiles( @"ClientFiles\*", @"d:\", true, true );
            
            ftp.Disconnect();
            
            private void receiving_file( object sender, TransferringFileEventArgs e )
            {
              listBox1.Items.Add( "RECEIVING " + e.RemoteFilename.ToUpper() + " TO " + e.LocalFilename.ToUpper() );
              listBox1.Refresh();      
            }
            </code>
            </example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.StateChanged">
            <summary>
            Raised when the <see cref="P:Xceed.Ftp.FtpClient.State"/> of the FTP client changes.
            </summary>
            <example>
            The following example demonstrates how to use the StateChanged event to display the state of the
            FTP client.This example assumes that you are in a Windows application and that the 
            form contains a label.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.StateChanged, AddressOf Me.state_changed
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.ReceiveMultipleFiles( "ClientFiles\*", "d:\", True, True )
            
            ftp.Disconnect()
            
            Private Sub state_changed( ByVal sender As Object, ByVal e As EventArgs )
            
              label1.Text = CType( sender, FtpClient ).State.ToString()
              label1.Refresh()
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.StateChanged += new EventHandler( this.state_changed );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.ReceiveMultipleFiles( @"ClientFiles\*", @"d:\", true, true );
            
            ftp.Disconnect();
            
            private void state_changed( object sender, EventArgs e )
            {
              label1.Text = ( ( FtpClient )sender ).State.ToString();
              label1.Refresh();
            }
            </code>
            </example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.MultipleFileTransferError">
            <summary>
            Raised when an error occurs while transferring <b>multiple</b>  files to or from the FTP server
            to determine what action should be taken.
            </summary>
            <remarks><para>
            This event can only be raised by the <see cref="M:Xceed.Ftp.FtpClient.SendMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.SendMultipleFilesFtpCommandSequence)"/> or 
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ReceiveMultipleFilesFtpCommandSequence)"/> methods.
            </para><para><note type="caution">
            Other methods of the FTP client must not be called in this event handler! For example,
            <see cref="M:Xceed.Ftp.FtpClient.DeleteFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.DeleteFileFtpCommand)"/> cannot be called to delete an existing file so that the file transfer
            (for that particular file) can be retried.</note></para></remarks>
            <example>
            The following example demonstrates how to use the MultipleFileTransferError event to continue 
            downloading during the multiple-file transfer even when one of the files causes an error.
            This example assumes that you are in a Windows application and that the form contains a listbox.
            <code lang="Visual Basic">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY"
            
            Dim ftp As New FtpClient()
            
            AddHandler ftp.MultipleFileTransferError, AddressOf Me.transfer_error
            
            ftp.Connect( "localhost" )
            ftp.Login()
            
            ftp.ChangeCurrentFolder( "ClientFiles" )
            ftp.ReceiveMultipleFiles( String.Empty, "C:\ClientFiles", False, False )
            
            ftp.Disconnect()
            
            Private Sub transfer_error( ByVal sender As Object, ByVal e As MultipleFileTransferErrorEventArgs )
            
              If TypeOf e.Exception Is FtpReplyException Then
                ListBox1.Items.Add("Unable to transfer " + e.RemoteItemName + ". The message returned by the FTP server was : " + e.Exception.Message)
                e.Action = MultipleFileTransferErrorAction.Ignore
              End If
            End Sub
            </code>
            <code lang="C#">
            Xceed.Ftp.Licenser.LicenseKey = "SAMPLE-APPLICATION-KEY";
            
            FtpClient ftp = new FtpClient();
            
            ftp.MultipleFileTransferError += new MultipleFileTransferErrorEventHandler( this.transfer_error );
            
            ftp.Connect( "localhost" );
            ftp.Login();
            
            ftp.ChangeCurrentFolder( "ClientFiles" );
            ftp.ReceiveMultipleFiles( string.Empty, @"C:\ClientFiles", false, false );
            
            ftp.Disconnect();
            
            private void transfer_error( object sender, MultipleFileTransferErrorEventArgs e )
            {
              FtpReplyException exception = e.Exception as FtpReplyException;
              
              if( exception != null )
              {
                listBox1.Items.Add( "Unable to transfer " + e.RemoteItemName + ". The message returned by the FTP server was : " + e.Exception.Message ); 
                e.Action = MultipleFileTransferErrorAction.Ignore; 
              }
            }
            </code>
            </example>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CertificateRequired">
            <summary>
            Raised when a client certificate is required by the FTP server, or the one provided 
            (if e.Certificate is not <see langword="null"/>) was rejected.
            </summary>
        </member>
        <member name="E:Xceed.Ftp.FtpClient.CertificateReceived">
            <summary>
            Raised when an FTP server's certificate was received and verified.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.#ctor">
            <summary>
            Initializes a new instance of the AsyncFtpClient class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAbort(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of aborting the current FTP command. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAbort(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>    
            <remarks><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAbort(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndAbort with it when ready to complete. 
            In this later case, the call to EndAbort may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndAbort(System.IAsyncResult)">
            <summary>
            Ends the process of aborting the current FTP command
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the connection process of the FTP client to an FTP server on port 21. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/>!
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> methods to log-in to the FTP server.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndConnect with it when ready to complete. 
            In this later case, the call to EndConnect may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Begins the connection process of the FTP client to a <b>secure</b> FTP server on port 21. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/>!
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> methods to log-in to the FTP server.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndConnect with it when ready to complete. 
            In this later case, the call to EndConnect may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins the connection process of the FTP client to an FTP server using the specified hostname and port. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/>!
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 
            21 will be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> methods to log-in to the FTP server.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndConnect with it when ready to complete. 
            In this later case, the call to EndConnect may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Begins the connection process of the FTP client to a <b>secure</b> FTP server using the 
            specified hostname and port. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/>!
            </summary>
            <param name="hostName">The hostname of the FTP server to connect to. An IP address
            can also be used.</param>
            <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 
            21 will be used.</param>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> methods to log-in to the FTP server.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndConnect with it when ready to complete. 
            In this later case, the call to EndConnect may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins the connection of the FTP client to an FTP server using the specified <see cref="T:System.Net.IPEndPoint"/> 
            (IP address and port). Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/>!
            </summary>
            <param name="serverAddress">An <see cref="T:System.Net.IPEndPoint"/> representing the IP address 
            and port of the FTP server to connect to. If 0 is specified for the port, 21 will 
            be used.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            If the IP address contains a port (ie.: 192.168.0.42:2121) then the FTP client will connect
            on the specified port rather than port 21 (default).
            </note></para><para>
            This method will only connect you to the FTP server. Once connected, you must call the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.UserFtpCommand,Xceed.Ftp.Engine.PasswordFtpCommand,Xceed.Ftp.Engine.AccountFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> methods to log-in to the FTP server.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndConnect with it when ready to complete. 
            In this later case, the call to EndConnect may block until the operation completes.
            </note></para></remarks>
            <example>
            The following example demonstrates how to connect to an FTP server using
            an IPEndPoint. If you are using an IP address (ie: "192.168.0.128")
            or a server address (ie: "localhost" ), it is much simpler to use the overloads
            of the BeginConnect method that do not use an IPEndPoint.
            <code lang="Visual Basic">
            Dim ftp As New AsyncFtpClient()
                
            Dim host As IPHostEntry = Dns.Resolve( "localhost" )
            Dim endPoint As new IPEndPoint( host.AddressList( 0 ), 21 )
            
            Dim result As IAsyncResult = ftp.BeginConnect( endPoint, Nothing, Nothing )
            
            While Not result.IsCompleted
                Application.DoEvents()
            End While
            
            ftp.EndConnnect( result )
            </code><code lang="C#">
            AsyncFtpClient ftp = Asyncnew FtpClient();
            
            IPHostEntry host = Dns.Resolve( "localhost" );
            IPEndPoint endPoint = new IPEndPoint( host.AddressList[ 0 ], 21 );
            
            IAsyncResult result = ftp.BeginConnect( endPoint, null, null );
            
            while( !result.IsCompleted )
                Application.DoEvents();
                
            ftp.EndConnect( result );    
            </code></example>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends the connection process of the FTP client to an FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.AsyncCallback,System.Object)">
            <summary>
            Begins the authentification and encryption of the current FTP connection. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)"/>!
            </summary>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="dataProtection">How the data channels will be protected.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ConnectFtpCommand,System.AsyncCallback,System.Object)"/> method that requires an authentication method, verification flags
            and a client certificate can be used in the case where the FTP server does not allow authentication
            after the connection has been established.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndAuthenticate with it when ready to complete. 
            In this later case, the call to EndAuthenticate may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Begins the authentification and encryption of the current FTP connection. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)"/>!
            </summary>
            <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
            <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
            <param name="clientCertificate">The FTP client's certificate.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ConnectFtpCommand,System.AsyncCallback,System.Object)"/> method that requires an authentication method, verification flags
            and a client certificate can be used in the case where the FTP server does not allow authentication
            after the connection has been established.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndAuthenticate with it when ready to complete. 
            In this later case, the call to EndAuthenticate may block until the operation completes. 
            </note></para><para><note type="Caution">
            When using this overload of the BeginAuthenticate method, the data channel 
            is <b>not</b>  secured (DataChannelProtection.Clear).
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends the authentification and encryption of the current FTP connection.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            Begins the <b>anonymous</b> login process of the FTP client to the FTP server to which it is connected. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndLogin with it when ready to complete. 
            In this later case, the call to EndLogin may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the login process of the FTP client to the FTP server to which it is connected using the 
            specified username and password. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/>!
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndLogin with it when ready to complete. 
            In this later case, the call to EndLogin may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the login process of the FTP client to the FTP server to which it is connected using the specified username
            and password. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/>!
            </summary>
            <param name="userName">The username with which to login into the FTP server.</param>
            <param name="password">The password with which to login into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client must be connected to the FTP server prior to calling this method.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndLogin with it when ready to complete. 
            In this later case, the call to EndLogin may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)">
            <summary>
            Ends the login process of the FTP client to the FTP server to which it is connected.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of changing the currently logged-in user to the anonymous user without 
            disconnecting from the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndChangeUser with it when ready to complete. 
            In this later case, the call to EndChangeUser may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of changing the currently logged-in user to the specified user 
            without disconnecting from the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/>!
            </summary>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndChangeUser with it when ready to complete. 
            In this later case, the call to EndChangeUser may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of changing the currently logged-in user to the specified user and account 
            without disconnecting from the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/>!
            </summary>
            <param name="userName">The username with which to relogin into the FTP server.</param>
            <param name="password">The password with which to relogin into the FTP server.</param>
            <param name="accountName">The name of the account on the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndChangeUser with it when ready to complete. 
            In this later case, the call to EndChangeUser may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)">
            <summary>
            Ends the process of changing the currently logged-in user.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of disconnecting the FTP client from the FTP server to which it is connected. 
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDisconnect(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If the FTP client is in an invalid state, for example, sending a file, the BeginDisconnect method will throw 
            an exception. It is up to the user to call <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginAbort(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.AbortFtpCommand,System.AsyncCallback,System.Object)"/> before calling BeginDisconnect.
            </para><para>The BeginDisconnect method will send the QUIT command to the FTP server and make sure
            that the command connection is closed.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDisconnect(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndDisconnect with it when ready to complete. 
            In this later case, the call to EndDisconnect may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends the process of disconnecting the FTP client from the FTP server to which it is connected.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving the current working folder of the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. It can be 
            changed using the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> and 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetCurrentFolder with it when ready to complete. 
            In this later case, the call to EndGetCurrentFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)">
            <summary>
            Ends the process of retrieving the current working folder of the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>A string representing the FTP server's current folder. The path returned is an absolute path that 
            can be used with the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods to go directly 
            to this folder regardless of the current working folder.</returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of changing the current working folder of the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="folder">The new current working folder. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            Both relative and absolute paths can be provided to the BeginChangeCurrentFolder method to change
            the FTP server's current working folder, however some FTP servers might not support absolute paths 
            and different server types may have different ways of representing absolute paths.
            </para><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. 
            </para><para>
            The <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods should be used 
            in the case where you want the parent folder to be the new current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/><see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndChangeCurrentFolder with it when ready to complete. 
            In this later case, the call to EndChangeCurrentFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)">
            <summary>
            Ends the process of changing the current working folder of the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of changing the current working folder of the FTP server to the parent folder.
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The FTP server's current working folder is used by the FTP server as the base folder 
            from which to perform file operations such as obtaining folder contents, 
            receiving, sending and deleting files, changing the current folder, etc. It can be retrieved 
            via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndChangeToParentFolder with it when ready to complete. 
            In this later case, the call to EndChangeToParentFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)">
            <summary>
            Ends the process of changing the current working folder of the FTP server to the parent folder.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginCreateFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of creating a folder on the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndCreateFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="folder">The name of the folder to create. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the folder will be created in the current working folder. If you want to create the folder
            in another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/><see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> 
            methods and/or <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the 
            current working folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndCreateFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndCreateFolder with it when ready to complete. 
            In this later case, the call to EndCreateFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndCreateFolder(System.IAsyncResult)">
            <summary>
            Ends the process of creating a folder on the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the processing of deleting a folder from the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the folder will be deleted from the current working folder. If you want to delete the folder
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods 
            and/or <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current 
            working folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            This overload of the BeginDeleteFolder method requires that the folder be empty in order
            to delete it. <b>Some FTP servers will allow folders that contain child items to be
            deleted, therefore, it is possible that calling this overload of the BeginDeleteFolder method
            will delete a folder even if it contains child items.</b>
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndDeleteFolder with it when ready to complete. 
            In this later case, the call to EndDeleteFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of deleting a folder, and optionally each item in the folder, from the FTP server.
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)"/>!
            </summary>
            <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="recursive"><see langword="true"/> if each item in the folder
            should also be deleted; <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the folder will be deleted from the current working folder. If you want to delete the folder
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods 
            and/or <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current 
            working folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            <b>Some FTP servers will allow folders that contain child items to be
            deleted, therefore, it is possible that calling this overload of the BeginDeleteFolder method with
            its <paramref name="recursive"/> parameter set to <see langword="false"/> will still delete
            each item in the folder (including the folder).</b></note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndDeleteFolder with it when ready to complete. 
            In this later case, the call to EndDeleteFolder may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)">
            <summary>
            Ends the process of deleting a folder from the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of deleting a file from the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)"/>!
            </summary>
            <param name="file">The name of the file to delete. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be deleted from the current working folder. If you want to delete the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods 
            and/or <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current 
            working folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndDeleteFile with it when ready to complete. 
            In this later case, the call to EndDeleteFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends the process of deleting a file from the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of renaming a file on the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)"/>!
            </summary>
            <param name="currentFilename">The filename of the file to rename. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="newFilename">The new filename. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be renamed in the current working folder. If you want to rename the file
            in another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndRenameFile with it when ready to complete. 
            In this later case, the call to EndRenameFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)">
            <summary>
            Ends the process of renaming a file on the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving the contents of the current working folder. 
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a 
            filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder. Absolute paths can also be provided, however some FTP servers might not support 
            absolute paths and different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para>
            The listing lines can be manually parsed or modified via the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event.
            </para><para><note>
            If you would prefer to receive an unprocessed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property 
            when calling the BeginGetFolderContents method.</note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetFolderContents with it when ready to complete. 
            In this later case, the call to EndGetFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving the entire contents of the current working folder.
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder. Absolute paths can also be provided, however some FTP servers might not support 
            absolute paths and different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para>
            The listing lines can be manually parsed or modified via the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event.
            </para><para><note>
            If you would prefer to receive an unprocessed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property 
            when calling the BeginGetFolderContents method.</note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetFolderContents with it when ready to complete. 
            In this later case, the call to EndGetFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)">
            <summary>
            Ends the process of retrieving the contents of the current working folder.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfoList"/> collection containing 
            <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects each representing a file matched by <i>remoteFileMask</i>.</returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working
            folder as sent by the FTP server and indicates if the entire listing
            or only filenames should be retrieved. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can 
            can include a filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="namesOnly"><see langword="true"/> if only filenames should be retrieved;
            <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder. Absolute paths can also be provided, however some FTP servers might not 
            support absolute paths and different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para>
            If <paramref name="namesOnly"/> is set to <see langword="true"/>, the NLST command will
            be sent to the FTP server and only the name of the items will be returned.If 
            <paramref name="namesOnly"/> is set to <see langword="false"/>, the LIST command will
            be sent to the FTP server all the available information will be returned.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the BeginGetRawFolderContents/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> methods.</note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetRawFolderContents with it when ready to complete. 
            In this later case, the call to EndGetRawFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working 
            folder as sent by the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can 
            can include a filtering mask to limit the files that are retrieved. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be retrieved. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder. Absolute paths can also be provided, however some FTP servers might not 
            support absolute paths and different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the BeginGetRawFolderContents/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> methods.</note></para>
            <para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetRawFolderContents with it when ready to complete. 
            In this later case, the call to EndGetRawFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the entire contents of current 
            working folder as sent by the FTP server and indicates if the entire listing
            or only filenames should be retrieved. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="namesOnly"><see langword="true"/> if only filenames should be retrieved;
            <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If <paramref name="namesOnly"/> is set to <see langword="true"/>, the NLST command will
            be sent to the FTP server and only the name of the items will be returned.If 
            <paramref name="namesOnly"/> is set to <see langword="false"/>, the LIST command will
            be sent to the FTP server and all the available information will be returned.
            </para><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/><see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the BeginGetRawFolderContents/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> methods.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetRawFolderContents with it when ready to complete. 
            In this later case, the call to EndGetRawFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the entire contents of current 
            working folder as sent by the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/>!
            </summary>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If you want to retrieve the contents of another folder, you could use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change 
            the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            If you would prefer to receive a processed list of items, you can use the 
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)"/> methods instead.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the BeginGetRawFolderContents methods.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndGetRawFolderContents with it when ready to complete. 
            In this later case, the call to EndGetRawFolderContents may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)">
            <summary>
            Ends the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working 
            folder
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>A reference to a <see cref="T:Xceed.Ftp.StringList"/> collection contain a list
            of unprocessed strings each representing an item <paramref name="folder"/>. 
            For example: <i>"07-25-03  11:46AM                  101 001fdf63.xml"</i>. Of course,
            the format of the strings returned by the FTP server can vary from server to server.</returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the current working folder and stores it on the local 
            system using the specified path and filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working 
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the current working folder and stores it on the local 
            system using the specified path and filename and indicates if the file should append itself to 
            the local file if it already exists. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            local file if it already exists; <see langword="false"/> if the local file should be
            overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working 
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the current working folder starting from the specified offset 
            and stores it on the local system using the specified path and filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file. If <paramref name="append"/> is <see langword="true"/>, the remote file will 
            be appended to the end of the local file no matter what the value of <paramref name="offset"/>. 
            Therefore, to implement a real resume procedure, the size of the local file must be specified in 
            <paramref name="offset"/> and <paramref name="append"/> must be set to <see langword="true"/>.</param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working 
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the current working folder starting from the specified offset 
            and stores it on the local system using the specified path and filename indicating if the file should 
            append itself to the local file if it already exists. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file. If <paramref name="append"/> is <see langword="true"/>, the remote file will 
            be appended to the end of the local file no matter what the value of <paramref name="offset"/>. 
            Therefore, to implement a real resume procedure, the size of the local file must be specified in 
            <paramref name="offset"/> and <paramref name="append"/> must be set to <see langword="true"/>.</param>
            <param name="localFilename">The path and filename of the file as it will
            be stored on the local system.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            local file if it already exists; <see langword="false"/> if the local file should be
            overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working 
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the current working folder to the specified 
            <see cref="T:System.IO.Stream"/>. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="destination">A reference to the <see cref="T:System.IO.Stream"/> to which
            to receive the file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            The destination stream must be writable (<see cref="P:System.IO.Stream.CanWrite"/>) and must be closed by the user.
            </note></para><para><note>When using this overload of the BeginReceiveFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of receiving the specified file from the FTP server's current working folder into the specified 
            <see cref="T:System.IO.Stream"/>, starting from the specified offset. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data 
            from the remote file. If <paramref name="append"/> is <see langword="true"/>, the remote file will 
            be appended to the end of the local file no matter what the value of <paramref name="offset"/>. 
            Therefore, to implement a real resume procedure, the size of the local file must be specified in 
            <paramref name="offset"/> and <paramref name="append"/> must be set to <see langword="true"/>.</param>
            <param name="destination">A reference to the <see cref="T:System.IO.Stream"/> to which
            to receive the file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be received from the current working folder. If you want to receive the file
            from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working 
            folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            The destination stream must be writable (<see cref="P:System.IO.Stream.CanWrite"/>) and must be closed by the user.
            </note></para><para><note>When using this overload of the BeginReceiveFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveFile with it when ready to complete. 
            In this later case, the call to EndReceiveFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)">
            <summary>
            Ends the process of receiving a file from the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retreiving the files that match the provided file mask from the current working folder and stores them on 
            the local system in the specified folder. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFileMask">The file mask of the remote files to receive. This parameter 
            can include a filtering mask to limit the files that are received. For example, 
            if <see cref="F:System.String.Empty"/> is specified, the entire contents of the current working
            folder will be received. If "*.txt" is used, all the files in the current working folder that 
            have the TXT extension will be received. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
            <param name="recursive"><see langword="true"/> if the files in child folders should also be received;
            <see langword="false"/> otherwise.</param>
            <param name="recreateFolderStructure"><see langword="true"/> if the remote directory structure
            should be recreated on the local machine; <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            If a folder is specified in <paramref name="remoteFileMask"/>, for example "MyFiles/*" and
            <paramref name="recreateFolderStructure"/> is set to <see langword="true"/>, the "MyFiles" 
            folder will be recreated locally in <paramref name="localFolder"/>. If only a file mask is
            specified in <paramref name="remoteFileMask"/>, the files/folders will be recreated directly in 
            <paramref name="localFolder"/>.</para><para>
            By default, the files that match the provided file mask will be received from the current working folder. If you want 
            to receive the files from another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> 
            methods and/or <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current 
            working folder. Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            By default, if an error occurs during the multiple-file transfer, the <b>entire</b>  operation
            will be aborted. To change this behavior, the <see cref="E:Xceed.Ftp.FtpClient.MultipleFileTransferError"/> event
            must be handled and its <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action"/> property set to
            either Retry or Ignore.
            </note></para><para><note type="caution">
            The TYPE command will be sent regardless of the value of the <see cref="P:Xceed.Ftp.FtpClient.SendTypeCommand"/> property
            when calling the BeginReceiveMultipleFiles method during the initial listing phase.</note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndReceiveMultipleFiles with it when ready to complete. 
            In this later case, the call to EndReceiveMultipleFiles may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)">
            <summary>
            Ends the process of retreiving the files that match the provided file mask from the current working folder and stores them on 
            the local system in the specified folder.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the specified file to the FTP server's current working folder and stores it using the same
            filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The file will be sent to the current working folder, using the same filename. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the specified file to the FTP server's current working folder using the same filename and 
            indicating if it should append itself to the remote file if it already exists. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The file will be sent to the current working folder, using the same filename. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the specified file to the FTP server's current working folder and stores it using the 
            specified filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            If the remote file already exists, it will be overwritten.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the specified file to the FTP server's current working folder, indicating if it should 
            append itself to the remote file if it already exists, and stores it using the 
            specified filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's current working 
            folder, indicating if it should append itself to the remote file if it already exists,
            and stores it using the specified filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if the file should append itself to the
            remote file if it already exists; <see langword="false"/> if the remote file should be
            overwritten.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>When using this overload of the BeginSendFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's 
            current working folder. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/>!
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <param name="remoteFilename">The filename as it will be stored on the FTP server. 
            <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            By default, the file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder. 
            Absolute paths can also be provided, however some FTP servers might not support absolute paths and 
            different server types may have different ways of representing absolute paths.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>When using this overload of the BeginSendFile method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFile with it when ready to complete. 
            In this later case, the call to EndSendFile may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)">
            <summary>
            Ends the process of sending a file to the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the specified file to the FTP server's current working folder and stores it using a 
            unique filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)"/>!
            </summary>
            <param name="localFilename">The path and filename of the local file to send.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFileToUniqueName with it when ready to complete. 
            In this later case, the call to EndSendFileToUniqueName may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the data from the specified <see cref="T:System.IO.Stream"/> to the FTP server's current working folder
            and stores it using a unique filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)"/>!
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> whose data is to be sent to the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The file will be sent to the current working folder. If you want to send the file
            to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note>When using this overload of the BeginSendFileToUniqueName method, in the 
            <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> event, the <see cref="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename"/> 
            property will be <see cref="F:System.String.Empty"/>. This overload will also ignore the value of the
            <see cref="P:Xceed.Ftp.FtpClient.PreAllocateStorage"/> property.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendFileToUniqueName with it when ready to complete. 
            In this later case, the call to EndSendFileToUniqueName may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)">
            <summary>
            Ends the process of sending a file to the FTP server's current working folder and storing it using a unique filename.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendMultipleFiles(System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending the files that match the provided file mask to the FTP server's 
            current working folder. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)"/>!
            </summary>
            <param name="localFileMask">The full path and file mask of the local files to send. This parameter 
            can include a filtering mask to limit the files that are sent. For example, 
            if "c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. 
            If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the TXT extension 
            will be sent. The "temp" folder will not be recreated on the FTP server.</param>
            <param name="recursive"><see langword="true"/> if the files in child folders should also be 
            sent; <see langword="false"/> otherwise.</param>
            <param name="recreateFolderStructure"><see langword="true"/> if the local directory structure
            should be recreated on the FTP server; <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The files that match the provided file mask will be sent to the current working folder. If you want to 
            send the files to another location, you could use the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)"/> methods and/or
            <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ChangeToParentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)"/> methods to change the current working folder.
            </para><para>
            The current working folder can be retrieved via the <see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.CurrentFolderFtpCommand,System.AsyncCallback,System.Object)"/>/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)"/> methods.
            </para><para><note type="caution">
            By default, if an error occurs during the multiple-file transfer, the <b>entire</b>  operation
            will be aborted. To change this behavior, the <see cref="E:Xceed.Ftp.FtpClient.MultipleFileTransferError"/> event
            must be handled and its <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action"/> property set to
            either Retry or Ignore.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendMultipleFiles with it when ready to complete. 
            In this later case, the call to EndSendMultipleFiles may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)">
            <summary>
            Ends the process of sending the files that match the provided file mask to the FTP server's current working folder.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendCustomCommand(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of sending a <b>custom</b> command to the FTP server. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)"/>!
            </summary>
            <param name="command">The command to send to the FTP server.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para>
            The BeginSendCustomCommand method is used to send <b>FTP</b> commands. This means that 
            commands you enter using the Windows command-line FTP (such as "dir", "put" or "debug") are not the 
            commands that are actually sent to the FTP server. Although these commands <b>might</b>  be recognized by 
            some FTP servers, they are <b>not guaranteed to work!</b>.
            </para><para>
            When sending a custom FTP command, the local folder separator character will <b>not</b> be replaced
            by the <see cref="P:Xceed.Ftp.FtpClient.ServerFolderSeparator"/> to allow the local folder separator character to be sent
            "as is".</para><para>
            Not all commands are supported by all FTP servers. In order to determine which commands are supported, you can use the 
            BeginSendCustomCommand/<see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)"/> methods to send the "HELP" command. 
            For example: ftp.SendCustomCommand( "HELP" );.</para><para><note type="caution">
            The BeginSendCustomCommand method does <b>not</b> support custom commands that require a data 
            connection such as STOR (<see cref="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.BaseStoreFileFtpCommand,System.AsyncCallback,System.Object)"/>), RETR (<see cref="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.RestartFtpCommand,Xceed.Ftp.Engine.RetrieveFileFtpCommand,System.AsyncCallback,System.Object)"/>), 
            NLST and LIST (<see cref="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(Xceed.Ftp.Engine.FtpCommandChannel,Xceed.Ftp.Engine.ListFtpCommand,System.Boolean,System.AsyncCallback,System.Object)"/>), etc.
            </note></para><para><note>
            When using a <paramref name="callback"/>, the <see cref="T:System.IAsyncResult"/> is provided as a parameter. 
            You should call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)"/> in that callback. When <b>NOT</b>  providing a callback, 
            you should keep the returned IAsyncResult and call EndSendCustomCommand with it when ready to complete. 
            In this later case, the call to EndSendCustomCommand may block until the operation completes.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)">
            <summary>
            Ends the process of sending a <b>custom</b> command to the FTP server.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>The reply received from the FTP server in response to the custom command.</returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving a direct access to the <b>readonly</b>  data stream being received.
            Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client will remain in a "ReceivingFile" state until the stream returned
            by <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)"/> is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving a direct access to the <b>readonly</b>  data stream being received, 
            beginning at the specified offset. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)"/>!
            </summary>
            <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client will remain in a "ReceivingFile" state until the stream returned 
            by <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)"/> is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)">
            <summary>
            Ends the process of retrieving a direct access to the <b>readonly</b>  data stream being received.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>The data <see cref="T:System.IO.Stream"/> to read from.</returns>
            <remarks><para><note>
            The FTP client will remain in a "ReceivingFile" state until the stream is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving a direct access to the <b>write-only</b>  data stream to send to.
            </summary>
            <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>
            The FTP client remains in a "SendingFile" state until the stream returned
            by <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetUploadStream(System.IAsyncResult)"/> is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins the process of retrieving a direct access to the <b>write-only</b>  data stream to send to, indicating if existing
            data should be overwritten or appended to.
            </summary>
            <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
            <param name="append"><see langword="true"/> if existing data should be appended to; <see langword="false"/> otherwise.</param>
            <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</returns>
            <remarks><para><note>The FTP client remains in a "SendingFile" state until the stream 
            returned by <see cref="M:Xceed.Ftp.AsyncFtpClient.EndGetUploadStream(System.IAsyncResult)"/> is closed.</note></para></remarks>
            <returns></returns>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetUploadStream(System.IAsyncResult)">
            <summary>
            Ends the process of retrieving a direct access to the <b>write-only</b>  data stream to send to.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing the status of the asynchronous operation.</param>
            <returns>The data <see cref="T:System.IO.Stream"/> to write to.</returns>
            <remarks><para><note>
            The FTP client will remain in a "SendingFile" state until the stream is closed.
            </note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.AsyncFtpClient.SetState(Xceed.Ftp.FtpClientState)">
            <summary>
            Do not call this method from this class. Call SetAsyncState instead.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="P:Xceed.Ftp.AsyncFtpClient.SynchronizingObject">
            <summary>
            Gets or sets the object used to automatically redirect events on the main UI thread.
            </summary>
            <value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> object used to automatically redirect 
            events on the main UI thread. By default, <see langword="null"/>.</value>
            <remarks><para>
            In order for the SynchronizingObject to work, your application must be pumping messages, 
            either explicitly while waiting for completion (Application.DoEvents), or by not calling any 
            blocking methods and returning control to your application's main loop 
            (Application.Run in Main).
            </para><para>
            This property is not taken into consideration when using <b>blocking</b>  method 
            calls such as <see cref="M:Xceed.Ftp.FtpClient.Connect(System.String)"/> and <see cref="M:Xceed.Ftp.FtpClient.Login"/>.
            </para></remarks>
        </member>
        <member name="T:Xceed.Ftp.AuthenticationMethod">
            <summary>
            Value representing the authentication method to use when connecting to an FTP server.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.None">
            <summary>No authentication method will be used.</summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.Ssl">
            <summary>SSL authentication will be used. AUTH SSL is sent and only SSL 3.0 is accepted.</summary>
        </member>
        <member name="F:Xceed.Ftp.AuthenticationMethod.Tls">
            <summary>TLS (SSL 3.1) authentication will be used. AUTH TLS is sent, but both TLS and SSL 3.0 are accepted.</summary>
        </member>
        <member name="T:Xceed.Ftp.Certificate">
            <summary>
            Class which represents a X509 v3 encoded certificate.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by opening a PFX file 
            and retrieving the <b>first</b> certificate from it.
            </summary>
            <param name="filename">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the first certificat found in the PFX file.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by opening a PFX file and 
            retrieving the <b>first</b> certificate from it.
            </summary>
            <param name="filename">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><see langword="true"/> if the private keys associated with the certificates 
            should be marked as exportable; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the first certificat found in the PFX file.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by opening a PFX file and retrieving 
            the <b>first</b> certificate from it.
            </summary>
            <param name="fileData">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the first certificat found in the PFX file.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by opening a PFX file and retrieving 
            the <b>first</b> certificate from it.
            </summary>
            <param name="fileData">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><see langword="true"/> if the private keys associated with the certificates 
            should be marked as exportable; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the first certificat found in the PFX file.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromBase64String(System.String)">
            <summary>
            Creates a new certificate from a string representation.
            </summary>
            <param name="certificate">A Base64-encoded representation of the certificate.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> created from the Base64-encoded string.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromCerFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by opening a certificate file 
            and retrieving the <b>first</b> certificate from it.
            </summary>
            <param name="filename">The full path to the certificate file to open.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the first certificat found in the certificate file.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromCerFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by reading a certificate from a 
            certificate blob.
            </summary>
            <param name="fileData">The contents of the certificate file.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> created from the certificate blob.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromCerFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by reading a certificate 
            from a certificate blob.
            </summary>
            <param name="fileData">The contents of the certificate file.</param>
            <param name="offset">The offset from which to start reading.</param>
            <param name="count">The length of the certificate.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> created from the certificate blob.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPemFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by reading a certificate 
            from a PEM encoded file.
            </summary>
            <param name="filename">The path to the PEM file.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> created from the PEM encoded file.</returns>
            <remarks><para><note>This implementation only reads certificates from PEM files. It does not read the private 
            key from the certificate file if one is present.</note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromPemFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by reading a certificate 
            from a PEM encoded file.
            </summary>
            <param name="fileData">The contents of the PEM file.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> created from the PEM encoded file.</returns>
            <remarks><para><note>This implementation only reads certificates from PEM files. It does not read the private 
            key from the certificate file if one is present.</note></para></remarks>
        </member>
        <member name="M:Xceed.Ftp.Certificate.CreateFromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of the <see cref="T:Xceed.Ftp.Certificate"/> class by duplicating an 
            existing <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.
            </summary>
            <param name="certificate">The X509Certificate instance to duplicate.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> representing the duplicate X.509 certificate.</returns>
        </member>
        <member name="M:Xceed.Ftp.Certificate.ToString">
            <summary>
            Gets a verbose information output about the certificate.
            </summary>
            <returns>A string representing a verbose information output about the certificate.</returns>
        </member>
        <member name="P:Xceed.Ftp.Certificate.EffectiveDate">
            <summary>
            Gets the effective date of the X.509v3 certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value representing the effective date of X.509 certificate.</value>
            <remarks><para>
            The effective date is the date after which the X.509 certificate is considered valid.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.Certificate.ExpirationDate">
            <summary>
            Gets the expiration date of the X.509v3 certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> value representing the expiration date of the X.509v3 certificate.</value>
            <remarks><para>
            The expiration date is the date after which the X.509 certificate is no longer considered valid.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.Certificate.IssuerName">
            <summary>
            Gets the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <value>A string representing the name of the certification authority that issued the
            X.509v3 certificate.</value>
        </member>
        <member name="P:Xceed.Ftp.Certificate.Name">
            <summary>
            Gets the name of the current principal.
            </summary>
            <value>A string representing the name of the current principal.</value>
        </member>
        <member name="T:Xceed.Ftp.CertificateReceivedEventArgs">
            <summary>
            Provides information on the certificate that is received from the FTP server.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.ServerCertificate">
            <summary>
            Gets the certificate received from the FTP server.
            </summary>
            <value>A reference to a <see cref="T:Xceed.Ftp.Certificate"/> representing the certificate that was
            received from the FTP server.</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Flags">
            <summary>
            Gets or sets the verification flags used to verify the FTP server's certificate.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.VerificationFlags"/> value representing the verification flags used
            to verify the FTP server's certificate.</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Status">
            <summary>
            Gets the verification status of the certificate received from the FTP server.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.VerificationStatus"/> value representing the verification status
            of the certificate received from the FTP server.</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Action">
            <summary>
            Gets or sets the verification action to take when a certificate is received from an FTP server.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.VerificationAction"/> value representing the action to take when a certificate
            is received from an FTP server.</value>
        </member>
        <member name="T:Xceed.Ftp.CertificateReceivedEventHandler">
            <summary>
            Represents that method that will handle the <see cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.CertificateRequiredEventArgs">
            <summary>
            Provides information on the certificate that the FTP server requires a certificate from the FTP client.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateRequiredEventArgs.Certificate">
            <summary>
            Gets or sets the FTP client's certificate that is required by the FTP server.
            </summary>
            <value>A reference to a <see cref="P:Xceed.Ftp.CertificateRequiredEventArgs.Certificate"/> representing the FTP client's certificate 
            that is required by the FTP server.</value>
        </member>
        <member name="T:Xceed.Ftp.CertificateRequiredEventHandler">
            <summary>
            Represents that method that will handle the <see cref="E:Xceed.Ftp.FtpClient.CertificateRequired"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.CertificateStore">
            <summary>
            Class which represents a certificate store.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="filename">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Ftp.CertificateStore"/> instance.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="filename">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><see langword="true"/> if the private keys associated with the 
            certificates should be marked as exportable; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.Ftp.CertificateStore"/> instance.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded byte array.
            </summary>
            <param name="fileData">The contents of a PFX encoded byte array.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:Xceed.Ftp.CertificateStore"/> instance.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded byte array.
            </summary>
            <param name="fileData">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><see langword="true"/> if the private keys associated with the certificates 
            should be marked as exportable; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.Ftp.CertificateStore"/> instance.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.CreateFromCerFile(System.String)">
            <summary>
            Creates a new certificate store from a certificate file.
            </summary>
            <param name="filename">The certificate file.</param>
            <returns>A <see cref="T:Xceed.Ftp.CertificateStore"/> instance.</returns>
            <remarks><para>The provider opens the file and first attempts to read the file as a serialized 
            store, then as a PKCS #7 signed message, and finally as a single encoded certificate.</para></remarks>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Xceed.Ftp.CertificateStore"/> from a given store name.
            </summary>
            <param name="storeName">The name of the system store to open.</param>
            <remarks><para>
            If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used.</para>
            <para>Some example system stores are listed in the following table. 
             <list type="table">
               <listheader>
                 <term>Predefined system store name</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>"CA"</term>
                 <description>Certification authority certificates.</description>
               </item>
               <item>
                 <term>"MY"</term>
                 <description>A certificate store holding "My" certificates with their associated private keys.</description>
               </item>
               <item>
                 <term>"ROOT"</term>
                 <description>Root certificates.</description>
               </item>
               <item>
                 <term>"SPC"</term>
                 <description>Software publisher certificates.</description>
               </item>
             </list></para>
            </remarks>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.#ctor(Xceed.Ftp.CertificateStoreLocation,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Xceed.Ftp.CertificateStore"/> from a given name
            and store location.
            </summary>
            <param name="location">The location of the store.</param>
            <param name="storeName">The name of the store to open.</param>
            <remarks><para>
            If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used.</para>
            <para>Some example system stores are listed in the following table. 
             <list type="table">
               <listheader>
                 <term>Predefined system store name</term>
                 <description>Meaning</description>
               </listheader>
               <item>
                 <term>"CA"</term>
                 <description>Certification authority certificates.</description>
               </item>
               <item>
                 <term>"MY"</term>
                 <description>A certificate store holding "My" certificates with their associated private keys.</description>
               </item>
               <item>
                 <term>"ROOT"</term>
                 <description>Root certificates.</description>
               </item>
               <item>
                 <term>"SPC"</term>
                 <description>Software publisher certificates.</description>
               </item>
             </list></para>
            </remarks>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.#ctor">
            <summary>
            Initializes a new temporary instance of a <see cref="T:Xceed.Ftp.CertificateStore"/> in memory.
            </summary>
            <remarks><para>If the store is closed, all the data in the store is lost.</para></remarks>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificates">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <returns>An array of <see cref="T:Xceed.Ftp.Certificate"/> instances.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificatesByKeyUsage(System.String[])">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <param name="keyUsages">The list of enhanced key usages to search for.</param>
            <returns>An array of <see cref="T:Xceed.Ftp.Certificate"/> instances.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificateByHash(System.Byte[])">
            <summary>
            Retrieves a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> with the matching default hash -or- <see langword="null"/> 
            if no certificate with that hash could be found in the store.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificateByKeyIdentifier(System.Byte[])">
            <summary>
            Retrieves a certificate with a matching key identifier.
            </summary>
            <param name="keyID">The key identifier to search for.</param>
            <returns>The <see cref="T:Xceed.Ftp.Certificate"/> with the matching key identifier -or- <see langword="null"/> 
            if no matching certificate could be found in the store.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificatesBySubjectName(System.String)">
            <summary>
            Retrieves a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> with a matching subject name -or- <see langword="null"/> 
            if no matching certificate could be found in the store.</returns>
        </member>
        <member name="M:Xceed.Ftp.CertificateStore.GetCertificatesBySubjectString(System.String)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <returns>A <see cref="T:Xceed.Ftp.Certificate"/> with a matching subject string -or- <see langword="null "/> 
            if no matching certificate could be found in the store.</returns>
            <remarks><para>The string matching algorithm used is case-insensitive.</para></remarks>
        </member>
        <member name="T:Xceed.Ftp.CertificateStoreLocation">
            <summary>
            Value representing a certificate's store location.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentService">
            <summary>The certificate store for the current service.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Services">
            <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Unknown">
            <summary>The location is unknown.</summary>
        </member>
        <member name="F:Xceed.Ftp.CertificateStoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="T:Xceed.Ftp.CertificateStoreName">
            <summary>
            Class which contains static predefined system certificates.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.CAStore">
            <summary>
            Represents the predefined system certificate store "CA".
            </summary>
            <value>A string representing the predefined system certificate store "CA".</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.MyStore">
            <summary>
            Represents the predefined system certificate store "My".
            </summary>
            <value>A string representing the predefined system certificate store "My".</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.RootStore">
            <summary>
            Represents the predefined system certificate store "Root".
            </summary>
            <value>A string representing the predefined system certificate store "Root".</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.TrustStore">
            <summary>
            Represents the predefined system certificate store "Trust".
            </summary>
            <value>A string representing the predefined system certificate store "Trust".</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.UntrustedStore">
            <summary>
            Represents the untrusted certificate store.
            </summary>
            <value>A string representing the untrusted certificate store.</value>
        </member>
        <member name="P:Xceed.Ftp.CertificateStoreName.SoftwarePublisherStore">
            <summary>
            Represents the software publisher certificate store.
            </summary>
            <value>A string representing the software publisher certificate store.</value>
        </member>
        <member name="T:Xceed.Ftp.CommandSentEventArgs">
            <summary>
            Provides information on the command that has been sent to the FTP server.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.CommandSentEventArgs.Command">
            <summary>
            Gets the command that was sent to the FTP server.
            </summary>
            <value>A string representing the command that was sent to the FTP server.</value>
        </member>
        <member name="T:Xceed.Ftp.CommandSentEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.CommandSent"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.CommandSentEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.DataChannelProtection">
            <summary>
            Value representing how a data channel is protected.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Clear">
            <summary>
            Do not secure the data channel. Data is sent out in clear.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Integrity">
            <summary>
            The data won't be encrypted, but a checksum will be performed.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Confidential">
            <summary>
            The data will be encrypted, but no checksum will be made.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.DataChannelProtection.Private">
            <summary>
            The data will be encrypted and a checksum will be performed.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.FileTransferStatusEventArgs">
            <summary>
            Provides progress information while sending or receiving one or more files.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.LocalFilename">
            <summary>
            Gets the path and filename of the local file.
            </summary>
            <value>A string representing the path and filename of the local file.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.RemoteFilename">
            <summary>
            Gets the filename of the remote file.
            </summary>
            <value>A string representing the filename of the remote file.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTransferred">
            <summary>
            Gets the amount of bytes transferred for the current file.
            </summary>
            <value>A value representing the amount of bytes transferred for the current file.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesSkipped">
            <summary>
            Gets the amount of bytes that were skipped for the current file.
            </summary>
            <value>A value representing the amount of bytes that were skipped for the current file.
            <b>Only useful once per file skipped.</b></value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTotal">
            <summary>
            Gets the total amount of bytes for the current file.
            </summary>
            <value>A value representing the total amount of bytes for the current file.</value>
            <remarks><para>
            This value is not always available when calling the <see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String)"/> method since some
            FTP servers will not return the size of a file in the first reply to the RETR (ReceiveFile) FTP command
            and the FTP client will not request a listing of the file to retrieve when using the ReceiveFile method.
            As a workaround, the <see cref="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean)"/> method can be used (non-recursively!) to
            receive the file.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPercent">
            <summary>
            Gets the percentage of bytes transferred for the current file.
            </summary>
            <value>A value representing the percentage of bytes transferred and skipped for the current file. 
            If 100%, the transfer of this file has completed or was skipped. In the latter case, <see cref="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesSkipped"/> 
            will be greater than zero.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPerSecond">
            <summary>
            Gets the current file's average throughput in bytes per second.
            </summary>
            <value>A value representing the current file's average throughput in bytes per second.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTransferred">
            <summary>
            Gets the total amount of bytes transferred so far for the group of files being transferred.
            </summary>
            <value>A value representing the total amount of bytes transferred so far for the group
            of files to be transferred.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesSkipped">
            <summary>
            Gets the total amount of bytes that were skipped so far for the group of files being transferred.
            </summary>
            <value>A value representing the total amount of bytes that were skipped so far for the group
            of files being transferred.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTotal">
            <summary>
            Gets the total amount of bytes of all files that will be transferred.
            </summary>
            <value>A value representing the total amount of bytes of all files that will be transferred.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPercent">
            <summary>
            Gets the percentage of the bytes that have been transferred for the entire group of 
            files to transfer.
            </summary>
            <value>A value representing the percentage of the bytes that have been transferred or skipped for the entire
            group of files to transfer. If 100%, the transfer of all files has completed.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPerSecond">
            <summary>
            Gets the average throughput for the entire group of files being transferred, in bytes per second.
            </summary>
            <value>A value representing the average throughput for the entire group of files being 
            transferred, in bytes per second.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTransferred">
            <summary>
            Gets the total number of files transferred so far.
            </summary>
            <value>A value representing the total number of files transferred so far.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesSkipped">
            <summary>
            Gets the total number of files skipped so far.
            </summary>
            <value>A value representing the total number of files skipped so far.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTotal">
            <summary>
            Gets the total number of files to transfer.
            </summary>
            <value>A value representing the total number of files to transfer.</value>
        </member>
        <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesPercent">
            <summary>
            Gets the percentage of files that have been transferred so far.
            </summary>
            <value>A value representing the percentage of files that have been transferred so far.</value>
        </member>
        <member name="T:Xceed.Ftp.FileTransferStatusEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.FileTransferStatus"/> event. 
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.FileTransferStatusEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpAS400ListingParser">
            <summary>
            Class which represents a parser that is used to parse lines received from an AS400 FTP server.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.FtpListingParser">
            <summary>
            Class which represents a parser that is used to parse listing lines received from an FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParser.ParseLine(System.String)">
            <summary>
            Parses the specified listing line received from the FTP server.
            </summary>
            <param name="line">The listing line received from the FTP server.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information
            that was parsed from the listing line received from the FTP server. Can be <see cref="P:Xceed.Ftp.FtpItemInfo.Empty"/>
            to indicate that the listing line was recognized but more information is required (for example, 
            VMS listings are on 2 lines).</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParser.CreateItem">
            <summary>
            Creates a new <see cref="T:Xceed.Ftp.FtpItemInfo"/> object.
            </summary>
            <returns>A reference to a new <see cref="T:Xceed.Ftp.FtpItemInfo"/> object.</returns>
            <remarks><para>You can override this method if you wish to derive from FtpItemInfo and 
            expose more information. This enables you to not only derive from FtpListingParser 
            to implement your own custom parser, but also from existing parsers.</para>
            <para>If you derive from FtpListingParser and FtpItemInfo to provide your own
            custom parser, it is recommended that you override this method so that others can derive
            from your parser and your info classes to add even more information.</para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpAS400ListingParser.#ctor">
            <summary>
            Initializes a new instance of the FtpAS400ListingParser class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpAS400ListingParser.ParseLine(System.String)">
            <summary>
            Parses the specified listing line received from the FTP server.
            </summary>
            <param name="line">The listing line received from the FTP server.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information
            that was parsed from the listing line received from the FTP server. Can be <see cref="P:Xceed.Ftp.FtpItemInfo.Empty"/>
            to indicate that the line was recognized but more information is required (for example, VMS listings
            are on 2 lines). Can be <see langword="null"/> to indicate that the listing line was not recognized
            as a valid AS400 listing line.</returns>
            <remarks><para>
            The AS400 listing parser will try to parse the listing lines received from the FTP server. After 5 failed
            attempts, the AS400 listing parser will be discarded by the <see cref="T:Xceed.Ftp.FtpListingParserList"/>.
            </para></remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpClientState">
            <summary>
            Value representing the state of the <see cref="T:Xceed.Ftp.FtpClient"/>.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.NotConnected">
            <summary>The FTP client is not connected to an FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Connecting">
            <summary>The FTP client is in the process of connecting to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Connected">
            <summary>The FTP client is connected to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Authenticating">
            <summary>The FTP client is authenticating with the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.LoggingIn">
            <summary>The FTP client is logging in.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingUser">
            <summary>The FTP client is changing the current user.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingCurrentFolder">
            <summary>The FTP cient is changing the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ChangingToParentFolder">
            <summary>The FTP client is changing to the current working folder's parent folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.CreatingFolder">
            <summary>The FTP client is creating a new folder in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.DeletingFile">
            <summary>The FTP client is deleting a file in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.DeletingFolder">
            <summary>The FTP client is deleting a folder in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.GettingCurrentFolder">
            <summary>The FTP client is retrieving the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.GettingFolderContents">
            <summary>The FTP client is retrieving the contents of the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ReceivingFile">
            <summary>The FTP client is receiving a file from the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.ReceivingMultipleFiles">
            <summary>The FTP client is receiving multiple files from the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.RenamingFile">
            <summary>The FTP client is renaming a file in the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingCustomCommand">
            <summary>The FTP client is sending a custom command to the FTP server.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingFile">
            <summary>The FTP client is sending a file to the FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.SendingMultipleFiles">
            <summary>The FTP client is sending multiple files to FTP server's current working folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpClientState.Disconnecting">
            <summary>The FTP client is disconnecting from the FTP server.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpDosListingParser">
            <summary>
            Class which represents a parser that is used to parse lines received from a Windows or DOS FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpDosListingParser.#ctor">
            <summary>
            Initializes a new instance of the FtpDosListingParser class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpDosListingParser.ParseLine(System.String)">
            <summary>
            Parses the specified listing line received from the FTP server.
            </summary>
            <param name="line">The listing line received from the FTP server.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information
            that was parsed from the listing line received from the FTP server. Can be <see cref="P:Xceed.Ftp.FtpItemInfo.Empty"/>
            to indicate that the line was recognized but more information is required (for example, VMS listings
            are on 2 lines). Can be <see langword="null"/> to indicate that the listing line was not recognized
            as a valid Windows or DOS listing line.</returns>
            <remarks><para>
            The Windows or DOS listing parser will try to parse the listing lines received from the FTP server. After 5 failed
            attempts, the Windows or DOS listing parser will be discarded by the <see cref="T:Xceed.Ftp.FtpListingParserList"/>.
            </para></remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpItemInfo">
            <summary>
            Represents an item on an FTP server and contains information relevant to that item.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfo.#ctor">
            <exclude/>
            <summary>
            This constructor is reserved for internal use and is not intended to be used directly from your code.
            Your FtpListingParser should call <see cref="M:Xceed.Ftp.FtpListingParser.CreateItem"/>.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>A string representing the name of the item.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.DateTime">
            <summary>
            Gets or sets the date and time of the item, or DateTime.MinDate if the date is unknown or not applicable.
            </summary>
            <value>A <see cref="P:Xceed.Ftp.FtpItemInfo.DateTime"/> value representing the date and time of the item, or DateTime.MinDate
            if the date is unknown or not applicable. Normally, this represents the <b>last write</b>  date and time 
            of the item.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Size">
            <summary>
            Gets or sets the size of the item, or -1 if the size is unknown or not applicable.
            </summary>
            <value>A value representing the size of the item, or -1 if the size is unknown or not applicable. 
            Cannot be less than -1.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Type">
            <summary>
            Gets or sets the type of the item.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.FtpItemType"/> value representing the type of the item.</value>
            <remarks><para><note type="caution">
            If <see cref="M:Xceed.Ftp.FtpClient.GetFolderContents(System.String)"/> is called with its <i>namesOnly</i> parameter set to 
            <see langword="true"/>, Type will return FtpItemType.Unknown.
            </note></para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.Empty">
            <summary>
            Gets an empty FtpItemInfo object.
            </summary>
            <value>A reference to an empty FtpItemInfo object.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfo.IsEmpty">
            <summary>
            Gets a boolean value indicating if the FtpItemInfo object is uninitialized.
            </summary>
            <value><see langword="true"/> if the FtpItemInfo object is uninitialized; 
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:Xceed.Ftp.FtpItemInfoList">
            <summary>
            Contains a list of <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Contains(Xceed.Ftp.FtpItemInfo)">
            <summary>
            Retrieves a boolean value indicating if a specific <see cref="T:Xceed.Ftp.FtpItemInfo"/> object exists in the list. 
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to locate.</param>
            <returns><see langword="true"/> if the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object exists in the list;
            <see langword="false"/> otherwise.</returns>
            <remarks><para>
            The comparison is done by reference. Therefore, even if two <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects contain
            the same property values, they will be considered as two different objects.
            </para></remarks>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.IndexOf(Xceed.Ftp.FtpItemInfo)">
            <summary>
            Searches for the specified <see cref="T:Xceed.Ftp.FtpItemInfo"/> object and returns the zero-based index of the 
            first occurrence within the list. 
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within 
            the entire list, if found; otherwise, returns -1.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object from the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Insert(System.Int32,Xceed.Ftp.FtpItemInfo)">
            <summary>
            Inserts a <see cref="T:Xceed.Ftp.FtpItemInfo"/> object into the list at the specified index
            </summary>
            <param name="index">The zero-based index at which to insert the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object.</param>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Remove(Xceed.Ftp.FtpItemInfo)">
            <summary>
            Removes the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object from the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Clear">
            <summary>
            Removes all <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects from the list.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.Add(Xceed.Ftp.FtpItemInfo)">
            <summary>
            Adds a <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object to add.</param>
            <returns>The zero-based index at which the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object was added.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.AddRange(Xceed.Ftp.FtpItemInfo[])">
            <summary>
            Adds the elements of a <see cref="T:Xceed.Ftp.FtpItemInfo"/> array to the end of the FtpItemInfoList collection. 
            </summary>
            <param name="values">An array of <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects representing the 
            <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects to add to the end of the FtpItemInfoList collection</param>
        </member>
        <member name="M:Xceed.Ftp.FtpItemInfoList.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value. 
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.IsFixedSize">
            <summary>
            Gets a value indicating whether the FtpItemInfoList has a fixed size. 
            </summary>
            <value><see langword="true"/> if the FtpItemInfoList has a fixed size;
            <see langword="false"/> oterhwise.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.IsReadOnly">
            <summary>
            Gets a boolean value indicating if the FtpItemInfoList is readonly.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects already in the FtpItemInfoList 
            can be modified; <see langword="false"/> oterhwise.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpItemInfoList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object at the specified index.
            </summary><value>
            The <see cref="T:Xceed.Ftp.FtpItemInfo"/> object found at the specified index.
            </value>
            <param name="index">The zero-based index at which to get the <see cref="T:Xceed.Ftp.FtpItemInfo"/> object.</param>
        </member>
        <member name="T:Xceed.Ftp.FtpItemType">
            <summary>
            Value representing the type of the item on the FTP server. 
            </summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Unknown">
            <summary>The type of the item is unknown.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.File">
            <summary>The item is a file.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Folder">
            <summary>The item is a folder.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpItemType.Link">
            <summary>The item is a link. A link is a shortcut to a folder or file, that can be located elsewhere than
            on the FTP server to which the FTP client is connected.</summary>
        </member>
        <member name="P:Xceed.Ftp.FtpLicense.AllowedVersions">
            <summary>
            All the version number supported by this version of the product.
            </summary>
            <remarks>
            The versions should be in descending order beginning with the
            less restrictive up to the more restrictive.
            </remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpLicense.LicenseeType">
            <summary>
            The type of the class or control that is licensed by this class (or, more
            exactly, a class derived from this one).
            </summary>
            <remarks>
            If more than one class is licensed by the XceedLicense class, the LicenseeType
            can simply be typeof( Licenser ).
            </remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpListingParserList">
            <summary>
            Contains a list of <see cref="T:Xceed.Ftp.FtpListingParser"/> objects.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Contains(Xceed.Ftp.FtpListingParser)">
            <summary>
            Retrieves a boolean value indicating if a specific <see cref="T:Xceed.Ftp.FtpListingParser"/> object exists in 
            the list.</summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpListingParser"/> object to locate.</param>
            <returns><see langword="true"/> if the <see cref="T:Xceed.Ftp.FtpListingParser"/> object exists in the list;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.IndexOf(Xceed.Ftp.FtpListingParser)">
            <summary>
            Searches for the specified <see cref="T:Xceed.Ftp.FtpListingParser"/> object and returns the zero-based index 
            of the first occurrence within the list. 
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpListingParser"/> object to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within 
            the entire list, if found; otherwise, returns -1.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Xceed.Ftp.FtpListingParser"/> object from the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the 
            <see cref="T:Xceed.Ftp.FtpListingParser"/> object.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Insert(System.Int32,Xceed.Ftp.FtpListingParser)">
            <summary>
            Inserts a <see cref="T:Xceed.Ftp.FtpListingParser"/> object into the list at the specified index
            </summary>
            <param name="index">The zero-based index at which to insert the <see cref="T:Xceed.Ftp.FtpListingParser"/> object.</param>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpListingParser"/> object to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Remove(Xceed.Ftp.FtpListingParser)">
            <summary>
            Removes the <see cref="T:Xceed.Ftp.FtpListingParser"/> object from the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpListingParser"/> object to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Clear">
            <summary>
            Removes all <see cref="T:Xceed.Ftp.FtpListingParser"/> objects from the list.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.Add(Xceed.Ftp.FtpListingParser)">
            <summary>
            Adds a <see cref="T:Xceed.Ftp.FtpListingParser"/> object to the list.
            </summary>
            <param name="value">The <see cref="T:Xceed.Ftp.FtpListingParser"/> object to add.</param>
            <returns>The zero-based index at which the <see cref="T:Xceed.Ftp.FtpListingParser"/> object was added.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.AddRange(Xceed.Ftp.FtpListingParser[])">
            <summary>
            Adds the elements of a <see cref="T:Xceed.Ftp.FtpListingParser"/> object array to the end of the 
            FtpListingParserList collection. 
            </summary>
            <param name="values">An array of <see cref="T:Xceed.Ftp.FtpListingParser"/> objects representing the 
            <see cref="T:Xceed.Ftp.FtpListingParser"/> objects to add to the end of the FtpListingParserList collection.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.ParseListing(Xceed.Ftp.StringList)">
            <summary>
            Parses a raw (unprocessed) folder listing, querying if each <see cref="T:Xceed.Ftp.FtpListingParser"/>
            can retrieve relevant information from each line.
            </summary>
            <param name="lines">The raw (unprocessed) folder listing lines to parse.</param>
            <returns>A <see cref="T:Xceed.Ftp.FtpItemInfoList"/> of <see cref="T:Xceed.Ftp.FtpItemInfo"/> objects each representing
            the listing information of an FTP item.</returns>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.OnParsingListingLine(Xceed.Ftp.FtpItemInfo,System.String,System.Boolean@)">
            <summary>
            Raises the <see cref="E:Xceed.Ftp.FtpListingParserList.ParsingListingLine"/> event.
            </summary>
            <param name="item">An <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information relative to an
            item (file, folder or link) on an FTP server.</param>
            <param name="line">The line from which the <see cref="T:Xceed.Ftp.FtpItemInfo"/> was created.</param>
            <param name="valid"><see langword="true"/> if the line represents a valid item; 
            <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.Ftp.FtpListingParserList.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value. 
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.IsFixedSize">
            <summary>
            Gets a value indicating whether the FtpListingParserList has a fixed size. 
            </summary>
            <value><see langword="true"/> if the FtpListingParserList has a fixed size;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.IsReadOnly">
            <summary>
            Gets a boolean value indicating if the FtpListingParserList is readonly.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.Ftp.FtpListingParser"/> objects already in the 
            FtpListingParserList can be modified; <see langword="false"/> otherwise.</value>
        </member>
        <member name="P:Xceed.Ftp.FtpListingParserList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Xceed.Ftp.FtpListingParser"/> object at the specified index.
            </summary><value>
            The <see cref="T:Xceed.Ftp.FtpListingParser"/> object found at the specified index.
            </value>
            <param name="index">The zero-based index at which to get the <see cref="T:Xceed.Ftp.FtpListingParser"/> object.</param>
        </member>
        <member name="E:Xceed.Ftp.FtpListingParserList.ParsingListingLine">
            <summary>
            Raised for each folder listing line sent by the FTP server and allows you to manually parse
            the lines.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.FtpReply">
            <summary>
            Represents a reply received from the FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReply.#ctor">
            <summary>
            Initializes a new instance of the FtpReply class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpReply.ToString">
            <summary>
            Returns a string representing the reply received from the FTP server.
            </summary>
            <returns>A string representing the reply received from the FTP server. For example:
            <code>
            230-The response `guest' is not valid.
            230-Next time please use your e-mail address as password.
            230 Guest login ok, access restrictions apply.
            </code></returns>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Lines">
            <summary>
            Gets the lines returned by the FTP server as a reply to a command.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.StringList"/> containing a list of all the lines, including the
            <see cref="P:Xceed.Ftp.FtpReply.Message"/> returned by the FTP server as a reply to a command.</value>
            <remarks><para>
            The lines of the reply are the custom lines returned by the FTP server. For example, the "welcome"
            message. The <see cref="P:Xceed.Ftp.FtpReply.Message"/> is the text following the last line of the full text 
            returned by the FTP server. For example:
            <code>
            220-Welcome! 
            Thank you for using Xceed FTP for .NET
            220 Have fun! 
            </code>
            "Have fun!" is the <see cref="P:Xceed.Ftp.FtpReply.Message"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Message">
            <summary>
            Gets the text following the last line of the full text returned by the FTP server <b>without</b>
            the reply code.
            </summary>
            <value>A string representing the last line of the full text returned by the FTP server <b>without</b>
            the reply code.</value>
            <remarks><para>
            The <see cref="P:Xceed.Ftp.FtpReply.Lines"/> of the reply are the custom lines returned by the FTP server. For example, 
            the "welcome" message. The Message is the text following the last line of the full text returned by the 
            FTP server. For example:
            <code>
            220-Welcome!
            Thank you for using Xceed FTP for .NET
            220 Have fun! 
            </code>
            "Have fun!" is the Message.
            </para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.ReplyCode">
            <summary>
            Gets the reply code returned by the FTP server.
            </summary>
            <value>A value representing the reply code returned by the FTP server. Can be between 100 and 559
            inclusively.</value>
            <remarks><para>The following table provides a list of the possible reply codes returned by an FTP server.
            <list type="table">
            <item><term>110</term><description>Restart marker reply.</description></item>
            <item><term>120</term><description>Service ready in nnn minutes.</description></item>
            <item><term>125</term><description>Data connection already open; transfer starting.</description></item>
            <item><term>150</term><description>File status okay; about to open data connection.</description></item>
            <item><term>200</term><description>Command okay.</description></item>
            <item><term>202</term><description>Command not implemented, superfluous at this site.</description></item>
            <item><term>211</term><description>System status, or system help reply.</description></item>
            <item><term>212</term><description>Directory status.</description></item>
            <item><term>213</term><description>File status</description></item>
            <item><term>214</term><description>Help message.</description></item>
            <item><term>215</term><description>NAME system type.</description></item>
            <item><term>220</term><description>Service ready for new user.</description></item>
            <item><term>221</term><description>Service closing control connection.</description></item>
            <item><term>225</term><description>Data connection open; no transfer in progress.</description></item>
            <item><term>226</term><description>Closing data connection.</description></item>
            <item><term>227</term><description>Entering Passive Mode (h1,h2,h3,h4,p1,p2).</description></item>
            <item><term>230</term><description>User logged in, proceed.</description></item>
            <item><term>250</term><description>Requested file action okay, completed.</description></item>
            <item><term>257</term><description>"PATHNAME" created.</description></item>
            <item><term>331</term><description>User name okay, need password.</description></item>
            <item><term>332</term><description>Need account for login.</description></item>
            <item><term>350</term><description>Requested file action pending further information.</description></item>
            <item><term>421</term><description>Service not available, closing control connection.</description></item>
            <item><term>425</term><description>Can't open data connection.</description></item>
            <item><term>426</term><description>Connection closed; transfer aborted.</description></item>
            <item><term>450</term><description>Requested file action not taken. File unavailable (e.g., file busy).</description></item>
            <item><term>451</term><description>Requested action aborted: local error in processing.</description></item>
            <item><term>452</term><description>Requested action not taken. Insufficient storage space in system.</description></item>
            <item><term>500</term><description>Syntax error, command unrecognized.</description></item>
            <item><term>501</term><description>Syntax error in parameters or arguments.</description></item>
            <item><term>502</term><description>Command not implemented.</description></item>
            <item><term>503</term><description>Bad sequence of commands.</description></item>
            <item><term>504</term><description>Command not implemented for that parameter.</description></item>
            <item><term>530</term><description>Not logged in.</description></item>
            <item><term>532</term><description>Need account for storing files.</description></item>
            <item><term>550</term><description>Requested action not taken. File unavailable (e.g., file not found, no access).</description></item>
            <item><term>551</term><description>Requested action aborted: page type unknown.</description></item>
            <item><term>552</term><description>Requested file action aborted. Exceeded storage allocation (for current directory or dataset).</description></item>
            <item><term>553</term><description>Requested action not taken. File name not allowed. </description></item>
            </list></para></remarks>
        </member>
        <member name="P:Xceed.Ftp.FtpReply.Type">
            <summary>
            Gets a value representing the type of reply received from the FTP server.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.FtpReplyType"/> representing the type of reply received from the FTP server.</value>
            <remarks><para>
            The following table provides a list of the types of reply codes that can be returned by an FTP server.
            <list type="table">
            <item><term>Incomplete</term><description>More lines are expected therefore this reply is still incomplete. 
            You should never receive such a reply, as this value is used internally.</description></item>
            <item><term>PositivePreliminary</term><description>The requested action is being initiated and another 
            reply should be expected before proceeding with a new command. Any reply between 100 and 159 inclusively 
            is a positive preliminary reply.</description></item>
            <item><term>PositiveCompletion</term><description>The requested action has successfully completed 
            and a new request may be initiated. Any reply between 200 and 259 inclusively is a positive completion 
            reply.</description></item>
            <item><term>PositiveIntermediate</term><description>The command was accepted, but the requested 
            action is being held in abeyance, pending receipt of further information. Another command specifying 
            this information is expected by the FTP server. Any reply between 300 and 359 inclusively is a positive 
            intermediate reply.</description></item>
            <item><term>TransientNegativeCompletion</term><description>The command was not accepted and the 
            requested action did not take place, but the error condition is not permanent and the action may be 
            requested again once the problem is addressed. Any reply between 400 and 459 inclusively is a transient negative completion reply.</description></item>
            <item><term>PermanentNegativeCompletion</term><description>The command was not accepted and the requested 
            action did not take place. Any reply between 500 and 559 inclusively is a permanent negative completion 
            reply.</description></item>
            <item><term>Invalid</term><description>The format of the reply received from the FTP server was not recognized.</description></item>
            </list></para><para><note>
            For a list of specific reply codes, consult the <see cref="P:Xceed.Ftp.FtpReply.ReplyCode"/> property.
            </note></para></remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpReplyType">
            <summary>
            Value representing the type of reply received from the FTP server in response to a command.
            </summary><remarks><para><note>
            For a list of specific reply codes, consult the <see cref="T:System.Number"/> property of the 
            <see cref="T:Xceed.Ftp.FtpReply"/> class.
            </note></para></remarks>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.Incomplete">
            <summary>More lines are expected therefore this reply is still incomplete. You 
            should never receive such a reply, as this value is used internally.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositivePreliminary">
            <summary>The requested action is being initiated and another reply should be expected before 
            proceeding with a new command. Any reply between 100 and 159 inclusively is a positive
            preliminary reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositiveCompletion">
            <summary>The requested action has successfully completed and a new request may be initiated. Any 
            reply between 200 and 259 inclusively is a positive completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PositiveIntermediate">
            <summary>The command was accepted, but the requested action is being held in abeyance, pending 
            receipt of further information. Another command specifying this information is expected by the
            FTP server. Any reply between 300 and 359 inclusively is a positive intermediate reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.TransientNegativeCompletion">
            <summary>The command was not accepted and the requested action did not take place, but the error 
            condition is not permanent and the action may be requested again once the problem is addressed. Any reply 
            between 400 and 459 inclusively is a transient negative completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.PermanentNegativeCompletion">
            <summary>The command was not accepted and the requested action did not take place. Any reply between 
            500 and 559 inclusively is a permanent negative completion reply.</summary>
        </member>
        <member name="F:Xceed.Ftp.FtpReplyType.Invalid">
            <summary>The format of the reply received from the FTP server was not recognized.</summary>
        </member>
        <member name="T:Xceed.Ftp.FtpUnixListingParser">
            <summary>
            Class which represents a parser that is used to parse lines received from a UNIX FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpUnixListingParser.#ctor">
            <summary>
            Initializes a new instance of the FtpUnixListingParser class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpUnixListingParser.ParseLine(System.String)">
            <summary>
            Parses the specified listing line received from the FTP server.
            </summary>
            <param name="line">The listing line received from the FTP server.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information
            that was parsed from the listing line received from the FTP server. Can be <see cref="P:Xceed.Ftp.FtpItemInfo.Empty"/>
            to indicate that the line was recognized but more information is required (for example, VMS listings
            are on 2 lines). Can be <see langword="null"/> to indicate that the listing line was not recognized
            as a valid UNIX listing line.</returns>
            <remarks><para>
            The UNIX listing parser will try to parse the listing lines received from the FTP server. After 5 failed
            attempts, the UNIX parser will be discarded by the <see cref="T:Xceed.Ftp.FtpListingParserList"/>.
            </para></remarks>
        </member>
        <member name="T:Xceed.Ftp.FtpVmsListingParser">
            <summary>
            Class which represents a parser that is used to parse lines received from a VMS FTP server.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpVmsListingParser.#ctor">
            <summary>
            Initializes a new instance of the FtpVmsListingParser class.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.FtpVmsListingParser.ParseLine(System.String)">
            <summary>
            Parses the specified listing line received from the FTP server.
            </summary>
            <param name="line">The listing line received from the FTP server.</param>
            <returns>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object containing the information
            that was parsed from the listing line received from the FTP server. Can be <see cref="P:Xceed.Ftp.FtpItemInfo.Empty"/>
            to indicate that the line was recognized but more information is required (for example, VMS listings
            are on 2 lines). Can be <see langword="null"/> to indicate that the listing line was not recognized
            as a valid VMS listing line.</returns>
            <remarks><para>
            The VMS listing parser will try to parse the listing lines received from the FTP server. After 5 failed
            attempts, the VMS listing parser will be discarded by the <see cref="T:Xceed.Ftp.FtpListingParserList"/>.
            </para></remarks>
        </member>
        <member name="T:Xceed.Ftp.Licenser">
            <summary>
            Class which is used to register the classes located in the Xceed.Ftp namespace.
            </summary>
            <remarks><para>
            We recommend you set the LicenseKey property in the main entry point of the application.
            For example, the LicenseKey property can be set, for C# users, in the static main
            function. For VB.NET users, it can be set in the constructor of the main form or
            in the "Sub Main" procedure. If no entry point is available, it is recommended that the LicenseKey 
            property be set in a static constructor of a class that will be accessed systematically before
            any of the library's classes are instantiated or, you can simply set the LicenseKey
            property immediately BEFORE you instantiate a class.</para></remarks>
        </member>
        <member name="P:Xceed.Ftp.Licenser.LicenseKey">
            <summary>
            Gets or sets the license key used to license this product.
            </summary>
            <value>A string value representing the license key used to license this product.</value>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorAction">
            <summary>
            Value representing the action to take when an error occurs while transferring <b>multiple</b>  files.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Abort">
            <summary>
            The entire process should be aborted.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Retry">
            <summary>
            Attempt to retransfer the file.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Ignore">
            <summary>
            Skip the file and continue with the next file to transfer.
            </summary>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventArgs">
            <summary>
            Provides information for files that fail to be transferred during a multiple-file transfer.
            </summary>
            <remarks><para><note type="caution">
            By default, if an error occurs during the multiple-file transfer, the <b>entire</b>  operation
            will be aborted. To change this behavior, set the <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action"/> 
            property set to either Retry or Ignore.
            </note></para></remarks>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action">
            <summary>
            Gets or sets a value indicating the action to take for the file failed to be transferred during
            a multiple-file transfer.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.MultipleFileTransferErrorAction"/> value indicating the action to take
            for the file that failed to be transferred during a multiple-file transfer.</value>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.LocalItemName">
            <summary>
            Gets the local path and name of the item that failed to be transferred during a multiple-file 
            transfer.
            </summary>
            <value>A string representing the local path and name of the item that failed to be transferred 
            during a multiple-file transfer.</value>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemName">
            <summary>
            Gets the remote name of the item that failed to be transferred during a multiple-file transfer.
            </summary>
            <value>A string representing the remote name of the item that failed to be transferred 
            during a multiple-file transfer.</value>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemType">
            <summary>
            Gets or sets the type of the remote item which failed to be transferred during a multiple-file
            transfer.
            </summary>
            <value>A <see cref="T:Xceed.Ftp.FtpItemType"/> value representing the type (File, Folder or Link) of the item  
            which failed to be transferred during a multiple-file transfer.</value>
        </member>
        <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Exception">
            <summary>
            Gets the exception that was thrown while attempting to transfer a file during a
            multiple-file transfer.
            </summary>
            <value>An <see cref="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Exception"/> representing the exception that was thrown while attempting
            to transfer a file during a multiple-file transfer.</value>
        </member>
        <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.MultipleFileTransferError"/> event. 
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.MultipleFileTransferErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.ParsingListingLineEventArgs">
            <summary>
            Provides information on the FTP item whose listing information was retrieved.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Item">
            <summary>
            Gets an FtpItemInfo object representing the listing information of an FTP item.
            </summary>
            <value>A reference to an <see cref="T:Xceed.Ftp.FtpItemInfo"/> object representing the listing 
            information of an FTP item.</value>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Line">
            <summary>
            Gets the listing line which was returned by the FTP server and used to create the Item.
            </summary>
            <value>A string representing the listing line which was returned by the FTP server and used
            to create the <see cref="P:Xceed.Ftp.ParsingListingLineEventArgs.Item"/>.</value>
        </member>
        <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Valid">
            <summary>
            Gets or sets a boolean value indicating if the listing line returned by the 
            FTP server was valid.
            </summary>
            <value><see langword="true"/> if the listing <see cref="P:Xceed.Ftp.ParsingListingLineEventArgs.Line"/> represents a valid item; 
            <see langword="false"/> otherwise.</value> 
            <remarks><para>
            If Valid is <see langword="true"/> when the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event is raised, 
            at least one parser succeeded in parsing the listing line and <see cref="P:Xceed.Ftp.ParsingListingLineEventArgs.Item"/> has been filled with the 
            parsed information. To filter (remove) an item from the listing set Valid to <see langword="false"/>. The 
            content of Item can also be modified if you want to change the item's information.</para>
            <para>If Valid is <see langword="false"/> when the event is raised, none of the 
            parsers succeeded in parsing the listing line. In this case you can provide your own parsing, fill 
            Item and set Valid to <see langword="true"/>.</para></remarks>
        </member>
        <member name="T:Xceed.Ftp.ParsingListingLineEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.ParsingListingLine"/> event. 
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.ParsingListingLineEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.ReplyReceivedEventArgs">
            <summary>
            Provides information on the reply that has been received from the FTP server.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.ReplyReceivedEventArgs.Reply">
            <summary>
            Gets the reply that was received from the FTP server.
            </summary>
            <value>A reference to an <see cref="T:Xceed.Ftp.FtpReply"/> object representing the reply that 
            was received from the FTP server.</value>
        </member>
        <member name="T:Xceed.Ftp.ReplyReceivedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.ReplyReceived"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.ReplyReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.RepresentationType">
            <summary>
            Value representing the representation type to use when sending or receiving files.</summary>
        </member>
        <member name="F:Xceed.Ftp.RepresentationType.Ascii">
            <summary>The data will be sent/received using the standard 8-bit NVT-ASCII 
            representation. This representation type is intended primarily for the transfer 
            of text files.</summary>
        </member>
        <member name="F:Xceed.Ftp.RepresentationType.Binary">
            <summary>The data will be sent/received as contiguous bits which are packed into 
            the 8-bit transfer bytes. This representation type is intended for the efficient storage 
            and retrieval of files and for the transfer of binary data.</summary>
        </member>
        <member name="T:Xceed.Ftp.StringList">
            <summary>
            Contains a list of strings.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.StringList.Contains(System.String)">
            <summary>
            Retrieves a boolean value indicating if a specific string exists in the list. 
            </summary>
            <param name="value">The string to locate.</param>
            <returns><see langword="true"/> if the string exists in the list;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.Ftp.StringList.IndexOf(System.String)">
            <summary>
            Searches for the specified string and returns the zero-based index of the 
            first occurrence within the list. 
            </summary>
            <param name="value">The string to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within 
            the entire list, if found; otherwise, returns -1.</returns>
        </member>
        <member name="M:Xceed.Ftp.StringList.RemoveAt(System.Int32)">
            <summary>
            Removes the string from the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the string.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string into the list at the specified index
            </summary>
            <param name="index">The zero-based index at which to insert the string.</param>
            <param name="value">The string to insert.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Remove(System.String)">
            <summary>
            Removes the string from the list.
            </summary>
            <param name="value">The string to remove.</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.Clear">
            <summary>
            Removes all strings from the list.
            </summary>
        </member>
        <member name="M:Xceed.Ftp.StringList.Add(System.String)">
            <summary>
            Adds a string to the list.
            </summary>
            <param name="value">The string to add.</param>
            <returns>The zero-based index at which the string was added.</returns>
            <remarks><para>This method accepts a string with multiple lines however each line will be added 
            as an individual item to the list. The index of the first line added will be returned.</para></remarks>
        </member>
        <member name="M:Xceed.Ftp.StringList.AddRange(System.String[])">
            <summary>
            Adds the elements of a string array to the end of the StringList collection. 
            </summary>
            <param name="values">An array of strings representing the strings to add to the 
            end of the StringList collection</param>
        </member>
        <member name="M:Xceed.Ftp.StringList.ToString">
            <summary>
            Returns a string representing the entire contents the string list. Each item in the
            string list is separated by a carriage-return/line-feed (CRLF).
            </summary>
            <returns>A string representing the entire contents the string list. Each item in the
            string list is separated by a carriage-return/line-feed (CRLF).</returns>
        </member>
        <member name="M:Xceed.Ftp.StringList.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value. 
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Ftp.StringList.IsFixedSize">
            <summary>
            Gets a value indicating whether the StringList has a fixed size. 
            </summary>
            <value><see langword="true"/> if the StringList has a fixed size;
            <see langword="false"/> oterhwise.</value>
        </member>
        <member name="P:Xceed.Ftp.StringList.IsReadOnly">
            <summary>
            Gets a boolean value indicating if the StringList is readonly.
            </summary>
            <value><see langword="true"/> if the strings already in the StringList can
            be modified; <see langword="false"/> oterhwise.</value>
        </member>
        <member name="P:Xceed.Ftp.StringList.Item(System.Int32)">
            <summary>
            Gets or sets the string at the specified index.
            </summary><value>
            The string found at the specified index.
            </value>
            <param name="index">The zero-based index at which to get the string.</param>
        </member>
        <member name="T:Xceed.Ftp.TransferringFileEventArgs">
            <summary>
            Provides information on the file being sent or received.
            </summary>
        </member>
        <member name="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename">
            <summary>
            Gets the path and filename of the local file.
            </summary>   
            <value>A string representing the path and filename of the local file.</value>
            <remarks><para><note>
            When using overloads of the <see cref="M:Xceed.Ftp.FtpClient.SendFile(System.String)"/> and 
            <see cref="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String)"/> methods that take a <see cref="T:System.IO.Stream"/> as a 
            parameter, LocalFilename will be <see cref="F:System.String.Empty"/>.
            </note></para></remarks>
        </member>
        <member name="P:Xceed.Ftp.TransferringFileEventArgs.RemoteFilename">
            <summary>
            Gets the filename of the remote file.
            </summary>
            <value>A string representing the filename of the remote file.</value>
        </member>
        <member name="T:Xceed.Ftp.TransferringFileEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.Ftp.FtpClient.SendingFile"/> and
            <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile"/> events. 
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.Ftp.TransferringFileEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.Ftp.VerificationAction">
            <summary>
            Value representing the verification action to take in the <see cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/> event when a 
            certificate is received from an FTP server..
            </summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.Accept">
            <summary>Accept the FTP server's certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.Reject">
            <summary>Reject the FTP server's certificate and make the connection or authentication fail.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationAction.VerifyAgain">
            <summary>
            Verify the certificate again. The Flags property should have been updated to now accept the 
            current reject reason. The <see cref="E:Xceed.Ftp.FtpClient.CertificateReceived"/> event will be raised 
            again with the new status.</summary>
        </member>
        <member name="T:Xceed.Ftp.VerificationFlags">
            <summary>
            Value representing the different verification flags used to verify an FTP server's certificate.
            </summary>
            <remarks><para>
            More than one verification flag can be combined using the OR operator.
            </para></remarks>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.None">
            <summary>No flags. This is the most severe form of validation: No certificate anomalies will 
            be accepted.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotValid">
            <summary>Ignore an invalid time.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>Ignore an invalid time of the certificate trust list.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotNested">
            <summary>Ignore an invalid time nesting.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidBasicConstraints">
            <summary>Ignore invalid basic constraints.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreAllTimeChecks">
            <summary>Ignore all time checks.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.AllowUnknownCA">
            <summary>Allow an unknown certificate authority.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreWrongUsage">
            <summary>Ignore the wrong usage of a certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidName">
            <summary>Ignore an invalid name.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidPolicy">
            <summary>Ignore an invalid policy.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreEndRevUnknown">
            <summary>Ignore an unknown revocation status of the end certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreSignerRevUnknown">
            <summary>Ignore an unknown revocation status of the signer certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCARevUnknown">
            <summary>Ignore an unknown revocation status of the certificate authority.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreRootRevUnknown">
            <summary>Ignore an unknown revocation status of the root certificate.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.IgnoreAllRevUnknown">
            <summary>Ignore an unknown revocation status of any of the certificates.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.AllowTestRoot">
            <summary>Allow a test root.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationFlags.TrustTestRoot">
            <summary>Trust a test root.</summary>
        </member>
        <member name="T:Xceed.Ftp.VerificationStatus">
            <summary>
            Value representing the different certificate status values.
            </summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.ValidCertificate">
            <summary>The certificate is valid.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.Expired">
            <summary>A required certificate is not within its validity period.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidBasicConstraints">
            <summary>The certificate's basic constraints are invalid or missing.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidChain">
            <summary>A chain of certificates was not correctly created.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidNesting">
            <summary>The validity periods of the certification chain do not nest correctly.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidPurpose">
            <summary>A certificate is being used for a non-permitted purpose.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidRole">
            <summary>A certificate that can only be used as an end-entity is being used as a CA or visa-versa.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.InvalidSignature">
            <summary>The signature of the certificate cannot be verified.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.NoCNMatch">
            <summary>The certificate's CN name does not match the passed value.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.ParentRevoked">
            <summary>A certificate in the chain has been explicitly revoked by its issuer.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.RevocationFailure">
            <summary>The revocation process could not continue. The certificates could not be checked.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.RevocationServerOffline">
            <summary>Since the revocation server was offline, the called function was not able to complete the revocation check.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.Revoked">
            <summary>The certificate or signature has been revoked.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.UntrustedRoot">
            <summary>A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.UntrustedTestRoot">
            <summary>The root certificate is a testing certificate and policy settings disallow test certificates.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.WrongUsage">
            <summary>The certificate is not valid for the requested usage.</summary>
        </member>
        <member name="F:Xceed.Ftp.VerificationStatus.OtherError">
            <summary>The certificate is invalid.</summary>
        </member>
    </members>
</doc>
